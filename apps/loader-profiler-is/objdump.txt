
prog:     file format elf64-x86-64


Disassembly of section .init:

0000000000400120 <_init>:
.section .init
.global _init
_init:
	push %rax
  400120:	50                   	push   %rax
.section .init
	pop %rax
  400121:	58                   	pop    %rax
	ret
  400122:	c3                   	retq   

Disassembly of section .text:

0000000000400130 <exit>:
}

weak_alias(libc_exit_fini, __libc_exit_fini);

_Noreturn void exit(int code)
{
  400130:	48 83 ec 18          	sub    $0x18,%rsp
	__funcs_on_exit();
  400134:	31 c0                	xor    %eax,%eax
{
  400136:	89 7c 24 0c          	mov    %edi,0xc(%rsp)
	__funcs_on_exit();
  40013a:	e8 42 10 00 00       	callq  401181 <__funcs_on_exit>
	__libc_exit_fini();
  40013f:	e8 3e 10 00 00       	callq  401182 <__libc_exit_fini>
	__stdio_exit();
  400144:	31 c0                	xor    %eax,%eax
  400146:	e8 d5 57 00 00       	callq  405920 <__stdio_exit>
	_Exit(code);
  40014b:	8b 7c 24 0c          	mov    0xc(%rsp),%edi
  40014f:	e8 7b 33 00 00       	callq  4034cf <_Exit>
  400154:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40015b:	00 00 00 
  40015e:	66 90                	xchg   %ax,%ax

0000000000400160 <main>:
/*****************************************************************/
/*************             M  A  I  N             ****************/
/*****************************************************************/

int main( int argc, char **argv )
{
  400160:	41 54                	push   %r12
  400162:	55                   	push   %rbp
    FILE            *fp;


/*  Initialize timers  */
    timer_on = 0;            
    if ((fp = fopen("timer.flag", "r")) != NULL) {
  400163:	48 8d 35 30 59 00 00 	lea    0x5930(%rip),%rsi        # 405a9a <_fini+0x107>
{
  40016a:	53                   	push   %rbx
    if ((fp = fopen("timer.flag", "r")) != NULL) {
  40016b:	48 8d 3d c6 5c 00 00 	lea    0x5cc6(%rip),%rdi        # 405e38 <_fini+0x4a5>
{
  400172:	48 83 ec 10          	sub    $0x10,%rsp
    if ((fp = fopen("timer.flag", "r")) != NULL) {
  400176:	e8 ed 11 00 00       	callq  401368 <fopen>
  40017b:	48 85 c0             	test   %rax,%rax
  40017e:	0f 84 ec 01 00 00    	je     400370 <main+0x210>
        fclose(fp);
  400184:	48 89 c7             	mov    %rax,%rdi
        timer_on = 1;
  400187:	41 bc 01 00 00 00    	mov    $0x1,%r12d
        fclose(fp);
  40018d:	e8 14 10 00 00       	callq  4011a6 <fclose>
    }
    timer_clear( 0 );
  400192:	31 ff                	xor    %edi,%edi
  400194:	e8 27 08 00 00       	callq  4009c0 <timer_clear>
    if (timer_on) {
        timer_clear( 1 );
  400199:	bf 01 00 00 00       	mov    $0x1,%edi
  40019e:	e8 1d 08 00 00       	callq  4009c0 <timer_clear>
        timer_clear( 2 );
  4001a3:	bf 02 00 00 00       	mov    $0x2,%edi
  4001a8:	e8 13 08 00 00       	callq  4009c0 <timer_clear>
        timer_clear( 3 );
  4001ad:	bf 03 00 00 00       	mov    $0x3,%edi
  4001b2:	e8 09 08 00 00       	callq  4009c0 <timer_clear>
    }

    if (timer_on) timer_start( 3 );
  4001b7:	bf 03 00 00 00       	mov    $0x3,%edi
  4001bc:	e8 1f 08 00 00       	callq  4009e0 <timer_start>
  4001c1:	48 8b 05 08 6f 20 00 	mov    0x206f08(%rip),%rax        # 6070d0 <B_test_index_array>
        };

        

/*  Printout initial NPB info */
    printf
  4001c8:	48 8d 3d b9 5b 00 00 	lea    0x5bb9(%rip),%rdi        # 405d88 <_fini+0x3f5>
  4001cf:	48 89 05 2a a2 a0 10 	mov    %rax,0x10a0a22a(%rip)        # 10e0a400 <test_index_array>
  4001d6:	48 8b 05 fb 6e 20 00 	mov    0x206efb(%rip),%rax        # 6070d8 <B_test_index_array+0x8>
  4001dd:	48 89 05 24 a2 a0 10 	mov    %rax,0x10a0a224(%rip)        # 10e0a408 <test_index_array+0x8>
  4001e4:	8b 05 f6 6e 20 00    	mov    0x206ef6(%rip),%eax        # 6070e0 <B_test_index_array+0x10>
  4001ea:	89 05 20 a2 a0 10    	mov    %eax,0x10a0a220(%rip)        # 10e0a410 <test_index_array+0x10>
  4001f0:	48 8b 05 b9 6e 20 00 	mov    0x206eb9(%rip),%rax        # 6070b0 <B_test_rank_array>
  4001f7:	48 89 05 d2 81 20 10 	mov    %rax,0x102081d2(%rip)        # 106083d0 <test_rank_array>
  4001fe:	48 8b 05 b3 6e 20 00 	mov    0x206eb3(%rip),%rax        # 6070b8 <B_test_rank_array+0x8>
  400205:	48 89 05 cc 81 20 10 	mov    %rax,0x102081cc(%rip)        # 106083d8 <test_rank_array+0x8>
  40020c:	8b 05 ae 6e 20 00    	mov    0x206eae(%rip),%eax        # 6070c0 <B_test_rank_array+0x10>
  400212:	89 05 c8 81 20 10    	mov    %eax,0x102081c8(%rip)        # 106083e0 <test_rank_array+0x10>
  400218:	e8 b6 12 00 00       	callq  4014d3 <puts>
      ( "\n\n NAS Parallel Benchmarks (NPB3.3-SER) - IS Benchmark\n\n" );
    printf( " Size:  %ld  (class %c)\n", (long)TOTAL_KEYS, CLASS );
  40021d:	48 8d 3d 1f 5c 00 00 	lea    0x5c1f(%rip),%rdi        # 405e43 <_fini+0x4b0>
  400224:	ba 42 00 00 00       	mov    $0x42,%edx
  400229:	be 00 00 00 02       	mov    $0x2000000,%esi
  40022e:	31 c0                	xor    %eax,%eax
  400230:	e8 fd 11 00 00       	callq  401432 <printf>
    printf( " Iterations:   %d\n", MAX_ITERATIONS );
  400235:	48 8d 3d 20 5c 00 00 	lea    0x5c20(%rip),%rdi        # 405e5c <_fini+0x4c9>
  40023c:	be 0a 00 00 00       	mov    $0xa,%esi
  400241:	31 c0                	xor    %eax,%eax
  400243:	e8 ea 11 00 00       	callq  401432 <printf>

    if (timer_on) timer_start( 1 );
  400248:	bf 01 00 00 00       	mov    $0x1,%edi
  40024d:	e8 8e 07 00 00       	callq  4009e0 <timer_start>

/*  Generate random number sequence and subsequent keys on all procs */
    create_seq( 314159265.00,                    /* Random number gen seed */
  400252:	f2 0f 10 0d 9e 5c 00 	movsd  0x5c9e(%rip),%xmm1        # 405ef8 <_fini+0x565>
  400259:	00 
  40025a:	f2 0f 10 05 9e 5c 00 	movsd  0x5c9e(%rip),%xmm0        # 405f00 <_fini+0x56d>
  400261:	00 
  400262:	e8 59 09 00 00       	callq  400bc0 <create_seq>
                1220703125.00 );                 /* Random number gen mult */
    if (timer_on) timer_stop( 1 );
  400267:	bf 01 00 00 00       	mov    $0x1,%edi
  40026c:	e8 9f 07 00 00       	callq  400a10 <timer_stop>


/*  Do one interation for free (i.e., untimed) to guarantee initialization of  
    all data and code pages and respective tables */
    rank( 1 );  
  400271:	bf 01 00 00 00       	mov    $0x1,%edi


/*  This is the main iteration */
    for( iteration=1; iteration<=MAX_ITERATIONS; iteration++ )
    {
        if( CLASS != 'S' ) printf( "        %d\n", iteration );
  400276:	48 8d 2d 00 5c 00 00 	lea    0x5c00(%rip),%rbp        # 405e7d <_fini+0x4ea>
    for( iteration=1; iteration<=MAX_ITERATIONS; iteration++ )
  40027d:	bb 01 00 00 00       	mov    $0x1,%ebx
    rank( 1 );  
  400282:	e8 a9 0a 00 00       	callq  400d30 <rank>
    if( CLASS != 'S' ) printf( "\n   iteration\n" );
  400287:	48 8d 3d e1 5b 00 00 	lea    0x5be1(%rip),%rdi        # 405e6f <_fini+0x4dc>
    passed_verification = 0;
  40028e:	c7 05 4c 81 20 10 00 	movl   $0x0,0x1020814c(%rip)        # 106083e4 <passed_verification>
  400295:	00 00 00 
    if( CLASS != 'S' ) printf( "\n   iteration\n" );
  400298:	e8 36 12 00 00       	callq  4014d3 <puts>
    timer_start( 0 );
  40029d:	31 ff                	xor    %edi,%edi
  40029f:	e8 3c 07 00 00       	callq  4009e0 <timer_start>
  4002a4:	0f 1f 40 00          	nopl   0x0(%rax)
        if( CLASS != 'S' ) printf( "        %d\n", iteration );
  4002a8:	89 de                	mov    %ebx,%esi
  4002aa:	48 89 ef             	mov    %rbp,%rdi
  4002ad:	31 c0                	xor    %eax,%eax
  4002af:	e8 7e 11 00 00       	callq  401432 <printf>
        rank( iteration );
  4002b4:	89 df                	mov    %ebx,%edi
    for( iteration=1; iteration<=MAX_ITERATIONS; iteration++ )
  4002b6:	83 c3 01             	add    $0x1,%ebx
        rank( iteration );
  4002b9:	e8 72 0a 00 00       	callq  400d30 <rank>
    for( iteration=1; iteration<=MAX_ITERATIONS; iteration++ )
  4002be:	83 fb 0b             	cmp    $0xb,%ebx
  4002c1:	75 e5                	jne    4002a8 <main+0x148>
    }


/*  End of timing, obtain maximum time of all processors */
    timer_stop( 0 );
  4002c3:	31 ff                	xor    %edi,%edi
  4002c5:	e8 46 07 00 00       	callq  400a10 <timer_stop>
    timecounter = timer_read( 0 );
  4002ca:	31 ff                	xor    %edi,%edi
  4002cc:	e8 7f 07 00 00       	callq  400a50 <timer_read>


/*  This tests that keys are in sequence: sorting of last ranked key seq
    occurs here, but is an untimed operation                             */
    if (timer_on) timer_start( 2 );
  4002d1:	45 85 e4             	test   %r12d,%r12d
  4002d4:	f2 0f 11 44 24 08    	movsd  %xmm0,0x8(%rsp)
  4002da:	0f 85 6b 01 00 00    	jne    40044b <main+0x2eb>
    full_verify();
  4002e0:	e8 6b 09 00 00       	callq  400c50 <full_verify>

    if (timer_on) timer_stop( 3 );


/*  The final printout  */
    if( passed_verification != 5*MAX_ITERATIONS + 1 )
  4002e5:	83 3d f8 80 20 10 33 	cmpl   $0x33,0x102080f8(%rip)        # 106083e4 <passed_verification>
  4002ec:	f2 0f 10 44 24 08    	movsd  0x8(%rsp),%xmm0
  4002f2:	0f 84 23 01 00 00    	je     40041b <main+0x2bb>
                     64,
                     0,
                     MAX_ITERATIONS,
                     timecounter,
                     ((double) (MAX_ITERATIONS*TOTAL_KEYS))
                                                  /timecounter/1000000.,
  4002f8:	f2 0f 10 0d 18 5c 00 	movsd  0x5c18(%rip),%xmm1        # 405f18 <_fini+0x585>
  4002ff:	00 
    c_print_results( "IS",
  400300:	48 8d 05 b3 5b 00 00 	lea    0x5bb3(%rip),%rax        # 405eba <_fini+0x527>
        passed_verification = 0;
  400307:	c7 05 d3 80 20 10 00 	movl   $0x0,0x102080d3(%rip)        # 106083e4 <passed_verification>
  40030e:	00 00 00 
                                                  /timecounter/1000000.,
  400311:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
    c_print_results( "IS",
  400315:	50                   	push   %rax
  400316:	50                   	push   %rax
  400317:	50                   	push   %rax
  400318:	50                   	push   %rax
  400319:	50                   	push   %rax
  40031a:	50                   	push   %rax
  40031b:	48 8d 05 9f 5b 00 00 	lea    0x5b9f(%rip),%rax        # 405ec1 <_fini+0x52e>
  400322:	50                   	push   %rax
  400323:	48 8d 05 a3 5b 00 00 	lea    0x5ba3(%rip),%rax        # 405ecd <_fini+0x53a>
  40032a:	50                   	push   %rax
  40032b:	6a 00                	pushq  $0x0
  40032d:	48 8d 05 9f 5b 00 00 	lea    0x5b9f(%rip),%rax        # 405ed3 <_fini+0x540>
  400334:	48 8d 3d 7c 5b 00 00 	lea    0x5b7c(%rip),%rdi        # 405eb7 <_fini+0x524>
  40033b:	41 b9 0a 00 00 00    	mov    $0xa,%r9d
  400341:	45 31 c0             	xor    %r8d,%r8d
  400344:	b9 40 00 00 00       	mov    $0x40,%ecx
  400349:	ba 00 00 08 00       	mov    $0x80000,%edx
  40034e:	50                   	push   %rax
  40034f:	be 42 00 00 00       	mov    $0x42,%esi
  400354:	f2 0f 5e 0d c4 5b 00 	divsd  0x5bc4(%rip),%xmm1        # 405f20 <_fini+0x58d>
  40035b:	00 
  40035c:	e8 af 03 00 00       	callq  400710 <c_print_results>
  400361:	48 83 c4 50          	add    $0x50,%rsp
    }


    return 0;
         /**************************/
}        /*  E N D  P R O G R A M  */
  400365:	48 83 c4 10          	add    $0x10,%rsp
  400369:	31 c0                	xor    %eax,%eax
  40036b:	5b                   	pop    %rbx
  40036c:	5d                   	pop    %rbp
  40036d:	41 5c                	pop    %r12
  40036f:	c3                   	retq   
    timer_clear( 0 );
  400370:	31 ff                	xor    %edi,%edi
    timer_on = 0;            
  400372:	45 31 e4             	xor    %r12d,%r12d
    timer_clear( 0 );
  400375:	e8 46 06 00 00       	callq  4009c0 <timer_clear>
  40037a:	48 8b 05 4f 6d 20 00 	mov    0x206d4f(%rip),%rax        # 6070d0 <B_test_index_array>
    printf
  400381:	48 8d 3d 00 5a 00 00 	lea    0x5a00(%rip),%rdi        # 405d88 <_fini+0x3f5>
  400388:	48 89 05 71 a0 a0 10 	mov    %rax,0x10a0a071(%rip)        # 10e0a400 <test_index_array>
  40038f:	48 8b 05 42 6d 20 00 	mov    0x206d42(%rip),%rax        # 6070d8 <B_test_index_array+0x8>
  400396:	48 89 05 6b a0 a0 10 	mov    %rax,0x10a0a06b(%rip)        # 10e0a408 <test_index_array+0x8>
  40039d:	8b 05 3d 6d 20 00    	mov    0x206d3d(%rip),%eax        # 6070e0 <B_test_index_array+0x10>
  4003a3:	89 05 67 a0 a0 10    	mov    %eax,0x10a0a067(%rip)        # 10e0a410 <test_index_array+0x10>
  4003a9:	48 8b 05 00 6d 20 00 	mov    0x206d00(%rip),%rax        # 6070b0 <B_test_rank_array>
  4003b0:	48 89 05 19 80 20 10 	mov    %rax,0x10208019(%rip)        # 106083d0 <test_rank_array>
  4003b7:	48 8b 05 fa 6c 20 00 	mov    0x206cfa(%rip),%rax        # 6070b8 <B_test_rank_array+0x8>
  4003be:	48 89 05 13 80 20 10 	mov    %rax,0x10208013(%rip)        # 106083d8 <test_rank_array+0x8>
  4003c5:	8b 05 f5 6c 20 00    	mov    0x206cf5(%rip),%eax        # 6070c0 <B_test_rank_array+0x10>
  4003cb:	89 05 0f 80 20 10    	mov    %eax,0x1020800f(%rip)        # 106083e0 <test_rank_array+0x10>
  4003d1:	e8 fd 10 00 00       	callq  4014d3 <puts>
    printf( " Size:  %ld  (class %c)\n", (long)TOTAL_KEYS, CLASS );
  4003d6:	48 8d 3d 66 5a 00 00 	lea    0x5a66(%rip),%rdi        # 405e43 <_fini+0x4b0>
  4003dd:	ba 42 00 00 00       	mov    $0x42,%edx
  4003e2:	be 00 00 00 02       	mov    $0x2000000,%esi
  4003e7:	31 c0                	xor    %eax,%eax
  4003e9:	e8 44 10 00 00       	callq  401432 <printf>
    printf( " Iterations:   %d\n", MAX_ITERATIONS );
  4003ee:	48 8d 3d 67 5a 00 00 	lea    0x5a67(%rip),%rdi        # 405e5c <_fini+0x4c9>
  4003f5:	be 0a 00 00 00       	mov    $0xa,%esi
  4003fa:	31 c0                	xor    %eax,%eax
  4003fc:	e8 31 10 00 00       	callq  401432 <printf>
    create_seq( 314159265.00,                    /* Random number gen seed */
  400401:	f2 0f 10 0d ef 5a 00 	movsd  0x5aef(%rip),%xmm1        # 405ef8 <_fini+0x565>
  400408:	00 
  400409:	f2 0f 10 05 ef 5a 00 	movsd  0x5aef(%rip),%xmm0        # 405f00 <_fini+0x56d>
  400410:	00 
  400411:	e8 aa 07 00 00       	callq  400bc0 <create_seq>
  400416:	e9 56 fe ff ff       	jmpq   400271 <main+0x111>
    c_print_results( "IS",
  40041b:	48 8d 05 98 5a 00 00 	lea    0x5a98(%rip),%rax        # 405eba <_fini+0x527>
                                                  /timecounter/1000000.,
  400422:	f2 0f 10 0d ee 5a 00 	movsd  0x5aee(%rip),%xmm1        # 405f18 <_fini+0x585>
  400429:	00 
    c_print_results( "IS",
  40042a:	50                   	push   %rax
  40042b:	50                   	push   %rax
                                                  /timecounter/1000000.,
  40042c:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
    c_print_results( "IS",
  400430:	50                   	push   %rax
  400431:	50                   	push   %rax
  400432:	50                   	push   %rax
  400433:	50                   	push   %rax
  400434:	48 8d 05 86 5a 00 00 	lea    0x5a86(%rip),%rax        # 405ec1 <_fini+0x52e>
  40043b:	50                   	push   %rax
  40043c:	48 8d 05 8a 5a 00 00 	lea    0x5a8a(%rip),%rax        # 405ecd <_fini+0x53a>
  400443:	50                   	push   %rax
  400444:	6a 33                	pushq  $0x33
  400446:	e9 e2 fe ff ff       	jmpq   40032d <main+0x1cd>
    if (timer_on) timer_start( 2 );
  40044b:	bf 02 00 00 00       	mov    $0x2,%edi
  400450:	e8 8b 05 00 00       	callq  4009e0 <timer_start>
    full_verify();
  400455:	e8 f6 07 00 00       	callq  400c50 <full_verify>
    if (timer_on) timer_stop( 2 );
  40045a:	bf 02 00 00 00       	mov    $0x2,%edi
  40045f:	e8 ac 05 00 00       	callq  400a10 <timer_stop>
    if (timer_on) timer_stop( 3 );
  400464:	bf 03 00 00 00       	mov    $0x3,%edi
  400469:	e8 a2 05 00 00       	callq  400a10 <timer_stop>
    if( passed_verification != 5*MAX_ITERATIONS + 1 )
  40046e:	83 3d 6f 7f 20 10 33 	cmpl   $0x33,0x10207f6f(%rip)        # 106083e4 <passed_verification>
  400475:	f2 0f 10 44 24 08    	movsd  0x8(%rsp),%xmm0
  40047b:	0f 84 4b 01 00 00    	je     4005cc <main+0x46c>
                                                  /timecounter/1000000.,
  400481:	f2 0f 10 0d 8f 5a 00 	movsd  0x5a8f(%rip),%xmm1        # 405f18 <_fini+0x585>
  400488:	00 
    c_print_results( "IS",
  400489:	48 8d 05 2a 5a 00 00 	lea    0x5a2a(%rip),%rax        # 405eba <_fini+0x527>
        passed_verification = 0;
  400490:	c7 05 4a 7f 20 10 00 	movl   $0x0,0x10207f4a(%rip)        # 106083e4 <passed_verification>
  400497:	00 00 00 
                                                  /timecounter/1000000.,
  40049a:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
    c_print_results( "IS",
  40049e:	50                   	push   %rax
  40049f:	50                   	push   %rax
  4004a0:	50                   	push   %rax
  4004a1:	50                   	push   %rax
  4004a2:	50                   	push   %rax
  4004a3:	50                   	push   %rax
  4004a4:	48 8d 05 16 5a 00 00 	lea    0x5a16(%rip),%rax        # 405ec1 <_fini+0x52e>
  4004ab:	50                   	push   %rax
  4004ac:	48 8d 05 1a 5a 00 00 	lea    0x5a1a(%rip),%rax        # 405ecd <_fini+0x53a>
  4004b3:	50                   	push   %rax
  4004b4:	6a 00                	pushq  $0x0
  4004b6:	48 8d 05 16 5a 00 00 	lea    0x5a16(%rip),%rax        # 405ed3 <_fini+0x540>
  4004bd:	48 8d 3d f3 59 00 00 	lea    0x59f3(%rip),%rdi        # 405eb7 <_fini+0x524>
  4004c4:	45 31 c0             	xor    %r8d,%r8d
  4004c7:	41 b9 0a 00 00 00    	mov    $0xa,%r9d
  4004cd:	b9 40 00 00 00       	mov    $0x40,%ecx
  4004d2:	ba 00 00 08 00       	mov    $0x80000,%edx
  4004d7:	50                   	push   %rax
  4004d8:	be 42 00 00 00       	mov    $0x42,%esi
  4004dd:	f2 0f 5e 0d 3b 5a 00 	divsd  0x5a3b(%rip),%xmm1        # 405f20 <_fini+0x58d>
  4004e4:	00 
  4004e5:	e8 26 02 00 00       	callq  400710 <c_print_results>
  4004ea:	48 83 c4 50          	add    $0x50,%rsp
       t_total = timer_read( 3 );
  4004ee:	bf 03 00 00 00       	mov    $0x3,%edi
  4004f3:	e8 58 05 00 00       	callq  400a50 <timer_read>
       printf("\nAdditional timers -\n");
  4004f8:	48 8d 3d 8a 59 00 00 	lea    0x598a(%rip),%rdi        # 405e89 <_fini+0x4f6>
       t_total = timer_read( 3 );
  4004ff:	f2 0f 11 44 24 08    	movsd  %xmm0,0x8(%rsp)
       printf("\nAdditional timers -\n");
  400505:	e8 c9 0f 00 00       	callq  4014d3 <puts>
       printf(" Total execution: %8.3f\n", t_total);
  40050a:	f2 0f 10 44 24 08    	movsd  0x8(%rsp),%xmm0
  400510:	48 8d 3d 87 59 00 00 	lea    0x5987(%rip),%rdi        # 405e9e <_fini+0x50b>
  400517:	b8 01 00 00 00       	mov    $0x1,%eax
  40051c:	e8 11 0f 00 00       	callq  401432 <printf>
       if (t_total == 0.0) t_total = 1.0;
  400521:	f2 0f 10 54 24 08    	movsd  0x8(%rsp),%xmm2
  400527:	66 0f 2e 15 d9 59 00 	ucomisd 0x59d9(%rip),%xmm2        # 405f08 <_fini+0x575>
  40052e:	00 
  40052f:	7a 12                	jp     400543 <main+0x3e3>
  400531:	66 48 0f 7e d0       	movq   %xmm2,%rax
  400536:	48 0f 44 05 a2 59 00 	cmove  0x59a2(%rip),%rax        # 405ee0 <_fini+0x54d>
  40053d:	00 
  40053e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
       timecounter = timer_read(1);
  400543:	bf 01 00 00 00       	mov    $0x1,%edi
  400548:	e8 03 05 00 00       	callq  400a50 <timer_read>
       t_percent = timecounter/t_total * 100.;
  40054d:	66 0f 28 c8          	movapd %xmm0,%xmm1
       printf(" Initialization : %8.3f (%5.2f%%)\n", timecounter, t_percent);
  400551:	48 8d 3d 68 58 00 00 	lea    0x5868(%rip),%rdi        # 405dc0 <_fini+0x42d>
  400558:	b8 02 00 00 00       	mov    $0x2,%eax
       t_percent = timecounter/t_total * 100.;
  40055d:	f2 0f 5e 4c 24 08    	divsd  0x8(%rsp),%xmm1
       printf(" Initialization : %8.3f (%5.2f%%)\n", timecounter, t_percent);
  400563:	f2 0f 59 0d a5 59 00 	mulsd  0x59a5(%rip),%xmm1        # 405f10 <_fini+0x57d>
  40056a:	00 
  40056b:	e8 c2 0e 00 00       	callq  401432 <printf>
       timecounter = timer_read(0);
  400570:	31 ff                	xor    %edi,%edi
  400572:	e8 d9 04 00 00       	callq  400a50 <timer_read>
       t_percent = timecounter/t_total * 100.;
  400577:	66 0f 28 c8          	movapd %xmm0,%xmm1
       printf(" Benchmarking   : %8.3f (%5.2f%%)\n", timecounter, t_percent);
  40057b:	48 8d 3d 66 58 00 00 	lea    0x5866(%rip),%rdi        # 405de8 <_fini+0x455>
  400582:	b8 02 00 00 00       	mov    $0x2,%eax
       t_percent = timecounter/t_total * 100.;
  400587:	f2 0f 5e 4c 24 08    	divsd  0x8(%rsp),%xmm1
       printf(" Benchmarking   : %8.3f (%5.2f%%)\n", timecounter, t_percent);
  40058d:	f2 0f 59 0d 7b 59 00 	mulsd  0x597b(%rip),%xmm1        # 405f10 <_fini+0x57d>
  400594:	00 
  400595:	e8 98 0e 00 00       	callq  401432 <printf>
       timecounter = timer_read(2);
  40059a:	bf 02 00 00 00       	mov    $0x2,%edi
  40059f:	e8 ac 04 00 00       	callq  400a50 <timer_read>
       t_percent = timecounter/t_total * 100.;
  4005a4:	66 0f 28 c8          	movapd %xmm0,%xmm1
       printf(" Sorting        : %8.3f (%5.2f%%)\n", timecounter, t_percent);
  4005a8:	48 8d 3d 61 58 00 00 	lea    0x5861(%rip),%rdi        # 405e10 <_fini+0x47d>
  4005af:	b8 02 00 00 00       	mov    $0x2,%eax
       t_percent = timecounter/t_total * 100.;
  4005b4:	f2 0f 5e 4c 24 08    	divsd  0x8(%rsp),%xmm1
       printf(" Sorting        : %8.3f (%5.2f%%)\n", timecounter, t_percent);
  4005ba:	f2 0f 59 0d 4e 59 00 	mulsd  0x594e(%rip),%xmm1        # 405f10 <_fini+0x57d>
  4005c1:	00 
  4005c2:	e8 6b 0e 00 00       	callq  401432 <printf>
  4005c7:	e9 99 fd ff ff       	jmpq   400365 <main+0x205>
    c_print_results( "IS",
  4005cc:	48 8d 05 e7 58 00 00 	lea    0x58e7(%rip),%rax        # 405eba <_fini+0x527>
                                                  /timecounter/1000000.,
  4005d3:	f2 0f 10 0d 3d 59 00 	movsd  0x593d(%rip),%xmm1        # 405f18 <_fini+0x585>
  4005da:	00 
    c_print_results( "IS",
  4005db:	50                   	push   %rax
  4005dc:	50                   	push   %rax
                                                  /timecounter/1000000.,
  4005dd:	f2 0f 5e c8          	divsd  %xmm0,%xmm1
    c_print_results( "IS",
  4005e1:	50                   	push   %rax
  4005e2:	50                   	push   %rax
  4005e3:	50                   	push   %rax
  4005e4:	50                   	push   %rax
  4005e5:	48 8d 05 d5 58 00 00 	lea    0x58d5(%rip),%rax        # 405ec1 <_fini+0x52e>
  4005ec:	50                   	push   %rax
  4005ed:	48 8d 05 d9 58 00 00 	lea    0x58d9(%rip),%rax        # 405ecd <_fini+0x53a>
  4005f4:	50                   	push   %rax
  4005f5:	6a 33                	pushq  $0x33
  4005f7:	e9 ba fe ff ff       	jmpq   4004b6 <main+0x356>

00000000004005fc <_start>:
  4005fc:	48 31 ed             	xor    %rbp,%rbp
  4005ff:	48 89 e7             	mov    %rsp,%rdi
  400602:	48 8d 35 f7 f9 bf ff 	lea    -0x400609(%rip),%rsi        # 0 <_init-0x400120>
  400609:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  40060d:	e8 00 00 00 00       	callq  400612 <_start_c>

0000000000400612 <_start_c>:
void _fini() __attribute__((weak));
_Noreturn int __libc_start_main(int (*)(), int, char **,
	void (*)(), void(*)(), void(*)());

void _start_c(long *p)
{
  400612:	48 83 ec 08          	sub    $0x8,%rsp
	int argc = p[0];
	char **argv = (void *)(p+1);
  400616:	48 8d 57 08          	lea    0x8(%rdi),%rdx
	int argc = p[0];
  40061a:	48 8b 37             	mov    (%rdi),%rsi
	__libc_start_main(main, argc, argv, _init, _fini, 0);
  40061d:	49 c7 c0 93 59 40 00 	mov    $0x405993,%r8
  400624:	48 c7 c1 20 01 40 00 	mov    $0x400120,%rcx
  40062b:	45 31 c9             	xor    %r9d,%r9d
  40062e:	48 c7 c7 60 01 40 00 	mov    $0x400160,%rdi
  400635:	e8 0a 0b 00 00       	callq  401144 <__libc_start_main>
  40063a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400640 <deregister_tm_clones>:
  400640:	b8 b7 72 60 00       	mov    $0x6072b7,%eax
  400645:	55                   	push   %rbp
  400646:	48 2d b0 72 60 00    	sub    $0x6072b0,%rax
  40064c:	48 83 f8 0e          	cmp    $0xe,%rax
  400650:	48 89 e5             	mov    %rsp,%rbp
  400653:	76 1b                	jbe    400670 <deregister_tm_clones+0x30>
  400655:	b8 00 00 00 00       	mov    $0x0,%eax
  40065a:	48 85 c0             	test   %rax,%rax
  40065d:	74 11                	je     400670 <deregister_tm_clones+0x30>
  40065f:	5d                   	pop    %rbp
  400660:	bf b0 72 60 00       	mov    $0x6072b0,%edi
  400665:	ff e0                	jmpq   *%rax
  400667:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40066e:	00 00 
  400670:	5d                   	pop    %rbp
  400671:	c3                   	retq   
  400672:	0f 1f 40 00          	nopl   0x0(%rax)
  400676:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40067d:	00 00 00 

0000000000400680 <register_tm_clones>:
  400680:	be b0 72 60 00       	mov    $0x6072b0,%esi
  400685:	55                   	push   %rbp
  400686:	48 81 ee b0 72 60 00 	sub    $0x6072b0,%rsi
  40068d:	48 c1 fe 03          	sar    $0x3,%rsi
  400691:	48 89 e5             	mov    %rsp,%rbp
  400694:	48 89 f0             	mov    %rsi,%rax
  400697:	48 c1 e8 3f          	shr    $0x3f,%rax
  40069b:	48 01 c6             	add    %rax,%rsi
  40069e:	48 d1 fe             	sar    %rsi
  4006a1:	74 15                	je     4006b8 <register_tm_clones+0x38>
  4006a3:	b8 00 00 00 00       	mov    $0x0,%eax
  4006a8:	48 85 c0             	test   %rax,%rax
  4006ab:	74 0b                	je     4006b8 <register_tm_clones+0x38>
  4006ad:	5d                   	pop    %rbp
  4006ae:	bf b0 72 60 00       	mov    $0x6072b0,%edi
  4006b3:	ff e0                	jmpq   *%rax
  4006b5:	0f 1f 00             	nopl   (%rax)
  4006b8:	5d                   	pop    %rbp
  4006b9:	c3                   	retq   
  4006ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004006c0 <__do_global_dtors_aux>:
  4006c0:	80 3d f9 6b 20 00 00 	cmpb   $0x0,0x206bf9(%rip)        # 6072c0 <completed.6972>
  4006c7:	75 11                	jne    4006da <__do_global_dtors_aux+0x1a>
  4006c9:	55                   	push   %rbp
  4006ca:	48 89 e5             	mov    %rsp,%rbp
  4006cd:	e8 6e ff ff ff       	callq  400640 <deregister_tm_clones>
  4006d2:	5d                   	pop    %rbp
  4006d3:	c6 05 e6 6b 20 00 01 	movb   $0x1,0x206be6(%rip)        # 6072c0 <completed.6972>
  4006da:	f3 c3                	repz retq 
  4006dc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004006e0 <frame_dummy>:
  4006e0:	bf f0 6f 60 00       	mov    $0x606ff0,%edi
  4006e5:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  4006e9:	75 05                	jne    4006f0 <frame_dummy+0x10>
  4006eb:	eb 93                	jmp    400680 <register_tm_clones>
  4006ed:	0f 1f 00             	nopl   (%rax)
  4006f0:	b8 00 00 00 00       	mov    $0x0,%eax
  4006f5:	48 85 c0             	test   %rax,%rax
  4006f8:	74 f1                	je     4006eb <frame_dummy+0xb>
  4006fa:	55                   	push   %rbp
  4006fb:	48 89 e5             	mov    %rsp,%rbp
  4006fe:	ff d0                	callq  *%rax
  400700:	5d                   	pop    %rbp
  400701:	e9 7a ff ff ff       	jmpq   400680 <register_tm_clones>
  400706:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40070d:	00 00 00 

0000000000400710 <c_print_results>:
                      char   *clink,
                      char   *c_lib,
                      char   *c_inc,
                      char   *cflags,
                      char   *clinkflags )
{
  400710:	41 57                	push   %r15
  400712:	41 56                	push   %r14
    printf( "\n\n %s Benchmark Completed\n", name ); 
  400714:	31 c0                	xor    %eax,%eax
{
  400716:	41 55                	push   %r13
  400718:	41 54                	push   %r12
  40071a:	45 89 cf             	mov    %r9d,%r15d
  40071d:	55                   	push   %rbp
  40071e:	53                   	push   %rbx
  40071f:	89 cb                	mov    %ecx,%ebx
  400721:	89 f5                	mov    %esi,%ebp
    printf( "\n\n %s Benchmark Completed\n", name ); 
  400723:	48 89 fe             	mov    %rdi,%rsi
  400726:	48 8d 3d 73 52 00 00 	lea    0x5273(%rip),%rdi        # 4059a0 <_fini+0xd>
{
  40072d:	48 83 ec 58          	sub    $0x58,%rsp
  400731:	48 8b 8c 24 a8 00 00 	mov    0xa8(%rsp),%rcx
  400738:	00 
  400739:	44 89 44 24 4c       	mov    %r8d,0x4c(%rsp)
  40073e:	f2 0f 11 04 24       	movsd  %xmm0,(%rsp)
  400743:	89 54 24 48          	mov    %edx,0x48(%rsp)
  400747:	f2 0f 11 4c 24 08    	movsd  %xmm1,0x8(%rsp)
  40074d:	4c 8b b4 24 90 00 00 	mov    0x90(%rsp),%r14
  400754:	00 
  400755:	44 8b ac 24 98 00 00 	mov    0x98(%rsp),%r13d
  40075c:	00 
  40075d:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  400762:	48 8b 8c 24 b0 00 00 	mov    0xb0(%rsp),%rcx
  400769:	00 
  40076a:	4c 8b a4 24 a0 00 00 	mov    0xa0(%rsp),%r12
  400771:	00 
  400772:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  400777:	48 8b 8c 24 b8 00 00 	mov    0xb8(%rsp),%rcx
  40077e:	00 
  40077f:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  400784:	48 8b 8c 24 c0 00 00 	mov    0xc0(%rsp),%rcx
  40078b:	00 
  40078c:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  400791:	48 8b 8c 24 c8 00 00 	mov    0xc8(%rsp),%rcx
  400798:	00 
  400799:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  40079e:	48 8b 8c 24 d0 00 00 	mov    0xd0(%rsp),%rcx
  4007a5:	00 
  4007a6:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  4007ab:	48 8b 8c 24 d8 00 00 	mov    0xd8(%rsp),%rcx
  4007b2:	00 
  4007b3:	48 89 4c 24 40       	mov    %rcx,0x40(%rsp)
    printf( "\n\n %s Benchmark Completed\n", name ); 
  4007b8:	e8 75 0c 00 00       	callq  401432 <printf>

    printf( " Class           =                        %c\n", class );
  4007bd:	48 8d 3d dc 52 00 00 	lea    0x52dc(%rip),%rdi        # 405aa0 <_fini+0x10d>
  4007c4:	31 c0                	xor    %eax,%eax
  4007c6:	40 0f be f5          	movsbl %bpl,%esi
  4007ca:	e8 63 0c 00 00       	callq  401432 <printf>

    if( n3 == 0 ) {
  4007cf:	44 8b 44 24 4c       	mov    0x4c(%rsp),%r8d
  4007d4:	45 85 c0             	test   %r8d,%r8d
  4007d7:	0f 85 ab 01 00 00    	jne    400988 <c_print_results+0x278>
        long nn = n1;
        if ( n2 != 0 ) nn *= n2;
  4007dd:	85 db                	test   %ebx,%ebx
        long nn = n1;
  4007df:	48 63 74 24 48       	movslq 0x48(%rsp),%rsi
        if ( n2 != 0 ) nn *= n2;
  4007e4:	0f 85 76 01 00 00    	jne    400960 <c_print_results+0x250>
        printf( " Size            =             %12ld\n", nn );   /* as in IS */
  4007ea:	48 8d 3d df 52 00 00 	lea    0x52df(%rip),%rdi        # 405ad0 <_fini+0x13d>
  4007f1:	31 c0                	xor    %eax,%eax
  4007f3:	e8 3a 0c 00 00       	callq  401432 <printf>
    }
    else
        printf( " Size            =             %4dx%4dx%4d\n", n1,n2,n3 );

    printf( " Iterations      =             %12d\n", niter );
  4007f8:	48 8d 3d 29 53 00 00 	lea    0x5329(%rip),%rdi        # 405b28 <_fini+0x195>
  4007ff:	44 89 fe             	mov    %r15d,%esi
  400802:	31 c0                	xor    %eax,%eax
  400804:	e8 29 0c 00 00       	callq  401432 <printf>
 
    printf( " Time in seconds =             %12.2f\n", t );
  400809:	f2 0f 10 04 24       	movsd  (%rsp),%xmm0
  40080e:	48 8d 3d 3b 53 00 00 	lea    0x533b(%rip),%rdi        # 405b50 <_fini+0x1bd>
  400815:	b8 01 00 00 00       	mov    $0x1,%eax
  40081a:	e8 13 0c 00 00       	callq  401432 <printf>

    printf( " Mop/s total     =             %12.2f\n", mops );
  40081f:	f2 0f 10 44 24 08    	movsd  0x8(%rsp),%xmm0
  400825:	48 8d 3d 4c 53 00 00 	lea    0x534c(%rip),%rdi        # 405b78 <_fini+0x1e5>
  40082c:	b8 01 00 00 00       	mov    $0x1,%eax
  400831:	e8 fc 0b 00 00       	callq  401432 <printf>

    printf( " Operation type  = %24s\n", optype);
  400836:	48 8d 3d 7e 51 00 00 	lea    0x517e(%rip),%rdi        # 4059bb <_fini+0x28>
  40083d:	31 c0                	xor    %eax,%eax
  40083f:	4c 89 f6             	mov    %r14,%rsi
  400842:	e8 eb 0b 00 00       	callq  401432 <printf>

    if( passed_verification < 0 )
  400847:	45 85 ed             	test   %r13d,%r13d
  40084a:	0f 88 58 01 00 00    	js     4009a8 <c_print_results+0x298>
        printf( " Verification    =            NOT PERFORMED\n" );
    else if( passed_verification )
  400850:	0f 85 1a 01 00 00    	jne    400970 <c_print_results+0x260>
        printf( " Verification    =               SUCCESSFUL\n" );
    else
        printf( " Verification    =             UNSUCCESSFUL\n" );
  400856:	48 8d 3d a3 53 00 00 	lea    0x53a3(%rip),%rdi        # 405c00 <_fini+0x26d>
  40085d:	e8 71 0c 00 00       	callq  4014d3 <puts>

    printf( " Version         =             %12s\n", npbversion );
  400862:	48 8d 3d c7 53 00 00 	lea    0x53c7(%rip),%rdi        # 405c30 <_fini+0x29d>
  400869:	4c 89 e6             	mov    %r12,%rsi
  40086c:	31 c0                	xor    %eax,%eax
  40086e:	e8 bf 0b 00 00       	callq  401432 <printf>

    printf( " Compile date    =             %12s\n", compiletime );
  400873:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  400878:	48 8d 3d d9 53 00 00 	lea    0x53d9(%rip),%rdi        # 405c58 <_fini+0x2c5>
  40087f:	31 c0                	xor    %eax,%eax
  400881:	e8 ac 0b 00 00       	callq  401432 <printf>

    printf( "\n Compile options:\n" );
  400886:	48 8d 3d 47 51 00 00 	lea    0x5147(%rip),%rdi        # 4059d4 <_fini+0x41>
  40088d:	e8 41 0c 00 00       	callq  4014d3 <puts>

    printf( "    CC           = %s\n", cc );
  400892:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
  400897:	48 8d 3d 49 51 00 00 	lea    0x5149(%rip),%rdi        # 4059e7 <_fini+0x54>
  40089e:	31 c0                	xor    %eax,%eax
  4008a0:	e8 8d 0b 00 00       	callq  401432 <printf>

    printf( "    CLINK        = %s\n", clink );
  4008a5:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  4008aa:	48 8d 3d 4d 51 00 00 	lea    0x514d(%rip),%rdi        # 4059fe <_fini+0x6b>
  4008b1:	31 c0                	xor    %eax,%eax
  4008b3:	e8 7a 0b 00 00       	callq  401432 <printf>

    printf( "    C_LIB        = %s\n", c_lib );
  4008b8:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  4008bd:	48 8d 3d 51 51 00 00 	lea    0x5151(%rip),%rdi        # 405a15 <_fini+0x82>
  4008c4:	31 c0                	xor    %eax,%eax
  4008c6:	e8 67 0b 00 00       	callq  401432 <printf>

    printf( "    C_INC        = %s\n", c_inc );
  4008cb:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  4008d0:	48 8d 3d 55 51 00 00 	lea    0x5155(%rip),%rdi        # 405a2c <_fini+0x99>
  4008d7:	31 c0                	xor    %eax,%eax
  4008d9:	e8 54 0b 00 00       	callq  401432 <printf>

    printf( "    CFLAGS       = %s\n", cflags );
  4008de:	48 8b 74 24 38       	mov    0x38(%rsp),%rsi
  4008e3:	48 8d 3d 59 51 00 00 	lea    0x5159(%rip),%rdi        # 405a43 <_fini+0xb0>
  4008ea:	31 c0                	xor    %eax,%eax
  4008ec:	e8 41 0b 00 00       	callq  401432 <printf>

    printf( "    CLINKFLAGS   = %s\n", clinkflags );
  4008f1:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  4008f6:	48 8d 3d 5d 51 00 00 	lea    0x515d(%rip),%rdi        # 405a5a <_fini+0xc7>
  4008fd:	31 c0                	xor    %eax,%eax
  4008ff:	e8 2e 0b 00 00       	callq  401432 <printf>
#ifdef SMP
    evalue = getenv("MP_SET_NUMTHREADS");
    printf( "   MULTICPUS = %s\n", evalue );
#endif

    printf( "\n--------------------------------------\n");
  400904:	48 8d 3d 75 53 00 00 	lea    0x5375(%rip),%rdi        # 405c80 <_fini+0x2ed>
  40090b:	e8 c3 0b 00 00       	callq  4014d3 <puts>
    printf( " Please send all errors/feedbacks to:\n");
  400910:	48 8d 3d 91 53 00 00 	lea    0x5391(%rip),%rdi        # 405ca8 <_fini+0x315>
  400917:	e8 b7 0b 00 00       	callq  4014d3 <puts>
    printf( " Center for Manycore Programming\n");
  40091c:	48 8d 3d ad 53 00 00 	lea    0x53ad(%rip),%rdi        # 405cd0 <_fini+0x33d>
  400923:	e8 ab 0b 00 00       	callq  4014d3 <puts>
    printf( " cmp@aces.snu.ac.kr\n");
  400928:	48 8d 3d 42 51 00 00 	lea    0x5142(%rip),%rdi        # 405a71 <_fini+0xde>
  40092f:	e8 9f 0b 00 00       	callq  4014d3 <puts>
    printf( " http://aces.snu.ac.kr\n");
  400934:	48 8d 3d 4a 51 00 00 	lea    0x514a(%rip),%rdi        # 405a85 <_fini+0xf2>
  40093b:	e8 93 0b 00 00       	callq  4014d3 <puts>
    printf( "--------------------------------------\n");
}
  400940:	48 83 c4 58          	add    $0x58,%rsp
    printf( "--------------------------------------\n");
  400944:	48 8d 3d ad 53 00 00 	lea    0x53ad(%rip),%rdi        # 405cf8 <_fini+0x365>
}
  40094b:	5b                   	pop    %rbx
  40094c:	5d                   	pop    %rbp
  40094d:	41 5c                	pop    %r12
  40094f:	41 5d                	pop    %r13
  400951:	41 5e                	pop    %r14
  400953:	41 5f                	pop    %r15
    printf( "--------------------------------------\n");
  400955:	e9 79 0b 00 00       	jmpq   4014d3 <puts>
  40095a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if ( n2 != 0 ) nn *= n2;
  400960:	48 63 d3             	movslq %ebx,%rdx
  400963:	48 0f af f2          	imul   %rdx,%rsi
  400967:	e9 7e fe ff ff       	jmpq   4007ea <c_print_results+0xda>
  40096c:	0f 1f 40 00          	nopl   0x0(%rax)
        printf( " Verification    =               SUCCESSFUL\n" );
  400970:	48 8d 3d 59 52 00 00 	lea    0x5259(%rip),%rdi        # 405bd0 <_fini+0x23d>
  400977:	e8 57 0b 00 00       	callq  4014d3 <puts>
  40097c:	e9 e1 fe ff ff       	jmpq   400862 <c_print_results+0x152>
  400981:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        printf( " Size            =             %4dx%4dx%4d\n", n1,n2,n3 );
  400988:	8b 74 24 48          	mov    0x48(%rsp),%esi
  40098c:	48 8d 3d 65 51 00 00 	lea    0x5165(%rip),%rdi        # 405af8 <_fini+0x165>
  400993:	44 89 c1             	mov    %r8d,%ecx
  400996:	89 da                	mov    %ebx,%edx
  400998:	31 c0                	xor    %eax,%eax
  40099a:	e8 93 0a 00 00       	callq  401432 <printf>
  40099f:	e9 54 fe ff ff       	jmpq   4007f8 <c_print_results+0xe8>
  4009a4:	0f 1f 40 00          	nopl   0x0(%rax)
        printf( " Verification    =            NOT PERFORMED\n" );
  4009a8:	48 8d 3d f1 51 00 00 	lea    0x51f1(%rip),%rdi        # 405ba0 <_fini+0x20d>
  4009af:	e8 1f 0b 00 00       	callq  4014d3 <puts>
  4009b4:	e9 a9 fe ff ff       	jmpq   400862 <c_print_results+0x152>
  4009b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000004009c0 <timer_clear>:
/*****************************************************************/
/******            T  I  M  E  R  _  C  L  E  A  R          ******/
/*****************************************************************/
void timer_clear( int n )
{
    elapsed[n] = 0.0;
  4009c0:	48 8d 05 19 69 20 00 	lea    0x206919(%rip),%rax        # 6072e0 <elapsed>
  4009c7:	48 63 ff             	movslq %edi,%rdi
  4009ca:	48 c7 04 f8 00 00 00 	movq   $0x0,(%rax,%rdi,8)
  4009d1:	00 
  4009d2:	c3                   	retq   
  4009d3:	0f 1f 00             	nopl   (%rax)
  4009d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4009dd:	00 00 00 

00000000004009e0 <timer_start>:

/*****************************************************************/
/******            T  I  M  E  R  _  S  T  A  R  T          ******/
/*****************************************************************/
void timer_start( int n )
{
  4009e0:	53                   	push   %rbx
  4009e1:	48 63 df             	movslq %edi,%rbx
  4009e4:	48 83 ec 10          	sub    $0x10,%rsp
    wtime( &t );
  4009e8:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4009ed:	e8 5e 05 00 00       	callq  400f50 <wtime_>
    start[n] = elapsed_time();
  4009f2:	f2 0f 10 44 24 08    	movsd  0x8(%rsp),%xmm0
  4009f8:	48 8d 05 e1 6a 20 00 	lea    0x206ae1(%rip),%rax        # 6074e0 <start>
  4009ff:	f2 0f 11 04 d8       	movsd  %xmm0,(%rax,%rbx,8)
}
  400a04:	48 83 c4 10          	add    $0x10,%rsp
  400a08:	5b                   	pop    %rbx
  400a09:	c3                   	retq   
  400a0a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400a10 <timer_stop>:

/*****************************************************************/
/******            T  I  M  E  R  _  S  T  O  P             ******/
/*****************************************************************/
void timer_stop( int n )
{
  400a10:	53                   	push   %rbx
  400a11:	89 fb                	mov    %edi,%ebx
  400a13:	48 83 ec 10          	sub    $0x10,%rsp
    wtime( &t );
  400a17:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  400a1c:	e8 2f 05 00 00       	callq  400f50 <wtime_>
    double t, now;

    now = elapsed_time();
    t = now - start[n];
  400a21:	f2 0f 10 44 24 08    	movsd  0x8(%rsp),%xmm0
  400a27:	48 8d 15 b2 6a 20 00 	lea    0x206ab2(%rip),%rdx        # 6074e0 <start>
    elapsed[n] += t;
  400a2e:	48 63 fb             	movslq %ebx,%rdi
  400a31:	48 8d 05 a8 68 20 00 	lea    0x2068a8(%rip),%rax        # 6072e0 <elapsed>
    t = now - start[n];
  400a38:	f2 0f 5c 04 fa       	subsd  (%rdx,%rdi,8),%xmm0
    elapsed[n] += t;
  400a3d:	f2 0f 58 04 f8       	addsd  (%rax,%rdi,8),%xmm0
  400a42:	f2 0f 11 04 f8       	movsd  %xmm0,(%rax,%rdi,8)

}
  400a47:	48 83 c4 10          	add    $0x10,%rsp
  400a4b:	5b                   	pop    %rbx
  400a4c:	c3                   	retq   
  400a4d:	0f 1f 00             	nopl   (%rax)

0000000000400a50 <timer_read>:
/*****************************************************************/
/******            T  I  M  E  R  _  R  E  A  D             ******/
/*****************************************************************/
double timer_read( int n )
{
    return( elapsed[n] );
  400a50:	48 8d 05 89 68 20 00 	lea    0x206889(%rip),%rax        # 6072e0 <elapsed>
  400a57:	48 63 ff             	movslq %edi,%rdi
  400a5a:	f2 0f 10 04 f8       	movsd  (%rax,%rdi,8),%xmm0
}
  400a5f:	c3                   	retq   

0000000000400a60 <randlc>:
      if (KS == 0) 
  400a60:	8b 05 9a 6c 20 00    	mov    0x206c9a(%rip),%eax        # 607700 <KS.2295>
  400a66:	85 c0                	test   %eax,%eax
  400a68:	0f 85 22 01 00 00    	jne    400b90 <randlc+0x130>
  400a6e:	f2 0f 10 15 6a 54 00 	movsd  0x546a(%rip),%xmm2        # 405ee0 <_fini+0x54d>
  400a75:	00 
  400a76:	b8 17 00 00 00       	mov    $0x17,%eax
  400a7b:	f2 0f 10 1d 65 54 00 	movsd  0x5465(%rip),%xmm3        # 405ee8 <_fini+0x555>
  400a82:	00 
  400a83:	66 0f 28 e2          	movapd %xmm2,%xmm4
  400a87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  400a8e:	00 00 
        for (i=1; i<=23; i++)
  400a90:	83 e8 01             	sub    $0x1,%eax
          R23 = 0.50 * R23;
  400a93:	f2 0f 59 e3          	mulsd  %xmm3,%xmm4
          T23 = 2.0 * T23;
  400a97:	f2 0f 58 d2          	addsd  %xmm2,%xmm2
        for (i=1; i<=23; i++)
  400a9b:	75 f3                	jne    400a90 <randlc+0x30>
  400a9d:	f2 0f 10 0d 3b 54 00 	movsd  0x543b(%rip),%xmm1        # 405ee0 <_fini+0x54d>
  400aa4:	00 
  400aa5:	b8 2e 00 00 00       	mov    $0x2e,%eax
  400aaa:	f2 0f 11 25 46 6c 20 	movsd  %xmm4,0x206c46(%rip)        # 6076f8 <R23.2296>
  400ab1:	00 
  400ab2:	f2 0f 11 15 2e 6c 20 	movsd  %xmm2,0x206c2e(%rip)        # 6076e8 <T23.2298>
  400ab9:	00 
  400aba:	66 0f 28 c1          	movapd %xmm1,%xmm0
  400abe:	66 90                	xchg   %ax,%ax
        for (i=1; i<=46; i++)
  400ac0:	83 e8 01             	sub    $0x1,%eax
          R46 = 0.50 * R46;
  400ac3:	f2 0f 59 c3          	mulsd  %xmm3,%xmm0
          T46 = 2.0 * T46;
  400ac7:	f2 0f 58 c9          	addsd  %xmm1,%xmm1
        for (i=1; i<=46; i++)
  400acb:	75 f3                	jne    400ac0 <randlc+0x60>
  400acd:	f2 0f 11 05 1b 6c 20 	movsd  %xmm0,0x206c1b(%rip)        # 6076f0 <R46.2297>
  400ad4:	00 
        KS = 1;
  400ad5:	c7 05 21 6c 20 00 01 	movl   $0x1,0x206c21(%rip)        # 607700 <KS.2295>
  400adc:	00 00 00 
  400adf:	f2 0f 11 0d f9 6b 20 	movsd  %xmm1,0x206bf9(%rip)        # 6076e0 <T46.2299>
  400ae6:	00 
      T1 = R23 * *A;
  400ae7:	f2 0f 10 36          	movsd  (%rsi),%xmm6
      A1 = j;
  400aeb:	66 0f ef ed          	pxor   %xmm5,%xmm5
      T1 = R23 * *A;
  400aef:	66 0f 28 de          	movapd %xmm6,%xmm3
      T1 = R23 * *X;
  400af3:	f2 0f 10 3f          	movsd  (%rdi),%xmm7
      T1 = R23 * *A;
  400af7:	f2 0f 59 dc          	mulsd  %xmm4,%xmm3
      j  = T1;
  400afb:	f2 0f 2c c3          	cvttsd2si %xmm3,%eax
      A1 = j;
  400aff:	f2 0f 2a e8          	cvtsi2sd %eax,%xmm5
      A2 = *A - T23 * A1;
  400b03:	66 0f 28 dd          	movapd %xmm5,%xmm3
  400b07:	f2 0f 59 da          	mulsd  %xmm2,%xmm3
  400b0b:	f2 0f 5c f3          	subsd  %xmm3,%xmm6
      T1 = R23 * *X;
  400b0f:	66 0f 28 df          	movapd %xmm7,%xmm3
  400b13:	f2 0f 59 dc          	mulsd  %xmm4,%xmm3
      j  = T1;
  400b17:	f2 0f 2c c3          	cvttsd2si %xmm3,%eax
      X1 = j;
  400b1b:	66 0f ef db          	pxor   %xmm3,%xmm3
  400b1f:	f2 0f 2a d8          	cvtsi2sd %eax,%xmm3
      X2 = *X - T23 * X1;
  400b23:	66 44 0f 28 c3       	movapd %xmm3,%xmm8
      T1 = A1 * X2 + A2 * X1;
  400b28:	f2 0f 59 de          	mulsd  %xmm6,%xmm3
      X2 = *X - T23 * X1;
  400b2c:	f2 44 0f 59 c2       	mulsd  %xmm2,%xmm8
  400b31:	f2 41 0f 5c f8       	subsd  %xmm8,%xmm7
      T1 = A1 * X2 + A2 * X1;
  400b36:	f2 0f 59 ef          	mulsd  %xmm7,%xmm5
      T3 = T23 * Z + A2 * X2;
  400b3a:	f2 0f 59 f7          	mulsd  %xmm7,%xmm6
      T1 = A1 * X2 + A2 * X1;
  400b3e:	f2 0f 58 eb          	addsd  %xmm3,%xmm5
      T2 = j;
  400b42:	66 0f ef db          	pxor   %xmm3,%xmm3
      j  = R23 * T1;
  400b46:	f2 0f 59 e5          	mulsd  %xmm5,%xmm4
  400b4a:	f2 0f 2c c4          	cvttsd2si %xmm4,%eax
      T2 = j;
  400b4e:	f2 0f 2a d8          	cvtsi2sd %eax,%xmm3
      Z = T1 - T23 * T2;
  400b52:	f2 0f 59 da          	mulsd  %xmm2,%xmm3
  400b56:	f2 0f 5c eb          	subsd  %xmm3,%xmm5
      T3 = T23 * Z + A2 * X2;
  400b5a:	f2 0f 59 d5          	mulsd  %xmm5,%xmm2
  400b5e:	f2 0f 58 d6          	addsd  %xmm6,%xmm2
      j  = R46 * T3;
  400b62:	66 0f 28 da          	movapd %xmm2,%xmm3
  400b66:	f2 0f 59 d8          	mulsd  %xmm0,%xmm3
  400b6a:	f2 0f 2c c3          	cvttsd2si %xmm3,%eax
      T4 = j;
  400b6e:	66 0f ef db          	pxor   %xmm3,%xmm3
  400b72:	f2 0f 2a d8          	cvtsi2sd %eax,%xmm3
      *X = T3 - T46 * T4;
  400b76:	f2 0f 59 cb          	mulsd  %xmm3,%xmm1
  400b7a:	f2 0f 5c d1          	subsd  %xmm1,%xmm2
  400b7e:	f2 0f 11 17          	movsd  %xmm2,(%rdi)
      return(R46 * *X);
  400b82:	f2 0f 59 c2          	mulsd  %xmm2,%xmm0
} 
  400b86:	c3                   	retq   
  400b87:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  400b8e:	00 00 
  400b90:	f2 0f 10 25 60 6b 20 	movsd  0x206b60(%rip),%xmm4        # 6076f8 <R23.2296>
  400b97:	00 
  400b98:	f2 0f 10 15 48 6b 20 	movsd  0x206b48(%rip),%xmm2        # 6076e8 <T23.2298>
  400b9f:	00 
  400ba0:	f2 0f 10 05 48 6b 20 	movsd  0x206b48(%rip),%xmm0        # 6076f0 <R46.2297>
  400ba7:	00 
  400ba8:	f2 0f 10 0d 30 6b 20 	movsd  0x206b30(%rip),%xmm1        # 6076e0 <T46.2299>
  400baf:	00 
  400bb0:	e9 32 ff ff ff       	jmpq   400ae7 <randlc+0x87>
  400bb5:	90                   	nop
  400bb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400bbd:	00 00 00 

0000000000400bc0 <create_seq>:
{
  400bc0:	48 8d 15 d9 77 20 00 	lea    0x2077d9(%rip),%rdx        # 6083a0 <key_array>
  400bc7:	48 83 ec 10          	sub    $0x10,%rsp
  400bcb:	f2 0f 11 44 24 08    	movsd  %xmm0,0x8(%rsp)
  400bd1:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
  400bd6:	49 89 e0             	mov    %rsp,%r8
  400bd9:	f2 0f 11 0c 24       	movsd  %xmm1,(%rsp)
  400bde:	4c 8d 8a 00 00 00 08 	lea    0x8000000(%rdx),%r9
  400be5:	f2 44 0f 10 15 02 53 	movsd  0x5302(%rip),%xmm10        # 405ef0 <_fini+0x55d>
  400bec:	00 00 
  400bee:	66 90                	xchg   %ax,%ax
	    x = randlc(&seed, &a);
  400bf0:	4c 89 c6             	mov    %r8,%rsi
  400bf3:	48 89 cf             	mov    %rcx,%rdi
  400bf6:	e8 65 fe ff ff       	callq  400a60 <randlc>
  400bfb:	66 44 0f 28 c8       	movapd %xmm0,%xmm9
	    x += randlc(&seed, &a);
  400c00:	4c 89 c6             	mov    %r8,%rsi
  400c03:	48 89 cf             	mov    %rcx,%rdi
  400c06:	e8 55 fe ff ff       	callq  400a60 <randlc>
  400c0b:	f2 44 0f 58 c8       	addsd  %xmm0,%xmm9
    	    x += randlc(&seed, &a);
  400c10:	4c 89 c6             	mov    %r8,%rsi
  400c13:	48 89 cf             	mov    %rcx,%rdi
  400c16:	e8 45 fe ff ff       	callq  400a60 <randlc>
	    x += randlc(&seed, &a);  
  400c1b:	4c 89 c6             	mov    %r8,%rsi
  400c1e:	48 89 cf             	mov    %rcx,%rdi
    	    x += randlc(&seed, &a);
  400c21:	f2 44 0f 58 c8       	addsd  %xmm0,%xmm9
	    x += randlc(&seed, &a);  
  400c26:	e8 35 fe ff ff       	callq  400a60 <randlc>
  400c2b:	48 83 c2 04          	add    $0x4,%rdx
  400c2f:	f2 44 0f 58 c8       	addsd  %xmm0,%xmm9
            key_array[i] = k*x;
  400c34:	f2 45 0f 59 ca       	mulsd  %xmm10,%xmm9
  400c39:	f2 41 0f 2c c1       	cvttsd2si %xmm9,%eax
  400c3e:	89 42 fc             	mov    %eax,-0x4(%rdx)
	for (i=0; i<NUM_KEYS; i++)
  400c41:	4c 39 ca             	cmp    %r9,%rdx
  400c44:	75 aa                	jne    400bf0 <create_seq+0x30>
}
  400c46:	48 83 c4 10          	add    $0x10,%rsp
  400c4a:	c3                   	retq   
  400c4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000400c50 <full_verify>:
{
  400c50:	48 8d 15 69 77 20 08 	lea    0x8207769(%rip),%rdx        # 86083c0 <key_buff2>
  400c57:	4c 8b 05 62 77 20 10 	mov    0x10207762(%rip),%r8        # 106083c0 <key_buff_ptr_global>
  400c5e:	48 8d 35 3b 77 20 00 	lea    0x20773b(%rip),%rsi        # 6083a0 <key_array>
  400c65:	48 8d ba 00 00 00 08 	lea    0x8000000(%rdx),%rdi
  400c6c:	0f 1f 40 00          	nopl   0x0(%rax)
        key_array[--key_buff_ptr_global[key_buff2[i]]] = key_buff2[i];
  400c70:	48 63 02             	movslq (%rdx),%rax
  400c73:	48 83 c2 04          	add    $0x4,%rdx
  400c77:	49 8d 0c 80          	lea    (%r8,%rax,4),%rcx
  400c7b:	8b 01                	mov    (%rcx),%eax
  400c7d:	83 e8 01             	sub    $0x1,%eax
  400c80:	89 01                	mov    %eax,(%rcx)
  400c82:	8b 4a fc             	mov    -0x4(%rdx),%ecx
  400c85:	48 98                	cltq   
    for( i=0; i<NUM_KEYS; i++ )
  400c87:	48 39 fa             	cmp    %rdi,%rdx
        key_array[--key_buff_ptr_global[key_buff2[i]]] = key_buff2[i];
  400c8a:	89 0c 86             	mov    %ecx,(%rsi,%rax,4)
    for( i=0; i<NUM_KEYS; i++ )
  400c8d:	75 e1                	jne    400c70 <full_verify+0x20>
  400c8f:	66 0f ef c9          	pxor   %xmm1,%xmm1
  400c93:	48 8d 05 06 77 20 00 	lea    0x207706(%rip),%rax        # 6083a0 <key_array>
  400c9a:	48 8d 96 f0 ff ff 07 	lea    0x7fffff0(%rsi),%rdx
  400ca1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if( key_array[i-1] > key_array[i] )
  400ca8:	f3 0f 6f 50 04       	movdqu 0x4(%rax),%xmm2
  400cad:	48 83 c0 10          	add    $0x10,%rax
  400cb1:	66 0f 6f 40 f0       	movdqa -0x10(%rax),%xmm0
  400cb6:	48 39 d0             	cmp    %rdx,%rax
  400cb9:	66 0f 66 c2          	pcmpgtd %xmm2,%xmm0
  400cbd:	66 0f fa c8          	psubd  %xmm0,%xmm1
  400cc1:	75 e5                	jne    400ca8 <full_verify+0x58>
  400cc3:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  400cc7:	8b be f4 ff ff 07    	mov    0x7fffff4(%rsi),%edi
  400ccd:	31 d2                	xor    %edx,%edx
  400ccf:	3b be f0 ff ff 07    	cmp    0x7fffff0(%rsi),%edi
  400cd5:	8b 8e f8 ff ff 07    	mov    0x7fffff8(%rsi),%ecx
  400cdb:	66 0f 73 d8 08       	psrldq $0x8,%xmm0
  400ce0:	66 0f fe c8          	paddd  %xmm0,%xmm1
  400ce4:	66 0f 6f c1          	movdqa %xmm1,%xmm0
  400ce8:	66 0f 73 d8 04       	psrldq $0x4,%xmm0
  400ced:	66 0f fe c8          	paddd  %xmm0,%xmm1
  400cf1:	66 0f 7e c8          	movd   %xmm1,%eax
  400cf5:	0f 9c c2             	setl   %dl
  400cf8:	01 c2                	add    %eax,%edx
  400cfa:	31 c0                	xor    %eax,%eax
  400cfc:	39 cf                	cmp    %ecx,%edi
  400cfe:	0f 9f c0             	setg   %al
  400d01:	01 d0                	add    %edx,%eax
  400d03:	31 d2                	xor    %edx,%edx
  400d05:	39 8e fc ff ff 07    	cmp    %ecx,0x7fffffc(%rsi)
  400d0b:	0f 9c c2             	setl   %dl
    if( j != 0 )
  400d0e:	01 d0                	add    %edx,%eax
  400d10:	75 08                	jne    400d1a <full_verify+0xca>
        passed_verification++;
  400d12:	83 05 cb 76 20 10 01 	addl   $0x1,0x102076cb(%rip)        # 106083e4 <passed_verification>
  400d19:	c3                   	retq   
        printf( "Full_verify: number of keys out of sort: %ld\n",
  400d1a:	48 8d 3d ff 4f 00 00 	lea    0x4fff(%rip),%rdi        # 405d20 <_fini+0x38d>
  400d21:	48 63 f0             	movslq %eax,%rsi
  400d24:	31 c0                	xor    %eax,%eax
  400d26:	e9 07 07 00 00       	jmpq   401432 <printf>
  400d2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000400d30 <rank>:
{
  400d30:	41 57                	push   %r15
    key_array[iteration] = iteration;
  400d32:	48 8d 35 67 76 20 00 	lea    0x207667(%rip),%rsi        # 6083a0 <key_array>
{
  400d39:	41 56                	push   %r14
  400d3b:	41 55                	push   %r13
  400d3d:	41 54                	push   %r12
  400d3f:	48 63 c7             	movslq %edi,%rax
  400d42:	55                   	push   %rbp
  400d43:	53                   	push   %rbx
  400d44:	48 89 c3             	mov    %rax,%rbx
    key_array[iteration+MAX_ITERATIONS] = MAX_KEY - iteration;
  400d47:	ba 00 00 20 00       	mov    $0x200000,%edx
  400d4c:	4c 8d 05 ad 76 20 10 	lea    0x102076ad(%rip),%r8        # 10608400 <bucket_size>
  400d53:	b9 00 02 00 00       	mov    $0x200,%ecx
{
  400d58:	48 83 ec 08          	sub    $0x8,%rsp
    key_array[iteration] = iteration;
  400d5c:	89 04 86             	mov    %eax,(%rsi,%rax,4)
    key_array[iteration+MAX_ITERATIONS] = MAX_KEY - iteration;
  400d5f:	8d 40 0a             	lea    0xa(%rax),%eax
  400d62:	29 da                	sub    %ebx,%edx
  400d64:	4c 89 c7             	mov    %r8,%rdi
  400d67:	48 98                	cltq   
  400d69:	89 14 86             	mov    %edx,(%rsi,%rax,4)
        partial_verify_vals[i] = key_array[test_index_array[i]];
  400d6c:	48 63 05 8d 96 a0 10 	movslq 0x10a0968d(%rip),%rax        # 10e0a400 <test_index_array>
  400d73:	48 89 f2             	mov    %rsi,%rdx
  400d76:	8b 04 86             	mov    (%rsi,%rax,4),%eax
  400d79:	89 05 21 76 20 08    	mov    %eax,0x8207621(%rip)        # 86083a0 <partial_verify_vals>
  400d7f:	48 63 05 7e 96 a0 10 	movslq 0x10a0967e(%rip),%rax        # 10e0a404 <test_index_array+0x4>
  400d86:	8b 04 86             	mov    (%rsi,%rax,4),%eax
  400d89:	89 05 15 76 20 08    	mov    %eax,0x8207615(%rip)        # 86083a4 <partial_verify_vals+0x4>
  400d8f:	48 63 05 72 96 a0 10 	movslq 0x10a09672(%rip),%rax        # 10e0a408 <test_index_array+0x8>
  400d96:	8b 04 86             	mov    (%rsi,%rax,4),%eax
  400d99:	89 05 09 76 20 08    	mov    %eax,0x8207609(%rip)        # 86083a8 <partial_verify_vals+0x8>
  400d9f:	48 63 05 66 96 a0 10 	movslq 0x10a09666(%rip),%rax        # 10e0a40c <test_index_array+0xc>
  400da6:	8b 04 86             	mov    (%rsi,%rax,4),%eax
  400da9:	89 05 fd 75 20 08    	mov    %eax,0x82075fd(%rip)        # 86083ac <partial_verify_vals+0xc>
  400daf:	48 63 05 5a 96 a0 10 	movslq 0x10a0965a(%rip),%rax        # 10e0a410 <test_index_array+0x10>
  400db6:	8b 04 86             	mov    (%rsi,%rax,4),%eax
  400db9:	89 05 f1 75 20 08    	mov    %eax,0x82075f1(%rip)        # 86083b0 <partial_verify_vals+0x10>
  400dbf:	31 c0                	xor    %eax,%eax
  400dc1:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  400dc4:	48 8d 8e 00 00 00 08 	lea    0x8000000(%rsi),%rcx
  400dcb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        bucket_size[key_array[i] >> shift]++;
  400dd0:	8b 02                	mov    (%rdx),%eax
  400dd2:	48 83 c2 04          	add    $0x4,%rdx
  400dd6:	c1 f8 0b             	sar    $0xb,%eax
  400dd9:	48 98                	cltq   
  400ddb:	41 83 04 80 01       	addl   $0x1,(%r8,%rax,4)
    for( i=0; i<NUM_KEYS; i++ )
  400de0:	48 39 d1             	cmp    %rdx,%rcx
  400de3:	75 eb                	jne    400dd0 <rank+0xa0>
  400de5:	48 8d 3d 18 86 20 10 	lea    0x10208618(%rip),%rdi        # 10609404 <bucket_ptrs+0x4>
    bucket_ptrs[0] = 0;
  400dec:	c7 05 0a 86 20 10 00 	movl   $0x0,0x1020860a(%rip)        # 10609400 <bucket_ptrs>
  400df3:	00 00 00 
  400df6:	31 c0                	xor    %eax,%eax
  400df8:	31 c9                	xor    %ecx,%ecx
  400dfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        bucket_ptrs[i] = bucket_ptrs[i-1] + bucket_size[i-1];
  400e00:	41 03 0c 00          	add    (%r8,%rax,1),%ecx
  400e04:	89 0c 07             	mov    %ecx,(%rdi,%rax,1)
  400e07:	48 83 c0 04          	add    $0x4,%rax
    for( i=1; i< NUM_BUCKETS; i++ )  
  400e0b:	48 3d fc 0f 00 00    	cmp    $0xffc,%rax
  400e11:	75 ed                	jne    400e00 <rank+0xd0>
  400e13:	4c 8d 05 e6 85 20 10 	lea    0x102085e6(%rip),%r8        # 10609400 <bucket_ptrs>
  400e1a:	48 8d 2d 9f 75 20 08 	lea    0x820759f(%rip),%rbp        # 86083c0 <key_buff2>
  400e21:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        key = key_array[i];
  400e28:	8b 3e                	mov    (%rsi),%edi
  400e2a:	48 83 c6 04          	add    $0x4,%rsi
        key_buff2[bucket_ptrs[key >> shift]++] = key;
  400e2e:	89 f9                	mov    %edi,%ecx
  400e30:	c1 f9 0b             	sar    $0xb,%ecx
    for( i=0; i<NUM_KEYS; i++ )  
  400e33:	48 39 f2             	cmp    %rsi,%rdx
        key_buff2[bucket_ptrs[key >> shift]++] = key;
  400e36:	48 63 c9             	movslq %ecx,%rcx
  400e39:	49 63 04 88          	movslq (%r8,%rcx,4),%rax
  400e3d:	44 8d 48 01          	lea    0x1(%rax),%r9d
  400e41:	89 7c 85 00          	mov    %edi,0x0(%rbp,%rax,4)
  400e45:	45 89 0c 88          	mov    %r9d,(%r8,%rcx,4)
    for( i=0; i<NUM_KEYS; i++ )  
  400e49:	75 dd                	jne    400e28 <rank+0xf8>
  400e4b:	48 8d 3d ae 95 20 10 	lea    0x102095ae(%rip),%rdi        # 1060a400 <key_buff1>
  400e52:	ba 00 00 80 00       	mov    $0x800000,%edx
  400e57:	31 f6                	xor    %esi,%esi
  400e59:	e8 0f 22 00 00       	callq  40306d <memset>
  400e5e:	48 8d 8d 00 00 00 08 	lea    0x8000000(%rbp),%rcx
  400e65:	48 8d 05 54 75 20 08 	lea    0x8207554(%rip),%rax        # 86083c0 <key_buff2>
  400e6c:	48 8d 2d 8d 95 20 10 	lea    0x1020958d(%rip),%rbp        # 1060a400 <key_buff1>
  400e73:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        key_buff_ptr[key_buff_ptr2[i]]++;  /* Now they have individual key   */
  400e78:	48 63 10             	movslq (%rax),%rdx
  400e7b:	48 83 c0 04          	add    $0x4,%rax
  400e7f:	83 44 95 00 01       	addl   $0x1,0x0(%rbp,%rdx,4)
    for( i=0; i<NUM_KEYS; i++ )
  400e84:	48 39 c1             	cmp    %rax,%rcx
  400e87:	75 ef                	jne    400e78 <rank+0x148>
  400e89:	8b 55 00             	mov    0x0(%rbp),%edx
  400e8c:	48 8d 05 71 95 20 10 	lea    0x10209571(%rip),%rax        # 1060a404 <key_buff1+0x4>
  400e93:	48 8d 0d 66 95 a0 10 	lea    0x10a09566(%rip),%rcx        # 10e0a400 <test_index_array>
  400e9a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        key_buff_ptr[i+1] += key_buff_ptr[i];  
  400ea0:	03 10                	add    (%rax),%edx
  400ea2:	48 83 c0 04          	add    $0x4,%rax
  400ea6:	89 50 fc             	mov    %edx,-0x4(%rax)
    for( i=0; i<MAX_KEY-1; i++ )   
  400ea9:	48 39 c8             	cmp    %rcx,%rax
  400eac:	75 f2                	jne    400ea0 <rank+0x170>
  400eae:	4c 8d 35 eb 74 20 08 	lea    0x82074eb(%rip),%r14        # 86083a0 <partial_verify_vals>
                        if( key_rank != test_rank_array[i]+iteration )
  400eb5:	4c 8d 3d 14 75 20 10 	lea    0x10207514(%rip),%r15        # 106083d0 <test_rank_array>
  400ebc:	45 31 ed             	xor    %r13d,%r13d
  400ebf:	45 31 e4             	xor    %r12d,%r12d
        k = partial_verify_vals[i];          /* test vals were put here */
  400ec2:	4b 63 04 2e          	movslq (%r14,%r13,1),%rax
        if( 0 < k  &&  k <= NUM_KEYS-1 )
  400ec6:	8d 50 ff             	lea    -0x1(%rax),%edx
  400ec9:	81 fa fe ff ff 01    	cmp    $0x1fffffe,%edx
  400ecf:	77 37                	ja     400f08 <rank+0x1d8>
            INT_TYPE key_rank = key_buff_ptr[k-1];
  400ed1:	48 8d 35 24 95 20 10 	lea    0x10209524(%rip),%rsi        # 1060a3fc <bucket_ptrs+0xffc>
  400ed8:	8b 14 86             	mov    (%rsi,%rax,4),%edx
                    if( i == 1 || i == 2 || i == 4 )
  400edb:	41 8d 44 24 ff       	lea    -0x1(%r12),%eax
  400ee0:	83 f8 01             	cmp    $0x1,%eax
  400ee3:	76 53                	jbe    400f38 <rank+0x208>
  400ee5:	41 83 fc 04          	cmp    $0x4,%r12d
  400ee9:	74 4d                	je     400f38 <rank+0x208>
                        if( key_rank != test_rank_array[i]-iteration )
  400eeb:	43 8b 04 2f          	mov    (%r15,%r13,1),%eax
  400eef:	29 d8                	sub    %ebx,%eax
  400ef1:	39 c2                	cmp    %eax,%edx
  400ef3:	74 4d                	je     400f42 <rank+0x212>
                printf( "Failed partial verification: "
  400ef5:	48 8d 3d 54 4e 00 00 	lea    0x4e54(%rip),%rdi        # 405d50 <_fini+0x3bd>
  400efc:	44 89 e2             	mov    %r12d,%edx
  400eff:	89 de                	mov    %ebx,%esi
  400f01:	31 c0                	xor    %eax,%eax
  400f03:	e8 2a 05 00 00       	callq  401432 <printf>
    for( i=0; i<TEST_ARRAY_SIZE; i++ )
  400f08:	41 83 c4 01          	add    $0x1,%r12d
  400f0c:	49 83 c5 04          	add    $0x4,%r13
  400f10:	41 83 fc 05          	cmp    $0x5,%r12d
  400f14:	75 ac                	jne    400ec2 <rank+0x192>
    if( iteration == MAX_ITERATIONS ) 
  400f16:	83 fb 0a             	cmp    $0xa,%ebx
  400f19:	75 07                	jne    400f22 <rank+0x1f2>
        key_buff_ptr_global = key_buff_ptr;
  400f1b:	48 89 2d 9e 74 20 10 	mov    %rbp,0x1020749e(%rip)        # 106083c0 <key_buff_ptr_global>
}      
  400f22:	48 83 c4 08          	add    $0x8,%rsp
  400f26:	5b                   	pop    %rbx
  400f27:	5d                   	pop    %rbp
  400f28:	41 5c                	pop    %r12
  400f2a:	41 5d                	pop    %r13
  400f2c:	41 5e                	pop    %r14
  400f2e:	41 5f                	pop    %r15
  400f30:	c3                   	retq   
  400f31:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                        if( key_rank != test_rank_array[i]+iteration )
  400f38:	43 8b 04 2f          	mov    (%r15,%r13,1),%eax
  400f3c:	01 d8                	add    %ebx,%eax
  400f3e:	39 c2                	cmp    %eax,%edx
  400f40:	75 b3                	jne    400ef5 <rank+0x1c5>
                            passed_verification++;
  400f42:	83 05 9b 74 20 10 01 	addl   $0x1,0x1020749b(%rip)        # 106083e4 <passed_verification>
  400f49:	eb bd                	jmp    400f08 <rank+0x1d8>
  400f4b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000400f50 <wtime_>:
#ifndef DOS
#include <sys/time.h>
#endif

void wtime(double *t)
{
  400f50:	53                   	push   %rbx
  static int sec = -1;
  struct timeval tv;
  gettimeofday(&tv, (void *)0);
  400f51:	31 f6                	xor    %esi,%esi
{
  400f53:	48 89 fb             	mov    %rdi,%rbx
  400f56:	48 83 ec 10          	sub    $0x10,%rsp
  gettimeofday(&tv, (void *)0);
  400f5a:	48 89 e7             	mov    %rsp,%rdi
  400f5d:	e8 c3 22 00 00       	callq  403225 <gettimeofday>
  if (sec < 0) sec = tv.tv_sec;
  400f62:	48 63 15 3b 62 20 00 	movslq 0x20623b(%rip),%rdx        # 6071a4 <sec.1939>
  400f69:	48 8b 04 24          	mov    (%rsp),%rax
  400f6d:	85 d2                	test   %edx,%edx
  400f6f:	79 09                	jns    400f7a <wtime_+0x2a>
  400f71:	48 63 d0             	movslq %eax,%rdx
  400f74:	89 05 2a 62 20 00    	mov    %eax,0x20622a(%rip)        # 6071a4 <sec.1939>
  *t = (tv.tv_sec - sec) + 1.0e-6*tv.tv_usec;
  400f7a:	66 0f ef c0          	pxor   %xmm0,%xmm0
  400f7e:	48 29 d0             	sub    %rdx,%rax
  400f81:	f2 0f 10 0d 9f 4f 00 	movsd  0x4f9f(%rip),%xmm1        # 405f28 <_fini+0x595>
  400f88:	00 
  400f89:	f2 48 0f 2a 44 24 08 	cvtsi2sdq 0x8(%rsp),%xmm0
  400f90:	f2 0f 59 c8          	mulsd  %xmm0,%xmm1
  400f94:	66 0f ef c0          	pxor   %xmm0,%xmm0
  400f98:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
  400f9d:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
  400fa1:	f2 0f 11 03          	movsd  %xmm0,(%rbx)
}
  400fa5:	48 83 c4 10          	add    $0x10,%rsp
  400fa9:	5b                   	pop    %rbx
  400faa:	c3                   	retq   

0000000000400fab <dummy>:
#include "atomic.h"
#include "libc.h"

void __init_tls(size_t *);

static void dummy(void) {}
  400fab:	c3                   	retq   

0000000000400fac <__init_ssp>:
weak_alias(dummy, _init);

__attribute__((__weak__, __visibility__("hidden")))
extern void (*const __init_array_start)(void), (*const __init_array_end)(void);

static void dummy1(void *p) {}
  400fac:	c3                   	retq   

0000000000400fad <__init_libc>:
weak_alias(dummy1, __init_ssp);

#define AUX_CNT 38

void __init_libc(char **envp, char *pn)
{
  400fad:	53                   	push   %rbx
  400fae:	48 89 fa             	mov    %rdi,%rdx
	size_t i, *auxv, aux[AUX_CNT] = { 0 };
  400fb1:	31 c0                	xor    %eax,%eax
  400fb3:	b9 4c 00 00 00       	mov    $0x4c,%ecx
{
  400fb8:	48 81 ec 50 01 00 00 	sub    $0x150,%rsp
	size_t i, *auxv, aux[AUX_CNT] = { 0 };
  400fbf:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  400fc4:	f3 ab                	rep stos %eax,%es:(%rdi)
	__environ = envp;
  400fc6:	48 c7 c0 48 7b 60 00 	mov    $0x607b48,%rax
  400fcd:	48 89 10             	mov    %rdx,(%rax)
	for (i=0; envp[i]; i++);
  400fd0:	31 c0                	xor    %eax,%eax
  400fd2:	48 83 3c c2 00       	cmpq   $0x0,(%rdx,%rax,8)
  400fd7:	48 8d 40 01          	lea    0x1(%rax),%rax
  400fdb:	75 f5                	jne    400fd2 <__init_libc+0x25>
	libc.auxv = auxv = (void *)(envp+i+1);
  400fdd:	48 8d 04 c2          	lea    (%rdx,%rax,8),%rax
  400fe1:	48 89 05 68 94 a0 10 	mov    %rax,0x10a09468(%rip)        # 10e0a450 <__libc+0x10>
	for (i=0; auxv[i]; i+=2) if (auxv[i]<AUX_CNT) aux[auxv[i]] = auxv[i+1];
  400fe8:	48 8b 18             	mov    (%rax),%rbx
  400feb:	48 85 db             	test   %rbx,%rbx
  400fee:	74 15                	je     401005 <__init_libc+0x58>
  400ff0:	48 83 fb 25          	cmp    $0x25,%rbx
  400ff4:	77 09                	ja     400fff <__init_libc+0x52>
  400ff6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  400ffa:	48 89 54 dc 20       	mov    %rdx,0x20(%rsp,%rbx,8)
  400fff:	48 83 c0 10          	add    $0x10,%rax
  401003:	eb e3                	jmp    400fe8 <__init_libc+0x3b>
	__hwcap = aux[AT_HWCAP];
  401005:	48 8b 84 24 a0 00 00 	mov    0xa0(%rsp),%rax
  40100c:	00 
	__sysinfo = aux[AT_SYSINFO];
	libc.page_size = aux[AT_PAGESZ];

	if (!pn) pn = (void*)aux[AT_EXECFN];
  40100d:	48 85 f6             	test   %rsi,%rsi
	__hwcap = aux[AT_HWCAP];
  401010:	48 89 05 09 94 a0 10 	mov    %rax,0x10a09409(%rip)        # 10e0a420 <__hwcap>
	__sysinfo = aux[AT_SYSINFO];
  401017:	48 8b 84 24 20 01 00 	mov    0x120(%rsp),%rax
  40101e:	00 
  40101f:	48 89 05 8a 94 a0 10 	mov    %rax,0x10a0948a(%rip)        # 10e0a4b0 <__sysinfo>
	libc.page_size = aux[AT_PAGESZ];
  401026:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  40102b:	48 89 05 46 94 a0 10 	mov    %rax,0x10a09446(%rip)        # 10e0a478 <__libc+0x38>
	if (!pn) pn = (void*)aux[AT_EXECFN];
  401032:	75 16                	jne    40104a <__init_libc+0x9d>
  401034:	48 8b b4 24 18 01 00 	mov    0x118(%rsp),%rsi
  40103b:	00 
	if (!pn) pn = "";
  40103c:	48 8d 05 18 4e 00 00 	lea    0x4e18(%rip),%rax        # 405e5b <_fini+0x4c8>
  401043:	48 85 f6             	test   %rsi,%rsi
  401046:	48 0f 44 f0          	cmove  %rax,%rsi
	__progname = __progname_full = pn;
  40104a:	48 c7 c0 08 77 60 00 	mov    $0x607708,%rax
  401051:	48 c7 c2 10 77 60 00 	mov    $0x607710,%rdx
  401058:	48 89 30             	mov    %rsi,(%rax)
	for (i=0; pn[i]; i++) if (pn[i]=='/') __progname = pn+i+1;
  40105b:	48 89 32             	mov    %rsi,(%rdx)
  40105e:	48 ff c6             	inc    %rsi
  401061:	8a 46 ff             	mov    -0x1(%rsi),%al
  401064:	84 c0                	test   %al,%al
  401066:	74 06                	je     40106e <__init_libc+0xc1>
  401068:	3c 2f                	cmp    $0x2f,%al
  40106a:	75 f2                	jne    40105e <__init_libc+0xb1>
  40106c:	eb ed                	jmp    40105b <__init_libc+0xae>

	__init_tls(aux);
  40106e:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
  401073:	e8 b3 22 00 00       	callq  40332b <__init_tls>
	__init_ssp((void *)aux[AT_RANDOM]);
  401078:	48 8b bc 24 e8 00 00 	mov    0xe8(%rsp),%rdi
  40107f:	00 
  401080:	e8 27 ff ff ff       	callq  400fac <__init_ssp>

	if (aux[AT_UID]==aux[AT_EUID] && aux[AT_GID]==aux[AT_EGID]
  401085:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40108c:	00 
  40108d:	48 39 44 24 78       	cmp    %rax,0x78(%rsp)
  401092:	75 1d                	jne    4010b1 <__init_libc+0x104>
  401094:	48 8b 84 24 90 00 00 	mov    0x90(%rsp),%rax
  40109b:	00 
  40109c:	48 39 84 24 88 00 00 	cmp    %rax,0x88(%rsp)
  4010a3:	00 
  4010a4:	75 0b                	jne    4010b1 <__init_libc+0x104>
		&& !aux[AT_SECURE]) return;
  4010a6:	48 83 bc 24 d8 00 00 	cmpq   $0x0,0xd8(%rsp)
  4010ad:	00 00 
  4010af:	74 6a                	je     40111b <__init_libc+0x16e>

	struct pollfd pfd[3] = { {.fd=0}, {.fd=1}, {.fd=2} };
  4010b1:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
  4010b6:	ba 06 00 00 00       	mov    $0x6,%edx
  4010bb:	31 c0                	xor    %eax,%eax
  4010bd:	48 89 d1             	mov    %rdx,%rcx
#ifdef SYS_poll
	__syscall(SYS_poll, pfd, 3, 0);
  4010c0:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
}

static __inline long __syscall3(long n, long a1, long a2, long a3)
{
	unsigned long ret;
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4010c5:	be 03 00 00 00       	mov    $0x3,%esi
	struct pollfd pfd[3] = { {.fd=0}, {.fd=1}, {.fd=2} };
  4010ca:	f3 ab                	rep stos %eax,%es:(%rdi)
  4010cc:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%rsp)
  4010d3:	00 
  4010d4:	c7 44 24 18 02 00 00 	movl   $0x2,0x18(%rsp)
  4010db:	00 
  4010dc:	b8 07 00 00 00       	mov    $0x7,%eax
  4010e1:	4c 89 c7             	mov    %r8,%rdi
  4010e4:	48 89 ca             	mov    %rcx,%rdx
  4010e7:	0f 05                	syscall 
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  4010e9:	48 8d 3d 40 4e 00 00 	lea    0x4e40(%rip),%rdi        # 405f30 <_fini+0x59d>
  4010f0:	be 02 00 00 00       	mov    $0x2,%esi
#else
	__syscall(SYS_ppoll, pfd, 3, &(struct timespec){0}, 0, _NSIG/8);
#endif
	for (i=0; i<3; i++) if (pfd[i].revents&POLLNVAL)
  4010f5:	41 f6 44 d8 06 20    	testb  $0x20,0x6(%r8,%rbx,8)
  4010fb:	74 0b                	je     401108 <__init_libc+0x15b>
  4010fd:	48 89 f0             	mov    %rsi,%rax
  401100:	0f 05                	syscall 
		if (__sys_open("/dev/null", O_RDWR)<0)
  401102:	48 85 c0             	test   %rax,%rax
  401105:	79 01                	jns    401108 <__init_libc+0x15b>
}

#define a_crash a_crash
static inline void a_crash()
{
	__asm__ __volatile__( "hlt" : : : "memory" );
  401107:	f4                   	hlt    
	for (i=0; i<3; i++) if (pfd[i].revents&POLLNVAL)
  401108:	48 ff c3             	inc    %rbx
  40110b:	48 83 fb 03          	cmp    $0x3,%rbx
  40110f:	75 e4                	jne    4010f5 <__init_libc+0x148>
			a_crash();
	libc.secure = 1;
  401111:	c7 05 2d 93 a0 10 01 	movl   $0x1,0x10a0932d(%rip)        # 10e0a448 <__libc+0x8>
  401118:	00 00 00 
}
  40111b:	48 81 c4 50 01 00 00 	add    $0x150,%rsp
  401122:	5b                   	pop    %rbx
  401123:	c3                   	retq   

0000000000401124 <__libc_start_init>:

static void libc_start_init(void)
{
  401124:	53                   	push   %rbx
	_init();
  401125:	e8 f6 ef ff ff       	callq  400120 <_init>
	uintptr_t a = (uintptr_t)&__init_array_start;
  40112a:	48 c7 c3 e0 6f 60 00 	mov    $0x606fe0,%rbx
	for (; a<(uintptr_t)&__init_array_end; a+=sizeof(void(*)()))
  401131:	48 81 fb e8 6f 60 00 	cmp    $0x606fe8,%rbx
  401138:	73 08                	jae    401142 <__libc_start_init+0x1e>
		(*(void (**)(void))a)();
  40113a:	ff 13                	callq  *(%rbx)
	for (; a<(uintptr_t)&__init_array_end; a+=sizeof(void(*)()))
  40113c:	48 83 c3 08          	add    $0x8,%rbx
  401140:	eb ef                	jmp    401131 <__libc_start_init+0xd>
}
  401142:	5b                   	pop    %rbx
  401143:	c3                   	retq   

0000000000401144 <__libc_start_main>:

weak_alias(libc_start_init, __libc_start_init);

int __libc_start_main(int (*main)(int,char **,char **), int argc, char **argv)
{
  401144:	41 55                	push   %r13
  401146:	41 54                	push   %r12
  401148:	48 63 c6             	movslq %esi,%rax
  40114b:	55                   	push   %rbp
  40114c:	53                   	push   %rbx
	char **envp = argv+argc+1;
  40114d:	4c 8d 64 c2 08       	lea    0x8(%rdx,%rax,8),%r12
{
  401152:	48 89 c5             	mov    %rax,%rbp
  401155:	48 89 d3             	mov    %rdx,%rbx
  401158:	49 89 fd             	mov    %rdi,%r13
  40115b:	48 83 ec 08          	sub    $0x8,%rsp

	__init_libc(envp, argv[0]);
  40115f:	48 8b 32             	mov    (%rdx),%rsi
  401162:	4c 89 e7             	mov    %r12,%rdi
  401165:	e8 43 fe ff ff       	callq  400fad <__init_libc>
	__libc_start_init();
  40116a:	e8 b5 ff ff ff       	callq  401124 <__libc_start_init>

	/* Pass control to the application */
	exit(main(argc, argv, envp));
  40116f:	89 ef                	mov    %ebp,%edi
  401171:	4c 89 e2             	mov    %r12,%rdx
  401174:	48 89 de             	mov    %rbx,%rsi
  401177:	41 ff d5             	callq  *%r13
  40117a:	89 c7                	mov    %eax,%edi
  40117c:	e8 af ef ff ff       	callq  400130 <exit>

0000000000401181 <__funcs_on_exit>:
{
  401181:	c3                   	retq   

0000000000401182 <__libc_exit_fini>:
{
  401182:	53                   	push   %rbx
	uintptr_t a = (uintptr_t)&__fini_array_end;
  401183:	48 c7 c3 f0 6f 60 00 	mov    $0x606ff0,%rbx
	for (; a>(uintptr_t)&__fini_array_start; a-=sizeof(void(*)()))
  40118a:	48 81 fb e8 6f 60 00 	cmp    $0x606fe8,%rbx
  401191:	76 0a                	jbe    40119d <__libc_exit_fini+0x1b>
		(*(void (**)())(a-sizeof(void(*)())))();
  401193:	48 83 eb 08          	sub    $0x8,%rbx
  401197:	31 c0                	xor    %eax,%eax
  401199:	ff 13                	callq  *(%rbx)
  40119b:	eb ed                	jmp    40118a <__libc_exit_fini+0x8>
}
  40119d:	5b                   	pop    %rbx
	_fini();
  40119e:	31 c0                	xor    %eax,%eax
  4011a0:	e9 ee 47 00 00       	jmpq   405993 <_fini>

00000000004011a5 <__unlist_locked_file>:
#include "stdio_impl.h"
#include "libc.h"

static void dummy(FILE *f) { }
  4011a5:	c3                   	retq   

00000000004011a6 <fclose>:
weak_alias(dummy, __unlist_locked_file);

int fclose(FILE *f)
{
  4011a6:	41 55                	push   %r13
  4011a8:	41 54                	push   %r12
  4011aa:	45 31 ed             	xor    %r13d,%r13d
  4011ad:	55                   	push   %rbp
  4011ae:	53                   	push   %rbx
  4011af:	48 89 fb             	mov    %rdi,%rbx
  4011b2:	48 83 ec 08          	sub    $0x8,%rsp
	int r;
	int perm;
	
	FLOCK(f);
  4011b6:	8b 87 8c 00 00 00    	mov    0x8c(%rdi),%eax
  4011bc:	85 c0                	test   %eax,%eax
  4011be:	78 08                	js     4011c8 <fclose+0x22>
  4011c0:	e8 d2 3a 00 00       	callq  404c97 <__lockfile>
  4011c5:	41 89 c5             	mov    %eax,%r13d

	__unlist_locked_file(f);
  4011c8:	48 89 df             	mov    %rbx,%rdi
  4011cb:	e8 d5 ff ff ff       	callq  4011a5 <__unlist_locked_file>

	if (!(perm = f->flags & F_PERM)) {
  4011d0:	8b 2b                	mov    (%rbx),%ebp
  4011d2:	83 e5 01             	and    $0x1,%ebp
  4011d5:	75 30                	jne    401207 <fclose+0x61>
		FILE **head = __ofl_lock();
  4011d7:	e8 31 02 00 00       	callq  40140d <__ofl_lock>
		if (f->prev) f->prev->next = f->next;
  4011dc:	48 8b 4b 68          	mov    0x68(%rbx),%rcx
  4011e0:	48 85 c9             	test   %rcx,%rcx
  4011e3:	74 08                	je     4011ed <fclose+0x47>
  4011e5:	48 8b 53 70          	mov    0x70(%rbx),%rdx
  4011e9:	48 89 51 70          	mov    %rdx,0x70(%rcx)
		if (f->next) f->next->prev = f->prev;
  4011ed:	48 8b 53 70          	mov    0x70(%rbx),%rdx
  4011f1:	48 85 d2             	test   %rdx,%rdx
  4011f4:	74 04                	je     4011fa <fclose+0x54>
  4011f6:	48 89 4a 68          	mov    %rcx,0x68(%rdx)
		if (*head == f) *head = f->next;
  4011fa:	48 3b 18             	cmp    (%rax),%rbx
  4011fd:	75 03                	jne    401202 <fclose+0x5c>
  4011ff:	48 89 10             	mov    %rdx,(%rax)
		__ofl_unlock();
  401202:	e8 1f 02 00 00       	callq  401426 <__ofl_unlock>
	}

	r = fflush(f);
  401207:	48 89 df             	mov    %rbx,%rdi
  40120a:	e8 43 00 00 00       	callq  401252 <fflush>
	r |= f->close(f);
  40120f:	48 89 df             	mov    %rbx,%rdi
	r = fflush(f);
  401212:	41 89 c4             	mov    %eax,%r12d
	r |= f->close(f);
  401215:	ff 53 18             	callq  *0x18(%rbx)

	if (f->getln_buf) free(f->getln_buf);
  401218:	48 8b bb a8 00 00 00 	mov    0xa8(%rbx),%rdi
	r |= f->close(f);
  40121f:	41 09 c4             	or     %eax,%r12d
	if (f->getln_buf) free(f->getln_buf);
  401222:	48 85 ff             	test   %rdi,%rdi
  401225:	74 05                	je     40122c <fclose+0x86>
  401227:	e8 b4 28 00 00       	callq  403ae0 <free>
	if (!perm) free(f);
  40122c:	85 ed                	test   %ebp,%ebp
  40122e:	75 0a                	jne    40123a <fclose+0x94>
  401230:	48 89 df             	mov    %rbx,%rdi
  401233:	e8 a8 28 00 00       	callq  403ae0 <free>
  401238:	eb 0d                	jmp    401247 <fclose+0xa1>
	else FUNLOCK(f);
  40123a:	45 85 ed             	test   %r13d,%r13d
  40123d:	74 08                	je     401247 <fclose+0xa1>
  40123f:	48 89 df             	mov    %rbx,%rdi
  401242:	e8 a4 3a 00 00       	callq  404ceb <__unlockfile>

	return r;
}
  401247:	5a                   	pop    %rdx
  401248:	44 89 e0             	mov    %r12d,%eax
  40124b:	5b                   	pop    %rbx
  40124c:	5d                   	pop    %rbp
  40124d:	41 5c                	pop    %r12
  40124f:	41 5d                	pop    %r13
  401251:	c3                   	retq   

0000000000401252 <fflush>:
static FILE *volatile dummy = 0;
weak_alias(dummy, __stdout_used);

int fflush(FILE *f)
{
	if (!f) {
  401252:	48 85 ff             	test   %rdi,%rdi
{
  401255:	41 54                	push   %r12
  401257:	55                   	push   %rbp
  401258:	53                   	push   %rbx
	if (!f) {
  401259:	75 71                	jne    4012cc <fflush+0x7a>
		int r = __stdout_used ? fflush(__stdout_used) : 0;
  40125b:	48 c7 c0 a8 71 60 00 	mov    $0x6071a8,%rax
  401262:	31 ed                	xor    %ebp,%ebp
  401264:	48 8b 10             	mov    (%rax),%rdx
  401267:	48 85 d2             	test   %rdx,%rdx
  40126a:	74 0a                	je     401276 <fflush+0x24>
  40126c:	48 8b 38             	mov    (%rax),%rdi
  40126f:	e8 de ff ff ff       	callq  401252 <fflush>
  401274:	89 c5                	mov    %eax,%ebp

		for (f=*__ofl_lock(); f; f=f->next) {
  401276:	e8 92 01 00 00       	callq  40140d <__ofl_lock>
  40127b:	48 8b 18             	mov    (%rax),%rbx
  40127e:	48 85 db             	test   %rbx,%rbx
  401281:	74 3f                	je     4012c2 <fflush+0x70>
			FLOCK(f);
  401283:	8b 83 8c 00 00 00    	mov    0x8c(%rbx),%eax
  401289:	45 31 e4             	xor    %r12d,%r12d
  40128c:	85 c0                	test   %eax,%eax
  40128e:	78 0b                	js     40129b <fflush+0x49>
  401290:	48 89 df             	mov    %rbx,%rdi
  401293:	e8 ff 39 00 00       	callq  404c97 <__lockfile>
  401298:	41 89 c4             	mov    %eax,%r12d
			if (f->wpos > f->wbase) r |= fflush(f);
  40129b:	48 8b 43 38          	mov    0x38(%rbx),%rax
  40129f:	48 39 43 28          	cmp    %rax,0x28(%rbx)
  4012a3:	76 0a                	jbe    4012af <fflush+0x5d>
  4012a5:	48 89 df             	mov    %rbx,%rdi
  4012a8:	e8 a5 ff ff ff       	callq  401252 <fflush>
  4012ad:	09 c5                	or     %eax,%ebp
			FUNLOCK(f);
  4012af:	45 85 e4             	test   %r12d,%r12d
  4012b2:	74 08                	je     4012bc <fflush+0x6a>
  4012b4:	48 89 df             	mov    %rbx,%rdi
  4012b7:	e8 2f 3a 00 00       	callq  404ceb <__unlockfile>
		for (f=*__ofl_lock(); f; f=f->next) {
  4012bc:	48 8b 5b 70          	mov    0x70(%rbx),%rbx
  4012c0:	eb bc                	jmp    40127e <fflush+0x2c>
		}
		__ofl_unlock();
  4012c2:	e8 5f 01 00 00       	callq  401426 <__ofl_unlock>

		return r;
  4012c7:	e9 95 00 00 00       	jmpq   401361 <fflush+0x10f>
	}

	FLOCK(f);
  4012cc:	8b 87 8c 00 00 00    	mov    0x8c(%rdi),%eax
  4012d2:	31 ed                	xor    %ebp,%ebp
  4012d4:	48 89 fb             	mov    %rdi,%rbx
  4012d7:	85 c0                	test   %eax,%eax
  4012d9:	78 07                	js     4012e2 <fflush+0x90>
  4012db:	e8 b7 39 00 00       	callq  404c97 <__lockfile>
  4012e0:	89 c5                	mov    %eax,%ebp

	/* If writing, flush output */
	if (f->wpos > f->wbase) {
  4012e2:	48 8b 43 38          	mov    0x38(%rbx),%rax
  4012e6:	48 39 43 28          	cmp    %rax,0x28(%rbx)
  4012ea:	76 1f                	jbe    40130b <fflush+0xb9>
		f->write(f, 0, 0);
  4012ec:	31 d2                	xor    %edx,%edx
  4012ee:	31 f6                	xor    %esi,%esi
  4012f0:	48 89 df             	mov    %rbx,%rdi
  4012f3:	ff 53 48             	callq  *0x48(%rbx)
		if (!f->wpos) {
  4012f6:	48 83 7b 28 00       	cmpq   $0x0,0x28(%rbx)
  4012fb:	75 0e                	jne    40130b <fflush+0xb9>
			FUNLOCK(f);
  4012fd:	85 ed                	test   %ebp,%ebp
  4012ff:	74 5d                	je     40135e <fflush+0x10c>
  401301:	48 89 df             	mov    %rbx,%rdi
  401304:	e8 e2 39 00 00       	callq  404ceb <__unlockfile>
  401309:	eb 53                	jmp    40135e <fflush+0x10c>
			return EOF;
		}
	}

	/* If reading, sync position, per POSIX */
	if (f->rpos < f->rend) f->seek(f, f->rpos-f->rend, SEEK_CUR);
  40130b:	48 8b 73 08          	mov    0x8(%rbx),%rsi
  40130f:	48 8b 43 10          	mov    0x10(%rbx),%rax
  401313:	48 39 c6             	cmp    %rax,%rsi
  401316:	73 0e                	jae    401326 <fflush+0xd4>
  401318:	48 29 c6             	sub    %rax,%rsi
  40131b:	ba 01 00 00 00       	mov    $0x1,%edx
  401320:	48 89 df             	mov    %rbx,%rdi
  401323:	ff 53 50             	callq  *0x50(%rbx)

	/* Clear read and write modes */
	f->wpos = f->wbase = f->wend = 0;
	f->rpos = f->rend = 0;

	FUNLOCK(f);
  401326:	85 ed                	test   %ebp,%ebp
	f->wpos = f->wbase = f->wend = 0;
  401328:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
  40132f:	00 
  401330:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  401337:	00 
  401338:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  40133f:	00 
	f->rpos = f->rend = 0;
  401340:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
  401347:	00 
  401348:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
  40134f:	00 
	FUNLOCK(f);
  401350:	74 0f                	je     401361 <fflush+0x10f>
  401352:	48 89 df             	mov    %rbx,%rdi
	return 0;
  401355:	31 ed                	xor    %ebp,%ebp
	FUNLOCK(f);
  401357:	e8 8f 39 00 00       	callq  404ceb <__unlockfile>
  40135c:	eb 03                	jmp    401361 <fflush+0x10f>
			return EOF;
  40135e:	83 cd ff             	or     $0xffffffff,%ebp
}
  401361:	89 e8                	mov    %ebp,%eax
  401363:	5b                   	pop    %rbx
  401364:	5d                   	pop    %rbp
  401365:	41 5c                	pop    %r12
  401367:	c3                   	retq   

0000000000401368 <fopen>:
#include <fcntl.h>
#include <string.h>
#include <errno.h>

FILE *fopen(const char *restrict filename, const char *restrict mode)
{
  401368:	41 55                	push   %r13
  40136a:	41 54                	push   %r12
  40136c:	55                   	push   %rbp
  40136d:	53                   	push   %rbx
  40136e:	48 89 f5             	mov    %rsi,%rbp
  401371:	48 89 fb             	mov    %rdi,%rbx
	FILE *f;
	int fd;
	int flags;

	/* Check for valid initial mode character */
	if (!strchr("rwa", *mode)) {
  401374:	48 8d 3d bf 4b 00 00 	lea    0x4bbf(%rip),%rdi        # 405f3a <_fini+0x5a7>
{
  40137b:	48 83 ec 08          	sub    $0x8,%rsp
	if (!strchr("rwa", *mode)) {
  40137f:	0f be 36             	movsbl (%rsi),%esi
  401382:	e8 09 1b 00 00       	callq  402e90 <strchr>
  401387:	48 85 c0             	test   %rax,%rax
  40138a:	75 0f                	jne    40139b <fopen+0x33>
		errno = EINVAL;
  40138c:	e8 df 20 00 00       	callq  403470 <__errno_location>
  401391:	31 f6                	xor    %esi,%esi
  401393:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
  401399:	eb 67                	jmp    401402 <fopen+0x9a>
		return 0;
	}

	/* Compute the flags to pass to open() */
	flags = __fmodeflags(mode);
  40139b:	48 89 ef             	mov    %rbp,%rdi
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40139e:	41 bc 02 00 00 00    	mov    $0x2,%r12d
  4013a4:	e8 6c 38 00 00       	callq  404c15 <__fmodeflags>
  4013a9:	48 63 f0             	movslq %eax,%rsi
  4013ac:	ba b6 01 00 00       	mov    $0x1b6,%edx
  4013b1:	4c 89 e0             	mov    %r12,%rax
  4013b4:	49 89 f5             	mov    %rsi,%r13
  4013b7:	48 89 df             	mov    %rbx,%rdi
  4013ba:	0f 05                	syscall 
  4013bc:	48 89 c7             	mov    %rax,%rdi

	fd = sys_open(filename, flags, 0666);
  4013bf:	e8 2c 21 00 00       	callq  4034f0 <__syscall_ret>
	if (fd < 0) return 0;
  4013c4:	31 f6                	xor    %esi,%esi
  4013c6:	85 c0                	test   %eax,%eax
	fd = sys_open(filename, flags, 0666);
  4013c8:	48 89 c3             	mov    %rax,%rbx
	if (fd < 0) return 0;
  4013cb:	78 35                	js     401402 <fopen+0x9a>
	if (flags & O_CLOEXEC)
  4013cd:	41 0f ba e5 13       	bt     $0x13,%r13d
  4013d2:	73 12                	jae    4013e6 <fopen+0x7e>
		__syscall(SYS_fcntl, fd, F_SETFD, FD_CLOEXEC);
  4013d4:	48 63 f8             	movslq %eax,%rdi
  4013d7:	ba 01 00 00 00       	mov    $0x1,%edx
  4013dc:	b8 48 00 00 00       	mov    $0x48,%eax
  4013e1:	4c 89 e6             	mov    %r12,%rsi
  4013e4:	0f 05                	syscall 

	f = __fdopen(fd, mode);
  4013e6:	48 89 ee             	mov    %rbp,%rsi
  4013e9:	89 df                	mov    %ebx,%edi
  4013eb:	e8 b4 36 00 00       	callq  404aa4 <__fdopen>
	if (f) return f;
  4013f0:	48 85 c0             	test   %rax,%rax
	f = __fdopen(fd, mode);
  4013f3:	48 89 c6             	mov    %rax,%rsi
	if (f) return f;
  4013f6:	75 0a                	jne    401402 <fopen+0x9a>

	__syscall(SYS_close, fd);
  4013f8:	48 63 fb             	movslq %ebx,%rdi
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  4013fb:	b8 03 00 00 00       	mov    $0x3,%eax
  401400:	0f 05                	syscall 
	return 0;
}
  401402:	5a                   	pop    %rdx
  401403:	48 89 f0             	mov    %rsi,%rax
  401406:	5b                   	pop    %rbx
  401407:	5d                   	pop    %rbp
  401408:	41 5c                	pop    %r12
  40140a:	41 5d                	pop    %r13
  40140c:	c3                   	retq   

000000000040140d <__ofl_lock>:
static FILE *ofl_head;
static volatile int ofl_lock[2];

FILE **__ofl_lock()
{
	LOCK(ofl_lock);
  40140d:	48 8d 3d 0c 63 20 00 	lea    0x20630c(%rip),%rdi        # 607720 <ofl_lock>
{
  401414:	48 83 ec 08          	sub    $0x8,%rsp
	LOCK(ofl_lock);
  401418:	e8 14 1d 00 00       	callq  403131 <__lock>
	return &ofl_head;
}
  40141d:	48 8d 05 04 63 20 00 	lea    0x206304(%rip),%rax        # 607728 <ofl_head>
  401424:	5a                   	pop    %rdx
  401425:	c3                   	retq   

0000000000401426 <__ofl_unlock>:

void __ofl_unlock()
{
	UNLOCK(ofl_lock);
  401426:	48 8d 3d f3 62 20 00 	lea    0x2062f3(%rip),%rdi        # 607720 <ofl_lock>
  40142d:	e9 3d 1d 00 00       	jmpq   40316f <__unlock>

0000000000401432 <printf>:
#include <stdio.h>
#include <stdarg.h>

int printf(const char *restrict fmt, ...)
{
  401432:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
  401439:	84 c0                	test   %al,%al
  40143b:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  401440:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
  401445:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
  40144a:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
  40144f:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
  401454:	74 37                	je     40148d <printf+0x5b>
  401456:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
  40145b:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
  401460:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
  401465:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
  40146c:	00 
  40146d:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
  401474:	00 
  401475:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
  40147c:	00 
  40147d:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
  401484:	00 
  401485:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
  40148c:	00 
	int ret;
	va_list ap;
	va_start(ap, fmt);
  40148d:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
  401494:	00 
	ret = vfprintf(stdout, fmt, ap);
  401495:	48 89 fe             	mov    %rdi,%rsi
  401498:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
	va_start(ap, fmt);
  40149d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4014a2:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  4014a7:	c7 44 24 08 08 00 00 	movl   $0x8,0x8(%rsp)
  4014ae:	00 
  4014af:	c7 44 24 0c 30 00 00 	movl   $0x30,0xc(%rsp)
  4014b6:	00 
  4014b7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
	ret = vfprintf(stdout, fmt, ap);
  4014bc:	48 c7 c0 f8 6f 60 00 	mov    $0x606ff8,%rax
  4014c3:	48 8b 38             	mov    (%rax),%rdi
  4014c6:	e8 4f 18 00 00       	callq  402d1a <vfprintf>
	va_end(ap);
	return ret;
}
  4014cb:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
  4014d2:	c3                   	retq   

00000000004014d3 <puts>:
#include "stdio_impl.h"

int puts(const char *s)
{
	int r;
	FLOCK(stdout);
  4014d3:	48 c7 c0 f8 6f 60 00 	mov    $0x606ff8,%rax
{
  4014da:	41 54                	push   %r12
  4014dc:	49 89 fc             	mov    %rdi,%r12
  4014df:	55                   	push   %rbp
  4014e0:	53                   	push   %rbx
  4014e1:	31 ed                	xor    %ebp,%ebp
	FLOCK(stdout);
  4014e3:	48 8b 18             	mov    (%rax),%rbx
  4014e6:	8b 83 8c 00 00 00    	mov    0x8c(%rbx),%eax
  4014ec:	85 c0                	test   %eax,%eax
  4014ee:	78 0a                	js     4014fa <puts+0x27>
  4014f0:	48 89 df             	mov    %rbx,%rdi
  4014f3:	e8 9f 37 00 00       	callq  404c97 <__lockfile>
  4014f8:	89 c5                	mov    %eax,%ebp
	r = -(fputs(s, stdout) < 0 || putc_unlocked('\n', stdout) < 0);
  4014fa:	48 89 de             	mov    %rbx,%rsi
  4014fd:	4c 89 e7             	mov    %r12,%rdi
  401500:	e8 f2 3a 00 00       	callq  404ff7 <fputs>
  401505:	85 c0                	test   %eax,%eax
  401507:	ba 01 00 00 00       	mov    $0x1,%edx
  40150c:	78 34                	js     401542 <puts+0x6f>
  40150e:	80 bb 8b 00 00 00 0a 	cmpb   $0xa,0x8b(%rbx)
  401515:	74 19                	je     401530 <puts+0x5d>
  401517:	48 8b 43 28          	mov    0x28(%rbx),%rax
  40151b:	48 3b 43 20          	cmp    0x20(%rbx),%rax
  40151f:	73 0f                	jae    401530 <puts+0x5d>
  401521:	48 8d 50 01          	lea    0x1(%rax),%rdx
  401525:	48 89 53 28          	mov    %rdx,0x28(%rbx)
  401529:	c6 00 0a             	movb   $0xa,(%rax)
  40152c:	31 d2                	xor    %edx,%edx
  40152e:	eb 12                	jmp    401542 <puts+0x6f>
  401530:	be 0a 00 00 00       	mov    $0xa,%esi
  401535:	48 89 df             	mov    %rbx,%rdi
  401538:	e8 f3 37 00 00       	callq  404d30 <__overflow>
  40153d:	c1 e8 1f             	shr    $0x1f,%eax
  401540:	89 c2                	mov    %eax,%edx
  401542:	f7 da                	neg    %edx
	FUNLOCK(stdout);
  401544:	85 ed                	test   %ebp,%ebp
	r = -(fputs(s, stdout) < 0 || putc_unlocked('\n', stdout) < 0);
  401546:	41 89 d4             	mov    %edx,%r12d
	FUNLOCK(stdout);
  401549:	74 08                	je     401553 <puts+0x80>
  40154b:	48 89 df             	mov    %rbx,%rdi
  40154e:	e8 98 37 00 00       	callq  404ceb <__unlockfile>
	return r;
}
  401553:	44 89 e0             	mov    %r12d,%eax
  401556:	5b                   	pop    %rbx
  401557:	5d                   	pop    %rbp
  401558:	41 5c                	pop    %r12
  40155a:	c3                   	retq   

000000000040155b <pop_arg>:
	void *p;
};

static void pop_arg(union arg *arg, int type, va_list *ap)
{
	switch (type) {
  40155b:	83 ee 09             	sub    $0x9,%esi
  40155e:	83 fe 11             	cmp    $0x11,%esi
  401561:	0f 87 61 01 00 00    	ja     4016c8 <pop_arg+0x16d>
  401567:	48 8d 0d d2 49 00 00 	lea    0x49d2(%rip),%rcx        # 405f40 <_fini+0x5ad>
  40156e:	48 63 04 b1          	movslq (%rcx,%rsi,4),%rax
  401572:	48 01 c8             	add    %rcx,%rax
  401575:	ff e0                	jmpq   *%rax
	       case PTR:	arg->p = va_arg(*ap, void *);
	break; case INT:	arg->i = va_arg(*ap, int);
  401577:	8b 0a                	mov    (%rdx),%ecx
  401579:	83 f9 2f             	cmp    $0x2f,%ecx
  40157c:	77 0d                	ja     40158b <pop_arg+0x30>
  40157e:	89 c8                	mov    %ecx,%eax
  401580:	83 c1 08             	add    $0x8,%ecx
  401583:	48 03 42 10          	add    0x10(%rdx),%rax
  401587:	89 0a                	mov    %ecx,(%rdx)
  401589:	eb 0c                	jmp    401597 <pop_arg+0x3c>
  40158b:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40158f:	48 8d 48 08          	lea    0x8(%rax),%rcx
  401593:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  401597:	48 63 00             	movslq (%rax),%rax
  40159a:	e9 e3 00 00 00       	jmpq   401682 <pop_arg+0x127>
	break; case UINT:	arg->i = va_arg(*ap, unsigned int);
  40159f:	8b 0a                	mov    (%rdx),%ecx
  4015a1:	83 f9 2f             	cmp    $0x2f,%ecx
  4015a4:	77 0d                	ja     4015b3 <pop_arg+0x58>
  4015a6:	89 c8                	mov    %ecx,%eax
  4015a8:	83 c1 08             	add    $0x8,%ecx
  4015ab:	48 03 42 10          	add    0x10(%rdx),%rax
  4015af:	89 0a                	mov    %ecx,(%rdx)
  4015b1:	eb 0c                	jmp    4015bf <pop_arg+0x64>
  4015b3:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4015b7:	48 8d 48 08          	lea    0x8(%rax),%rcx
  4015bb:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  4015bf:	8b 00                	mov    (%rax),%eax
  4015c1:	e9 bc 00 00 00       	jmpq   401682 <pop_arg+0x127>
	break; case LONG:	arg->i = va_arg(*ap, long);
	break; case ULONG:	arg->i = va_arg(*ap, unsigned long);
	break; case ULLONG:	arg->i = va_arg(*ap, unsigned long long);
	break; case SHORT:	arg->i = (short)va_arg(*ap, int);
  4015c6:	8b 0a                	mov    (%rdx),%ecx
  4015c8:	83 f9 2f             	cmp    $0x2f,%ecx
  4015cb:	77 0d                	ja     4015da <pop_arg+0x7f>
  4015cd:	89 c8                	mov    %ecx,%eax
  4015cf:	83 c1 08             	add    $0x8,%ecx
  4015d2:	48 03 42 10          	add    0x10(%rdx),%rax
  4015d6:	89 0a                	mov    %ecx,(%rdx)
  4015d8:	eb 0c                	jmp    4015e6 <pop_arg+0x8b>
  4015da:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4015de:	48 8d 48 08          	lea    0x8(%rax),%rcx
  4015e2:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  4015e6:	48 0f bf 00          	movswq (%rax),%rax
  4015ea:	e9 93 00 00 00       	jmpq   401682 <pop_arg+0x127>
	break; case USHORT:	arg->i = (unsigned short)va_arg(*ap, int);
  4015ef:	8b 0a                	mov    (%rdx),%ecx
  4015f1:	83 f9 2f             	cmp    $0x2f,%ecx
  4015f4:	77 0d                	ja     401603 <pop_arg+0xa8>
  4015f6:	89 c8                	mov    %ecx,%eax
  4015f8:	83 c1 08             	add    $0x8,%ecx
  4015fb:	48 03 42 10          	add    0x10(%rdx),%rax
  4015ff:	89 0a                	mov    %ecx,(%rdx)
  401601:	eb 0c                	jmp    40160f <pop_arg+0xb4>
  401603:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401607:	48 8d 48 08          	lea    0x8(%rax),%rcx
  40160b:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  40160f:	0f b7 00             	movzwl (%rax),%eax
  401612:	eb 6e                	jmp    401682 <pop_arg+0x127>
	break; case CHAR:	arg->i = (signed char)va_arg(*ap, int);
  401614:	8b 0a                	mov    (%rdx),%ecx
  401616:	83 f9 2f             	cmp    $0x2f,%ecx
  401619:	77 0d                	ja     401628 <pop_arg+0xcd>
  40161b:	89 c8                	mov    %ecx,%eax
  40161d:	83 c1 08             	add    $0x8,%ecx
  401620:	48 03 42 10          	add    0x10(%rdx),%rax
  401624:	89 0a                	mov    %ecx,(%rdx)
  401626:	eb 0c                	jmp    401634 <pop_arg+0xd9>
  401628:	48 8b 42 08          	mov    0x8(%rdx),%rax
  40162c:	48 8d 48 08          	lea    0x8(%rax),%rcx
  401630:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  401634:	48 0f be 00          	movsbq (%rax),%rax
  401638:	eb 48                	jmp    401682 <pop_arg+0x127>
	break; case UCHAR:	arg->i = (unsigned char)va_arg(*ap, int);
  40163a:	8b 0a                	mov    (%rdx),%ecx
  40163c:	83 f9 2f             	cmp    $0x2f,%ecx
  40163f:	77 0d                	ja     40164e <pop_arg+0xf3>
  401641:	89 c8                	mov    %ecx,%eax
  401643:	83 c1 08             	add    $0x8,%ecx
  401646:	48 03 42 10          	add    0x10(%rdx),%rax
  40164a:	89 0a                	mov    %ecx,(%rdx)
  40164c:	eb 0c                	jmp    40165a <pop_arg+0xff>
  40164e:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401652:	48 8d 48 08          	lea    0x8(%rax),%rcx
  401656:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  40165a:	0f b6 00             	movzbl (%rax),%eax
  40165d:	eb 23                	jmp    401682 <pop_arg+0x127>
	break; case LLONG:	arg->i = va_arg(*ap, long long);
	break; case SIZET:	arg->i = va_arg(*ap, size_t);
	break; case IMAX:	arg->i = va_arg(*ap, intmax_t);
	break; case UMAX:	arg->i = va_arg(*ap, uintmax_t);
	break; case PDIFF:	arg->i = va_arg(*ap, ptrdiff_t);
	break; case UIPTR:	arg->i = (uintptr_t)va_arg(*ap, void *);
  40165f:	8b 0a                	mov    (%rdx),%ecx
  401661:	83 f9 2f             	cmp    $0x2f,%ecx
  401664:	77 0d                	ja     401673 <pop_arg+0x118>
  401666:	89 c8                	mov    %ecx,%eax
  401668:	83 c1 08             	add    $0x8,%ecx
  40166b:	48 03 42 10          	add    0x10(%rdx),%rax
  40166f:	89 0a                	mov    %ecx,(%rdx)
  401671:	eb 0c                	jmp    40167f <pop_arg+0x124>
  401673:	48 8b 42 08          	mov    0x8(%rdx),%rax
  401677:	48 8d 48 08          	lea    0x8(%rax),%rcx
  40167b:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  40167f:	48 8b 00             	mov    (%rax),%rax
  401682:	48 89 07             	mov    %rax,(%rdi)
	break; case DBL:	arg->f = va_arg(*ap, double);
  401685:	c3                   	retq   
  401686:	8b 4a 04             	mov    0x4(%rdx),%ecx
  401689:	81 f9 af 00 00 00    	cmp    $0xaf,%ecx
  40168f:	77 0e                	ja     40169f <pop_arg+0x144>
  401691:	89 c8                	mov    %ecx,%eax
  401693:	83 c1 10             	add    $0x10,%ecx
  401696:	48 03 42 10          	add    0x10(%rdx),%rax
  40169a:	89 4a 04             	mov    %ecx,0x4(%rdx)
  40169d:	eb 0c                	jmp    4016ab <pop_arg+0x150>
  40169f:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4016a3:	48 8d 48 08          	lea    0x8(%rax),%rcx
  4016a7:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  4016ab:	dd 00                	fldl   (%rax)
  4016ad:	db 3f                	fstpt  (%rdi)
	break; case LDBL:	arg->f = va_arg(*ap, long double);
  4016af:	c3                   	retq   
  4016b0:	48 8b 42 08          	mov    0x8(%rdx),%rax
  4016b4:	48 83 c0 0f          	add    $0xf,%rax
  4016b8:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
  4016bc:	48 8d 48 10          	lea    0x10(%rax),%rcx
  4016c0:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  4016c4:	db 28                	fldt   (%rax)
  4016c6:	db 3f                	fstpt  (%rdi)
  4016c8:	c3                   	retq   

00000000004016c9 <fmt_u>:
	for (; x; x>>=3) *--s = '0' + (x&7);
	return s;
}

static char *fmt_u(uintmax_t x, char *s)
{
  4016c9:	48 89 f8             	mov    %rdi,%rax
	unsigned long y;
	for (   ; x>ULONG_MAX; x/=10) *--s = '0' + x%10;
	for (y=x;           y; y/=10) *--s = '0' + y%10;
  4016cc:	b9 0a 00 00 00       	mov    $0xa,%ecx
  4016d1:	48 85 c0             	test   %rax,%rax
  4016d4:	74 0f                	je     4016e5 <fmt_u+0x1c>
  4016d6:	31 d2                	xor    %edx,%edx
  4016d8:	48 ff ce             	dec    %rsi
  4016db:	48 f7 f1             	div    %rcx
  4016de:	83 c2 30             	add    $0x30,%edx
  4016e1:	88 16                	mov    %dl,(%rsi)
  4016e3:	eb ec                	jmp    4016d1 <fmt_u+0x8>
	return s;
}
  4016e5:	48 89 f0             	mov    %rsi,%rax
  4016e8:	c3                   	retq   

00000000004016e9 <getint>:
	return MAX(w, pl+l);
}

static int getint(char **s) {
	int i;
	for (i=0; isdigit(**s); (*s)++) {
  4016e9:	31 c0                	xor    %eax,%eax
		if (i > INT_MAX/10U || **s-'0' > INT_MAX-10*i) i = -1;
  4016eb:	41 83 c8 ff          	or     $0xffffffff,%r8d
	for (i=0; isdigit(**s); (*s)++) {
  4016ef:	48 8b 0f             	mov    (%rdi),%rcx
  4016f2:	0f be 11             	movsbl (%rcx),%edx
  4016f5:	83 ea 30             	sub    $0x30,%edx
  4016f8:	83 fa 09             	cmp    $0x9,%edx
  4016fb:	77 26                	ja     401723 <getint+0x3a>
		if (i > INT_MAX/10U || **s-'0' > INT_MAX-10*i) i = -1;
  4016fd:	3d cc cc cc 0c       	cmp    $0xccccccc,%eax
  401702:	77 14                	ja     401718 <getint+0x2f>
  401704:	6b f0 f6             	imul   $0xfffffff6,%eax,%esi
  401707:	81 c6 ff ff ff 7f    	add    $0x7fffffff,%esi
  40170d:	39 f2                	cmp    %esi,%edx
  40170f:	7f 07                	jg     401718 <getint+0x2f>
		else i = 10*i + (**s-'0');
  401711:	6b c0 0a             	imul   $0xa,%eax,%eax
  401714:	01 d0                	add    %edx,%eax
  401716:	eb 03                	jmp    40171b <getint+0x32>
		if (i > INT_MAX/10U || **s-'0' > INT_MAX-10*i) i = -1;
  401718:	44 89 c0             	mov    %r8d,%eax
	for (i=0; isdigit(**s); (*s)++) {
  40171b:	48 ff c1             	inc    %rcx
  40171e:	48 89 0f             	mov    %rcx,(%rdi)
  401721:	eb cc                	jmp    4016ef <getint+0x6>
	}
	return i;
}
  401723:	c3                   	retq   

0000000000401724 <out>:
	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  401724:	f6 07 20             	testb  $0x20,(%rdi)
{
  401727:	48 89 f0             	mov    %rsi,%rax
  40172a:	48 89 d6             	mov    %rdx,%rsi
	if (!(f->flags & F_ERR)) __fwritex((void *)s, l, f);
  40172d:	75 0b                	jne    40173a <out+0x16>
  40172f:	48 89 fa             	mov    %rdi,%rdx
  401732:	48 89 c7             	mov    %rax,%rdi
  401735:	e9 f2 38 00 00       	jmpq   40502c <__fwritex>
  40173a:	c3                   	retq   

000000000040173b <pad>:
	if (fl & (LEFT_ADJ | ZERO_PAD) || l >= w) return;
  40173b:	41 81 e0 00 20 01 00 	and    $0x12000,%r8d
  401742:	75 75                	jne    4017b9 <pad+0x7e>
  401744:	39 d1                	cmp    %edx,%ecx
  401746:	7d 71                	jge    4017b9 <pad+0x7e>
{
  401748:	41 55                	push   %r13
  40174a:	41 54                	push   %r12
	memset(pad, c, l>sizeof pad ? sizeof pad : l);
  40174c:	40 0f be f6          	movsbl %sil,%esi
{
  401750:	55                   	push   %rbp
  401751:	53                   	push   %rbx
	l = w - l;
  401752:	89 d3                	mov    %edx,%ebx
  401754:	29 cb                	sub    %ecx,%ebx
	memset(pad, c, l>sizeof pad ? sizeof pad : l);
  401756:	ba 00 01 00 00       	mov    $0x100,%edx
  40175b:	48 89 fd             	mov    %rdi,%rbp
{
  40175e:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
	memset(pad, c, l>sizeof pad ? sizeof pad : l);
  401765:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
  40176b:	41 89 dc             	mov    %ebx,%r12d
  40176e:	48 0f 46 d3          	cmovbe %rbx,%rdx
  401772:	48 89 e7             	mov    %rsp,%rdi
  401775:	49 89 e5             	mov    %rsp,%r13
  401778:	e8 f0 18 00 00       	callq  40306d <memset>
	for (; l >= sizeof pad; l -= sizeof pad)
  40177d:	81 fb ff 00 00 00    	cmp    $0xff,%ebx
  401783:	76 18                	jbe    40179d <pad+0x62>
		out(f, pad, sizeof pad);
  401785:	ba 00 01 00 00       	mov    $0x100,%edx
  40178a:	4c 89 ee             	mov    %r13,%rsi
  40178d:	48 89 ef             	mov    %rbp,%rdi
  401790:	e8 8f ff ff ff       	callq  401724 <out>
	for (; l >= sizeof pad; l -= sizeof pad)
  401795:	81 eb 00 01 00 00    	sub    $0x100,%ebx
  40179b:	eb e0                	jmp    40177d <pad+0x42>
	out(f, pad, l);
  40179d:	41 0f b6 d4          	movzbl %r12b,%edx
  4017a1:	4c 89 ee             	mov    %r13,%rsi
  4017a4:	48 89 ef             	mov    %rbp,%rdi
  4017a7:	e8 78 ff ff ff       	callq  401724 <out>
}
  4017ac:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  4017b3:	5b                   	pop    %rbx
  4017b4:	5d                   	pop    %rbp
  4017b5:	41 5c                	pop    %r12
  4017b7:	41 5d                	pop    %r13
  4017b9:	c3                   	retq   

00000000004017ba <fmt_fp>:
{
  4017ba:	41 57                	push   %r15
  4017bc:	41 56                	push   %r14
  4017be:	45 89 c7             	mov    %r8d,%r15d
  4017c1:	41 55                	push   %r13
  4017c3:	41 54                	push   %r12
  4017c5:	49 89 fc             	mov    %rdi,%r12
  4017c8:	55                   	push   %rbp
  4017c9:	53                   	push   %rbx
  4017ca:	89 d3                	mov    %edx,%ebx
  4017cc:	48 81 ec 58 1d 00 00 	sub    $0x1d58,%rsp
  4017d3:	db ac 24 90 1d 00 00 	fldt   0x1d90(%rsp)
  4017da:	89 74 24 58          	mov    %esi,0x58(%rsp)
  4017de:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
	int e2=0, e, i, j, l;
  4017e2:	c7 44 24 78 00 00 00 	movl   $0x0,0x78(%rsp)
  4017e9:	00 
	if (signbit(y)) {
  4017ea:	d9 c0                	fld    %st(0)
  4017ec:	db 3c 24             	fstpt  (%rsp)
  4017ef:	db 7c 24 20          	fstpt  0x20(%rsp)
  4017f3:	e8 81 30 00 00       	callq  404879 <__signbitl>
  4017f8:	85 c0                	test   %eax,%eax
  4017fa:	5f                   	pop    %rdi
  4017fb:	41 58                	pop    %r8
  4017fd:	db 6c 24 10          	fldt   0x10(%rsp)
  401801:	74 11                	je     401814 <fmt_fp+0x5a>
	pl=1;
  401803:	41 bd 01 00 00 00    	mov    $0x1,%r13d
	const char *prefix="-0X+0X 0X-0x+0x 0x";
  401809:	48 8d 05 78 47 00 00 	lea    0x4778(%rip),%rax        # 405f88 <_fini+0x5f5>
		y=-y;
  401810:	d9 e0                	fchs   
  401812:	eb 38                	jmp    40184c <fmt_fp+0x92>
		prefix+=3;
  401814:	48 8d 05 70 47 00 00 	lea    0x4770(%rip),%rax        # 405f8b <_fini+0x5f8>
	pl=1;
  40181b:	41 bd 01 00 00 00    	mov    $0x1,%r13d
		prefix+=3;
  401821:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
	} else if (fl & MARK_POS) {
  401826:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  40182a:	0f ba e0 0b          	bt     $0xb,%eax
  40182e:	72 21                	jb     401851 <fmt_fp+0x97>
	pl=1;
  401830:	45 31 ed             	xor    %r13d,%r13d
  401833:	48 8d 15 4f 47 00 00 	lea    0x474f(%rip),%rdx        # 405f89 <_fini+0x5f6>
  40183a:	83 e0 01             	and    $0x1,%eax
  40183d:	48 8d 05 4a 47 00 00 	lea    0x474a(%rip),%rax        # 405f8e <_fini+0x5fb>
  401844:	41 0f 95 c5          	setne  %r13b
  401848:	48 0f 44 c2          	cmove  %rdx,%rax
  40184c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
	if (!isfinite(y)) {
  401851:	48 83 ec 10          	sub    $0x10,%rsp
  401855:	d9 c0                	fld    %st(0)
  401857:	db 3c 24             	fstpt  (%rsp)
  40185a:	db 7c 24 20          	fstpt  0x20(%rsp)
  40185e:	e8 ca 2f 00 00       	callq  40482d <__fpclassifyl>
  401863:	ff c8                	dec    %eax
  401865:	59                   	pop    %rcx
  401866:	5e                   	pop    %rsi
  401867:	db 6c 24 10          	fldt   0x10(%rsp)
  40186b:	0f 8f a5 00 00 00    	jg     401916 <fmt_fp+0x15c>
		char *s = (t&32)?"inf":"INF";
  401871:	48 8d 05 23 47 00 00 	lea    0x4723(%rip),%rax        # 405f9b <_fini+0x608>
  401878:	48 8d 1d 20 47 00 00 	lea    0x4720(%rip),%rbx        # 405f9f <_fini+0x60c>
  40187f:	41 83 e7 20          	and    $0x20,%r15d
  401883:	48 0f 45 d8          	cmovne %rax,%rbx
		if (y!=y) s=(t&32)?"nan":"NAN";
  401887:	df e8                	fucomip %st(0),%st
  401889:	7b 15                	jnp    4018a0 <fmt_fp+0xe6>
  40188b:	48 8d 05 15 47 00 00 	lea    0x4715(%rip),%rax        # 405fa7 <_fini+0x614>
  401892:	48 8d 1d 0a 47 00 00 	lea    0x470a(%rip),%rbx        # 405fa3 <_fini+0x610>
  401899:	45 85 ff             	test   %r15d,%r15d
  40189c:	48 0f 45 d8          	cmovne %rax,%rbx
		pad(f, ' ', w, 3+pl, fl&~ZERO_PAD);
  4018a0:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  4018a5:	45 8d 7d 03          	lea    0x3(%r13),%r15d
  4018a9:	8b 54 24 48          	mov    0x48(%rsp),%edx
  4018ad:	be 20 00 00 00       	mov    $0x20,%esi
  4018b2:	4c 89 e7             	mov    %r12,%rdi
  4018b5:	44 89 f9             	mov    %r15d,%ecx
  4018b8:	41 81 e0 ff ff fe ff 	and    $0xfffeffff,%r8d
  4018bf:	e8 77 fe ff ff       	callq  40173b <pad>
		out(f, prefix, pl);
  4018c4:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  4018c9:	49 63 d5             	movslq %r13d,%rdx
  4018cc:	4c 89 e7             	mov    %r12,%rdi
  4018cf:	e8 50 fe ff ff       	callq  401724 <out>
		out(f, s, 3);
  4018d4:	ba 03 00 00 00       	mov    $0x3,%edx
  4018d9:	48 89 de             	mov    %rbx,%rsi
  4018dc:	4c 89 e7             	mov    %r12,%rdi
  4018df:	e8 40 fe ff ff       	callq  401724 <out>
		pad(f, ' ', w, 3+pl, fl^LEFT_ADJ);
  4018e4:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  4018e9:	8b 54 24 48          	mov    0x48(%rsp),%edx
  4018ed:	44 89 f9             	mov    %r15d,%ecx
  4018f0:	be 20 00 00 00       	mov    $0x20,%esi
  4018f5:	4c 89 e7             	mov    %r12,%rdi
  4018f8:	41 81 f0 00 20 00 00 	xor    $0x2000,%r8d
  4018ff:	e8 37 fe ff ff       	callq  40173b <pad>
		return MAX(w, 3+pl);
  401904:	44 3b 7c 24 48       	cmp    0x48(%rsp),%r15d
  401909:	8b 44 24 48          	mov    0x48(%rsp),%eax
  40190d:	41 0f 4d c7          	cmovge %r15d,%eax
  401911:	e9 0e 0a 00 00       	jmpq   402324 <fmt_fp+0xb6a>
	y = frexpl(y, &e2) * 2;
  401916:	48 8d 7c 24 68       	lea    0x68(%rsp),%rdi
  40191b:	48 83 ec 10          	sub    $0x10,%rsp
  40191f:	db 3c 24             	fstpt  (%rsp)
  401922:	e8 66 2f 00 00       	callq  40488d <frexpl>
  401927:	d8 c0                	fadd   %st(0),%st
	if (y) e2--;
  401929:	58                   	pop    %rax
  40192a:	5a                   	pop    %rdx
  40192b:	d9 ee                	fldz   
  40192d:	d9 c9                	fxch   %st(1)
  40192f:	db e9                	fucomi %st(1),%st
  401931:	7a 02                	jp     401935 <fmt_fp+0x17b>
  401933:	74 04                	je     401939 <fmt_fp+0x17f>
  401935:	ff 4c 24 68          	decl   0x68(%rsp)
	if ((t|32)=='a') {
  401939:	45 89 f9             	mov    %r15d,%r9d
  40193c:	41 83 c9 20          	or     $0x20,%r9d
  401940:	41 83 f9 61          	cmp    $0x61,%r9d
  401944:	0f 85 65 02 00 00    	jne    401baf <fmt_fp+0x3f5>
		if (t&32) prefix += 9;
  40194a:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  40194f:	d9 05 6b 49 00 00    	flds   0x496b(%rip)        # 4062c0 <states+0x1e0>
  401955:	48 83 c0 09          	add    $0x9,%rax
  401959:	41 f6 c7 20          	test   $0x20,%r15b
  40195d:	48 0f 44 44 24 40    	cmove  0x40(%rsp),%rax
		pl += 2;
  401963:	41 83 c5 02          	add    $0x2,%r13d
		if (p<0 || p>=LDBL_MANT_DIG/4-1) re=0;
  401967:	83 fb 0e             	cmp    $0xe,%ebx
		if (t&32) prefix += 9;
  40196a:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
		if (p<0 || p>=LDBL_MANT_DIG/4-1) re=0;
  40196f:	77 36                	ja     4019a7 <fmt_fp+0x1ed>
		else re=LDBL_MANT_DIG/4-1-p;
  401971:	b8 0f 00 00 00       	mov    $0xf,%eax
  401976:	d9 05 34 49 00 00    	flds   0x4934(%rip)        # 4062b0 <states+0x1d0>
  40197c:	29 d8                	sub    %ebx,%eax
			while (re--) round*=16;
  40197e:	ff c8                	dec    %eax
  401980:	83 f8 ff             	cmp    $0xffffffff,%eax
  401983:	74 04                	je     401989 <fmt_fp+0x1cf>
  401985:	d8 c9                	fmul   %st(1),%st
  401987:	eb f5                	jmp    40197e <fmt_fp+0x1c4>
			if (*prefix=='-') {
  401989:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  40198e:	80 38 2d             	cmpb   $0x2d,(%rax)
  401991:	75 10                	jne    4019a3 <fmt_fp+0x1e9>
  401993:	d9 ca                	fxch   %st(2)
				y=-y;
  401995:	d9 e0                	fchs   
				y-=round;
  401997:	d8 e2                	fsub   %st(2),%st
				y+=round;
  401999:	de c2                	faddp  %st,%st(2)
  40199b:	d9 c9                	fxch   %st(1)
				y=-y;
  40199d:	d9 e0                	fchs   
  40199f:	d9 c9                	fxch   %st(1)
  4019a1:	eb 04                	jmp    4019a7 <fmt_fp+0x1ed>
				y+=round;
  4019a3:	dc c2                	fadd   %st,%st(2)
				y-=round;
  4019a5:	de ea                	fsubrp %st,%st(2)
  4019a7:	db 7c 24 30          	fstpt  0x30(%rsp)
  4019ab:	d9 c9                	fxch   %st(1)
		estr=fmt_u(e2<0 ? -e2 : e2, ebuf);
  4019ad:	8b 44 24 68          	mov    0x68(%rsp),%eax
  4019b1:	8b 7c 24 68          	mov    0x68(%rsp),%edi
  4019b5:	48 8d 6c 24 6f       	lea    0x6f(%rsp),%rbp
  4019ba:	4c 8d 45 0c          	lea    0xc(%rbp),%r8
  4019be:	c1 f8 1f             	sar    $0x1f,%eax
  4019c1:	31 c7                	xor    %eax,%edi
  4019c3:	4c 89 c6             	mov    %r8,%rsi
  4019c6:	29 c7                	sub    %eax,%edi
  4019c8:	48 63 ff             	movslq %edi,%rdi
  4019cb:	db 7c 24 20          	fstpt  0x20(%rsp)
  4019cf:	db 7c 24 10          	fstpt  0x10(%rsp)
  4019d3:	e8 f1 fc ff ff       	callq  4016c9 <fmt_u>
		if (estr==ebuf) *--estr='0';
  4019d8:	4c 39 c0             	cmp    %r8,%rax
  4019db:	db 6c 24 10          	fldt   0x10(%rsp)
  4019df:	db 6c 24 20          	fldt   0x20(%rsp)
  4019e3:	db 6c 24 30          	fldt   0x30(%rsp)
  4019e7:	75 09                	jne    4019f2 <fmt_fp+0x238>
  4019e9:	48 8d 45 0b          	lea    0xb(%rbp),%rax
  4019ed:	c6 44 24 7a 30       	movb   $0x30,0x7a(%rsp)
  4019f2:	d9 ca                	fxch   %st(2)
		*--estr = (e2<0 ? '-' : '+');
  4019f4:	8b 54 24 68          	mov    0x68(%rsp),%edx
		*--estr = t+('p'-'a');
  4019f8:	4c 8d 70 fe          	lea    -0x2(%rax),%r14
			if (s-buf==1 && (y||p>0||(fl&ALT_FORM))) *s++='.';
  4019fc:	44 8b 5c 24 0c       	mov    0xc(%rsp),%r11d
			*s++=xdigits[x]|(t&32);
  401a01:	45 88 f8             	mov    %r15b,%r8b
  401a04:	48 8d 35 b5 46 00 00 	lea    0x46b5(%rip),%rsi        # 4060c0 <xdigits>
			if (s-buf==1 && (y||p>0||(fl&ALT_FORM))) *s++='.';
  401a0b:	40 b7 01             	mov    $0x1,%dil
			*s++=xdigits[x]|(t&32);
  401a0e:	41 83 e0 20          	and    $0x20,%r8d
		*--estr = (e2<0 ? '-' : '+');
  401a12:	c1 fa 1f             	sar    $0x1f,%edx
			if (s-buf==1 && (y||p>0||(fl&ALT_FORM))) *s++='.';
  401a15:	41 83 e3 08          	and    $0x8,%r11d
		*--estr = (e2<0 ? '-' : '+');
  401a19:	83 e2 02             	and    $0x2,%edx
  401a1c:	83 c2 2b             	add    $0x2b,%edx
  401a1f:	88 50 ff             	mov    %dl,-0x1(%rax)
		*--estr = t+('p'-'a');
  401a22:	41 8d 57 0f          	lea    0xf(%r15),%edx
  401a26:	88 50 fe             	mov    %dl,-0x2(%rax)
  401a29:	d9 7c 24 5e          	fnstcw 0x5e(%rsp)
  401a2d:	66 8b 44 24 5e       	mov    0x5e(%rsp),%ax
		s=buf;
  401a32:	48 8d 54 24 7b       	lea    0x7b(%rsp),%rdx
  401a37:	80 cc 0c             	or     $0xc,%ah
			if (s-buf==1 && (y||p>0||(fl&ALT_FORM))) *s++='.';
  401a3a:	49 89 d2             	mov    %rdx,%r10
  401a3d:	66 89 44 24 5c       	mov    %ax,0x5c(%rsp)
			int x=y;
  401a42:	d9 c0                	fld    %st(0)
  401a44:	d9 6c 24 5c          	fldcw  0x5c(%rsp)
  401a48:	db 5c 24 10          	fistpl 0x10(%rsp)
  401a4c:	d9 6c 24 5e          	fldcw  0x5e(%rsp)
			*s++=xdigits[x]|(t&32);
  401a50:	44 88 c1             	mov    %r8b,%cl
  401a53:	48 63 44 24 10       	movslq 0x10(%rsp),%rax
			y=16*(y-x);
  401a58:	da 64 24 10          	fisubl 0x10(%rsp)
			*s++=xdigits[x]|(t&32);
  401a5c:	0a 0c 06             	or     (%rsi,%rax,1),%cl
			if (s-buf==1 && (y||p>0||(fl&ALT_FORM))) *s++='.';
  401a5f:	4c 39 d2             	cmp    %r10,%rdx
  401a62:	48 8d 42 01          	lea    0x1(%rdx),%rax
			*s++=xdigits[x]|(t&32);
  401a66:	88 0a                	mov    %cl,(%rdx)
			y=16*(y-x);
  401a68:	d8 ca                	fmul   %st(2),%st
			if (s-buf==1 && (y||p>0||(fl&ALT_FORM))) *s++='.';
  401a6a:	75 1d                	jne    401a89 <fmt_fp+0x2cf>
  401a6c:	db e9                	fucomi %st(1),%st
  401a6e:	0f 9a c1             	setp   %cl
  401a71:	0f 45 cf             	cmovne %edi,%ecx
  401a74:	84 c9                	test   %cl,%cl
  401a76:	75 09                	jne    401a81 <fmt_fp+0x2c7>
  401a78:	85 db                	test   %ebx,%ebx
  401a7a:	7f 05                	jg     401a81 <fmt_fp+0x2c7>
  401a7c:	45 85 db             	test   %r11d,%r11d
  401a7f:	74 08                	je     401a89 <fmt_fp+0x2cf>
  401a81:	48 8d 42 02          	lea    0x2(%rdx),%rax
  401a85:	c6 42 01 2e          	movb   $0x2e,0x1(%rdx)
		} while (y);
  401a89:	db e9                	fucomi %st(1),%st
  401a8b:	7b 05                	jnp    401a92 <fmt_fp+0x2d8>
  401a8d:	48 89 c2             	mov    %rax,%rdx
  401a90:	eb b0                	jmp    401a42 <fmt_fp+0x288>
  401a92:	75 f9                	jne    401a8d <fmt_fp+0x2d3>
  401a94:	dd d8                	fstp   %st(0)
  401a96:	dd d8                	fstp   %st(0)
  401a98:	dd d8                	fstp   %st(0)
		if (p > INT_MAX-2-(ebuf-estr)-pl)
  401a9a:	48 83 c5 0c          	add    $0xc,%rbp
  401a9e:	ba fd ff ff 7f       	mov    $0x7ffffffd,%edx
  401aa3:	49 63 f5             	movslq %r13d,%rsi
  401aa6:	4c 29 f5             	sub    %r14,%rbp
  401aa9:	48 63 cb             	movslq %ebx,%rcx
  401aac:	48 29 ea             	sub    %rbp,%rdx
  401aaf:	48 29 f2             	sub    %rsi,%rdx
  401ab2:	48 39 d1             	cmp    %rdx,%rcx
  401ab5:	7e 08                	jle    401abf <fmt_fp+0x305>
			return -1;
  401ab7:	83 c8 ff             	or     $0xffffffff,%eax
  401aba:	e9 65 08 00 00       	jmpq   402324 <fmt_fp+0xb6a>
		if (p && s-buf-2 < p)
  401abf:	85 db                	test   %ebx,%ebx
  401ac1:	74 12                	je     401ad5 <fmt_fp+0x31b>
  401ac3:	48 89 c2             	mov    %rax,%rdx
			l = (p+2) + (ebuf-estr);
  401ac6:	8d 5c 2b 02          	lea    0x2(%rbx,%rbp,1),%ebx
		if (p && s-buf-2 < p)
  401aca:	4c 29 d2             	sub    %r10,%rdx
  401acd:	48 ff ca             	dec    %rdx
  401ad0:	48 39 d1             	cmp    %rdx,%rcx
  401ad3:	7d 0a                	jge    401adf <fmt_fp+0x325>
			l = (s-buf) + (ebuf-estr);
  401ad5:	49 89 c3             	mov    %rax,%r11
  401ad8:	4d 29 d3             	sub    %r10,%r11
  401adb:	41 8d 1c 2b          	lea    (%r11,%rbp,1),%ebx
		pad(f, ' ', w, pl+l, fl);
  401adf:	46 8d 3c 2b          	lea    (%rbx,%r13,1),%r15d
  401ae3:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  401ae8:	8b 54 24 48          	mov    0x48(%rsp),%edx
  401aec:	be 20 00 00 00       	mov    $0x20,%esi
  401af1:	4c 89 e7             	mov    %r12,%rdi
  401af4:	4c 89 54 24 20       	mov    %r10,0x20(%rsp)
  401af9:	44 89 f9             	mov    %r15d,%ecx
  401afc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
		pad(f, '0', l-(ebuf-estr)-(s-buf), 0, 0);
  401b01:	29 eb                	sub    %ebp,%ebx
		pad(f, ' ', w, pl+l, fl);
  401b03:	e8 33 fc ff ff       	callq  40173b <pad>
		out(f, prefix, pl);
  401b08:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  401b0d:	49 63 d5             	movslq %r13d,%rdx
  401b10:	4c 89 e7             	mov    %r12,%rdi
  401b13:	e8 0c fc ff ff       	callq  401724 <out>
		pad(f, '0', w, pl+l, fl^ZERO_PAD);
  401b18:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  401b1d:	8b 54 24 48          	mov    0x48(%rsp),%edx
  401b21:	44 89 f9             	mov    %r15d,%ecx
  401b24:	be 30 00 00 00       	mov    $0x30,%esi
  401b29:	4c 89 e7             	mov    %r12,%rdi
  401b2c:	41 81 f0 00 00 01 00 	xor    $0x10000,%r8d
  401b33:	e8 03 fc ff ff       	callq  40173b <pad>
		out(f, buf, s-buf);
  401b38:	4c 8b 54 24 20       	mov    0x20(%rsp),%r10
  401b3d:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  401b42:	48 8d 74 24 7b       	lea    0x7b(%rsp),%rsi
  401b47:	4c 89 e7             	mov    %r12,%rdi
  401b4a:	4c 29 d0             	sub    %r10,%rax
  401b4d:	48 89 c2             	mov    %rax,%rdx
  401b50:	49 89 c5             	mov    %rax,%r13
  401b53:	e8 cc fb ff ff       	callq  401724 <out>
		pad(f, '0', l-(ebuf-estr)-(s-buf), 0, 0);
  401b58:	89 da                	mov    %ebx,%edx
  401b5a:	45 31 c0             	xor    %r8d,%r8d
  401b5d:	31 c9                	xor    %ecx,%ecx
  401b5f:	44 29 ea             	sub    %r13d,%edx
  401b62:	be 30 00 00 00       	mov    $0x30,%esi
  401b67:	4c 89 e7             	mov    %r12,%rdi
  401b6a:	e8 cc fb ff ff       	callq  40173b <pad>
		out(f, estr, ebuf-estr);
  401b6f:	48 89 ea             	mov    %rbp,%rdx
  401b72:	4c 89 f6             	mov    %r14,%rsi
  401b75:	4c 89 e7             	mov    %r12,%rdi
  401b78:	e8 a7 fb ff ff       	callq  401724 <out>
		pad(f, ' ', w, pl+l, fl^LEFT_ADJ);
  401b7d:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  401b82:	8b 54 24 48          	mov    0x48(%rsp),%edx
  401b86:	44 89 f9             	mov    %r15d,%ecx
  401b89:	be 20 00 00 00       	mov    $0x20,%esi
  401b8e:	4c 89 e7             	mov    %r12,%rdi
  401b91:	41 81 f0 00 20 00 00 	xor    $0x2000,%r8d
  401b98:	e8 9e fb ff ff       	callq  40173b <pad>
		return MAX(w, pl+l);
  401b9d:	44 39 7c 24 48       	cmp    %r15d,0x48(%rsp)
  401ba2:	8b 44 24 48          	mov    0x48(%rsp),%eax
  401ba6:	41 0f 4c c7          	cmovl  %r15d,%eax
  401baa:	e9 75 07 00 00       	jmpq   402324 <fmt_fp+0xb6a>
	if (p<0) p=6;
  401baf:	85 db                	test   %ebx,%ebx
  401bb1:	b8 06 00 00 00       	mov    $0x6,%eax
  401bb6:	0f 48 d8             	cmovs  %eax,%ebx
	if (y) y *= 0x1p28, e2-=28;
  401bb9:	db e9                	fucomi %st(1),%st
  401bbb:	7a 02                	jp     401bbf <fmt_fp+0x405>
  401bbd:	74 0b                	je     401bca <fmt_fp+0x410>
  401bbf:	d8 0d ff 46 00 00    	fmuls  0x46ff(%rip)        # 4062c4 <states+0x1e4>
  401bc5:	83 6c 24 68 1c       	subl   $0x1c,0x68(%rsp)
	if (e2<0) a=r=z=big;
  401bca:	8b 74 24 68          	mov    0x68(%rsp),%esi
  401bce:	48 8d 84 24 94 00 00 	lea    0x94(%rsp),%rax
  401bd5:	00 
	else a=r=z=big+sizeof(big)/sizeof(*big) - LDBL_MANT_DIG - 1;
  401bd6:	48 8d 94 24 3c 1c 00 	lea    0x1c3c(%rsp),%rdx
  401bdd:	00 
  401bde:	d9 7c 24 5e          	fnstcw 0x5e(%rsp)
		y = 1000000000*(y-*z++);
  401be2:	d9 05 e0 46 00 00    	flds   0x46e0(%rip)        # 4062c8 <states+0x1e8>
  401be8:	d9 c9                	fxch   %st(1)
	else a=r=z=big+sizeof(big)/sizeof(*big) - LDBL_MANT_DIG - 1;
  401bea:	85 f6                	test   %esi,%esi
  401bec:	48 0f 49 c2          	cmovns %rdx,%rax
  401bf0:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  401bf5:	49 89 c6             	mov    %rax,%r14
  401bf8:	66 8b 44 24 5e       	mov    0x5e(%rsp),%ax
  401bfd:	80 cc 0c             	or     $0xc,%ah
  401c00:	66 89 44 24 5c       	mov    %ax,0x5c(%rsp)
		*z = y;
  401c05:	d9 c0                	fld    %st(0)
  401c07:	d9 6c 24 5c          	fldcw  0x5c(%rsp)
  401c0b:	df 7c 24 50          	fistpll 0x50(%rsp)
  401c0f:	d9 6c 24 5e          	fldcw  0x5e(%rsp)
		y = 1000000000*(y-*z++);
  401c13:	49 83 c6 04          	add    $0x4,%r14
		*z = y;
  401c17:	48 8b 44 24 50       	mov    0x50(%rsp),%rax
  401c1c:	41 89 46 fc          	mov    %eax,-0x4(%r14)
		y = 1000000000*(y-*z++);
  401c20:	89 c0                	mov    %eax,%eax
  401c22:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  401c27:	df 6c 24 20          	fildll 0x20(%rsp)
  401c2b:	de e9                	fsubrp %st,%st(1)
  401c2d:	d8 c9                	fmul   %st(1),%st
	} while (y);
  401c2f:	db ea                	fucomi %st(2),%st
  401c31:	7a d2                	jp     401c05 <fmt_fp+0x44b>
  401c33:	75 d0                	jne    401c05 <fmt_fp+0x44b>
  401c35:	dd d8                	fstp   %st(0)
  401c37:	dd d8                	fstp   %st(0)
  401c39:	dd d8                	fstp   %st(0)
  401c3b:	48 8b 6c 24 10       	mov    0x10(%rsp),%rbp
  401c40:	31 c0                	xor    %eax,%eax
		int sh=MIN(29,e2);
  401c42:	41 b8 1d 00 00 00    	mov    $0x1d,%r8d
			*d = x % 1000000000;
  401c48:	41 bb 00 ca 9a 3b    	mov    $0x3b9aca00,%r11d
	while (e2>0) {
  401c4e:	85 f6                	test   %esi,%esi
  401c50:	7e 4f                	jle    401ca1 <fmt_fp+0x4e7>
		int sh=MIN(29,e2);
  401c52:	83 fe 1d             	cmp    $0x1d,%esi
  401c55:	44 89 c1             	mov    %r8d,%ecx
		for (d=z-1; d>=a; d--) {
  401c58:	49 8d 7e fc          	lea    -0x4(%r14),%rdi
		int sh=MIN(29,e2);
  401c5c:	0f 4e ce             	cmovle %esi,%ecx
		uint32_t carry=0;
  401c5f:	31 c0                	xor    %eax,%eax
		for (d=z-1; d>=a; d--) {
  401c61:	48 39 fd             	cmp    %rdi,%rbp
  401c64:	77 18                	ja     401c7e <fmt_fp+0x4c4>
			uint64_t x = ((uint64_t)*d<<sh)+carry;
  401c66:	8b 17                	mov    (%rdi),%edx
  401c68:	89 c0                	mov    %eax,%eax
		for (d=z-1; d>=a; d--) {
  401c6a:	48 83 ef 04          	sub    $0x4,%rdi
			uint64_t x = ((uint64_t)*d<<sh)+carry;
  401c6e:	48 d3 e2             	shl    %cl,%rdx
  401c71:	48 01 d0             	add    %rdx,%rax
			*d = x % 1000000000;
  401c74:	31 d2                	xor    %edx,%edx
  401c76:	49 f7 f3             	div    %r11
  401c79:	89 57 04             	mov    %edx,0x4(%rdi)
  401c7c:	eb e3                	jmp    401c61 <fmt_fp+0x4a7>
		if (carry) *--a = carry;
  401c7e:	85 c0                	test   %eax,%eax
  401c80:	74 14                	je     401c96 <fmt_fp+0x4dc>
  401c82:	89 45 fc             	mov    %eax,-0x4(%rbp)
  401c85:	48 83 ed 04          	sub    $0x4,%rbp
  401c89:	eb 0b                	jmp    401c96 <fmt_fp+0x4dc>
		while (z>a && !z[-1]) z--;
  401c8b:	41 83 7e fc 00       	cmpl   $0x0,-0x4(%r14)
  401c90:	75 09                	jne    401c9b <fmt_fp+0x4e1>
  401c92:	49 83 ee 04          	sub    $0x4,%r14
  401c96:	49 39 ee             	cmp    %rbp,%r14
  401c99:	77 f0                	ja     401c8b <fmt_fp+0x4d1>
		e2-=sh;
  401c9b:	29 ce                	sub    %ecx,%esi
  401c9d:	b0 01                	mov    $0x1,%al
  401c9f:	eb ad                	jmp    401c4e <fmt_fp+0x494>
  401ca1:	84 c0                	test   %al,%al
  401ca3:	74 04                	je     401ca9 <fmt_fp+0x4ef>
  401ca5:	89 74 24 68          	mov    %esi,0x68(%rsp)
		int sh=MIN(9,-e2), need=1+(p+LDBL_MANT_DIG/3U+8)/9;
  401ca9:	8d 43 1d             	lea    0x1d(%rbx),%eax
  401cac:	b9 09 00 00 00       	mov    $0x9,%ecx
  401cb1:	31 d2                	xor    %edx,%edx
  401cb3:	f7 f1                	div    %ecx
		if (z-b > need) z = b+need;
  401cb5:	31 d2                	xor    %edx,%edx
  401cb7:	44 8d 58 01          	lea    0x1(%rax),%r11d
  401cbb:	8b 44 24 68          	mov    0x68(%rsp),%eax
  401cbf:	4e 8d 14 9d 00 00 00 	lea    0x0(,%r11,4),%r10
  401cc6:	00 
	while (e2<0) {
  401cc7:	85 c0                	test   %eax,%eax
  401cc9:	0f 89 95 00 00 00    	jns    401d64 <fmt_fp+0x5aa>
		int sh=MIN(9,-e2), need=1+(p+LDBL_MANT_DIG/3U+8)/9;
  401ccf:	89 c1                	mov    %eax,%ecx
  401cd1:	bf 09 00 00 00       	mov    $0x9,%edi
			uint32_t rm = *d & (1<<sh)-1;
  401cd6:	41 b8 01 00 00 00    	mov    $0x1,%r8d
		int sh=MIN(9,-e2), need=1+(p+LDBL_MANT_DIG/3U+8)/9;
  401cdc:	f7 d9                	neg    %ecx
  401cde:	83 f8 f7             	cmp    $0xfffffff7,%eax
		for (d=a; d<z; d++) {
  401ce1:	48 89 ea             	mov    %rbp,%rdx
		int sh=MIN(9,-e2), need=1+(p+LDBL_MANT_DIG/3U+8)/9;
  401ce4:	0f 4c cf             	cmovl  %edi,%ecx
			uint32_t rm = *d & (1<<sh)-1;
  401ce7:	41 d3 e0             	shl    %cl,%r8d
  401cea:	41 8d 70 ff          	lea    -0x1(%r8),%esi
  401cee:	89 74 24 4c          	mov    %esi,0x4c(%rsp)
			carry = (1000000000>>sh) * rm;
  401cf2:	be 00 ca 9a 3b       	mov    $0x3b9aca00,%esi
  401cf7:	d3 fe                	sar    %cl,%esi
  401cf9:	89 74 24 20          	mov    %esi,0x20(%rsp)
		uint32_t carry=0, *b;
  401cfd:	31 f6                	xor    %esi,%esi
		for (d=a; d<z; d++) {
  401cff:	4c 39 f2             	cmp    %r14,%rdx
  401d02:	73 1f                	jae    401d23 <fmt_fp+0x569>
			uint32_t rm = *d & (1<<sh)-1;
  401d04:	8b 3a                	mov    (%rdx),%edi
		for (d=a; d<z; d++) {
  401d06:	48 83 c2 04          	add    $0x4,%rdx
			*d = (*d>>sh) + carry;
  401d0a:	41 89 f8             	mov    %edi,%r8d
  401d0d:	41 d3 e8             	shr    %cl,%r8d
  401d10:	44 01 c6             	add    %r8d,%esi
  401d13:	89 72 fc             	mov    %esi,-0x4(%rdx)
			uint32_t rm = *d & (1<<sh)-1;
  401d16:	8b 74 24 4c          	mov    0x4c(%rsp),%esi
  401d1a:	21 fe                	and    %edi,%esi
			carry = (1000000000>>sh) * rm;
  401d1c:	0f af 74 24 20       	imul   0x20(%rsp),%esi
  401d21:	eb dc                	jmp    401cff <fmt_fp+0x545>
		if (!*a) a++;
  401d23:	83 7d 00 00          	cmpl   $0x0,0x0(%rbp)
  401d27:	48 8d 55 04          	lea    0x4(%rbp),%rdx
  401d2b:	48 0f 44 ea          	cmove  %rdx,%rbp
		if (carry) *z++ = carry;
  401d2f:	85 f6                	test   %esi,%esi
  401d31:	74 07                	je     401d3a <fmt_fp+0x580>
  401d33:	41 89 36             	mov    %esi,(%r14)
  401d36:	49 83 c6 04          	add    $0x4,%r14
		b = (t|32)=='f' ? r : a;
  401d3a:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
  401d3f:	41 83 f9 66          	cmp    $0x66,%r9d
		if (z-b > need) z = b+need;
  401d43:	4c 89 f6             	mov    %r14,%rsi
		b = (t|32)=='f' ? r : a;
  401d46:	48 0f 45 d5          	cmovne %rbp,%rdx
		if (z-b > need) z = b+need;
  401d4a:	48 29 d6             	sub    %rdx,%rsi
  401d4d:	4c 01 d2             	add    %r10,%rdx
  401d50:	48 c1 fe 02          	sar    $0x2,%rsi
  401d54:	4c 39 de             	cmp    %r11,%rsi
  401d57:	4c 0f 4f f2          	cmovg  %rdx,%r14
		e2+=sh;
  401d5b:	01 c8                	add    %ecx,%eax
  401d5d:	b2 01                	mov    $0x1,%dl
  401d5f:	e9 63 ff ff ff       	jmpq   401cc7 <fmt_fp+0x50d>
  401d64:	84 d2                	test   %dl,%dl
  401d66:	74 04                	je     401d6c <fmt_fp+0x5b2>
  401d68:	89 44 24 68          	mov    %eax,0x68(%rsp)
	else e=0;
  401d6c:	45 31 c0             	xor    %r8d,%r8d
	if (a<z) for (i=10, e=9*(r-a); *a>=i; i*=10, e++);
  401d6f:	4c 39 f5             	cmp    %r14,%rbp
  401d72:	73 24                	jae    401d98 <fmt_fp+0x5de>
  401d74:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
  401d79:	8b 55 00             	mov    0x0(%rbp),%edx
  401d7c:	b8 0a 00 00 00       	mov    $0xa,%eax
  401d81:	49 29 e8             	sub    %rbp,%r8
  401d84:	49 c1 f8 02          	sar    $0x2,%r8
  401d88:	47 8d 04 c0          	lea    (%r8,%r8,8),%r8d
  401d8c:	39 c2                	cmp    %eax,%edx
  401d8e:	72 08                	jb     401d98 <fmt_fp+0x5de>
  401d90:	6b c0 0a             	imul   $0xa,%eax,%eax
  401d93:	41 ff c0             	inc    %r8d
  401d96:	eb f4                	jmp    401d8c <fmt_fp+0x5d2>
	j = p - ((t|32)!='f')*e - ((t|32)=='g' && p);
  401d98:	31 c0                	xor    %eax,%eax
  401d9a:	41 83 f9 66          	cmp    $0x66,%r9d
  401d9e:	89 df                	mov    %ebx,%edi
  401da0:	0f 95 c0             	setne  %al
  401da3:	41 0f af c0          	imul   %r8d,%eax
  401da7:	29 c7                	sub    %eax,%edi
  401da9:	41 83 f9 67          	cmp    $0x67,%r9d
  401dad:	0f 94 c2             	sete   %dl
  401db0:	31 c9                	xor    %ecx,%ecx
  401db2:	85 db                	test   %ebx,%ebx
  401db4:	0f 95 c1             	setne  %cl
  401db7:	89 f8                	mov    %edi,%eax
  401db9:	21 d1                	and    %edx,%ecx
	if (j < 9*(z-r-1)) {
  401dbb:	4c 89 f2             	mov    %r14,%rdx
  401dbe:	48 2b 54 24 10       	sub    0x10(%rsp),%rdx
	j = p - ((t|32)!='f')*e - ((t|32)=='g' && p);
  401dc3:	29 c8                	sub    %ecx,%eax
	if (j < 9*(z-r-1)) {
  401dc5:	48 63 c8             	movslq %eax,%rcx
  401dc8:	48 c1 fa 02          	sar    $0x2,%rdx
  401dcc:	48 ff ca             	dec    %rdx
  401dcf:	48 8d 14 d2          	lea    (%rdx,%rdx,8),%rdx
  401dd3:	48 39 d1             	cmp    %rdx,%rcx
  401dd6:	0f 8d 30 01 00 00    	jge    401f0c <fmt_fp+0x752>
		d = r + 1 + ((j+9*LDBL_MAX_EXP)/9 - LDBL_MAX_EXP);
  401ddc:	05 00 40 02 00       	add    $0x24000,%eax
  401de1:	b9 09 00 00 00       	mov    $0x9,%ecx
  401de6:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  401deb:	99                   	cltd   
  401dec:	f7 f9                	idiv   %ecx
  401dee:	48 98                	cltq   
  401df0:	48 8d 8c 86 04 00 ff 	lea    -0xfffc(%rsi,%rax,4),%rcx
  401df7:	ff 
		for (i=10, j++; j<9; i*=10, j++);
  401df8:	8d 42 01             	lea    0x1(%rdx),%eax
  401dfb:	be 0a 00 00 00       	mov    $0xa,%esi
  401e00:	83 f8 09             	cmp    $0x9,%eax
  401e03:	74 07                	je     401e0c <fmt_fp+0x652>
  401e05:	6b f6 0a             	imul   $0xa,%esi,%esi
  401e08:	ff c0                	inc    %eax
  401e0a:	eb f4                	jmp    401e00 <fmt_fp+0x646>
		x = *d % i;
  401e0c:	8b 39                	mov    (%rcx),%edi
  401e0e:	31 d2                	xor    %edx,%edx
  401e10:	89 f8                	mov    %edi,%eax
  401e12:	f7 f6                	div    %esi
		if (x || d+1!=z) {
  401e14:	85 d2                	test   %edx,%edx
		x = *d % i;
  401e16:	41 89 d3             	mov    %edx,%r11d
		if (x || d+1!=z) {
  401e19:	75 0d                	jne    401e28 <fmt_fp+0x66e>
  401e1b:	48 8d 41 04          	lea    0x4(%rcx),%rax
  401e1f:	49 39 c6             	cmp    %rax,%r14
  401e22:	0f 84 cc 00 00 00    	je     401ef4 <fmt_fp+0x73a>
			if ((*d/i & 1) || (i==1000000000 && d>a && (d[-1]&1)))
  401e28:	31 d2                	xor    %edx,%edx
  401e2a:	89 f8                	mov    %edi,%eax
  401e2c:	f7 f6                	div    %esi
  401e2e:	a8 01                	test   $0x1,%al
  401e30:	75 13                	jne    401e45 <fmt_fp+0x68b>
  401e32:	81 fe 00 ca 9a 3b    	cmp    $0x3b9aca00,%esi
  401e38:	75 13                	jne    401e4d <fmt_fp+0x693>
  401e3a:	48 39 cd             	cmp    %rcx,%rbp
  401e3d:	73 0e                	jae    401e4d <fmt_fp+0x693>
  401e3f:	f6 41 fc 01          	testb  $0x1,-0x4(%rcx)
  401e43:	74 08                	je     401e4d <fmt_fp+0x693>
				round += 2;
  401e45:	db 2d 85 44 00 00    	fldt   0x4485(%rip)        # 4062d0 <states+0x1f0>
  401e4b:	eb 06                	jmp    401e53 <fmt_fp+0x699>
			long double round = 2/LDBL_EPSILON;
  401e4d:	d9 05 61 44 00 00    	flds   0x4461(%rip)        # 4062b4 <states+0x1d4>
			if (x<i/2) small=0x0.8p0;
  401e53:	89 f0                	mov    %esi,%eax
  401e55:	d1 f8                	sar    %eax
  401e57:	41 39 c3             	cmp    %eax,%r11d
  401e5a:	72 0f                	jb     401e6b <fmt_fp+0x6b1>
			else if (x==i/2 && d+1==z) small=0x1.0p0;
  401e5c:	75 17                	jne    401e75 <fmt_fp+0x6bb>
  401e5e:	48 8d 41 04          	lea    0x4(%rcx),%rax
  401e62:	d9 e8                	fld1   
  401e64:	49 39 c6             	cmp    %rax,%r14
  401e67:	75 0a                	jne    401e73 <fmt_fp+0x6b9>
  401e69:	eb 10                	jmp    401e7b <fmt_fp+0x6c1>
			if (x<i/2) small=0x0.8p0;
  401e6b:	d9 05 47 44 00 00    	flds   0x4447(%rip)        # 4062b8 <states+0x1d8>
  401e71:	eb 08                	jmp    401e7b <fmt_fp+0x6c1>
  401e73:	dd d8                	fstp   %st(0)
			else small=0x1.8p0;
  401e75:	d9 05 41 44 00 00    	flds   0x4441(%rip)        # 4062bc <states+0x1dc>
			if (pl && *prefix=='-') round*=-1, small*=-1;
  401e7b:	45 85 ed             	test   %r13d,%r13d
  401e7e:	74 12                	je     401e92 <fmt_fp+0x6d8>
  401e80:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  401e85:	80 38 2d             	cmpb   $0x2d,(%rax)
  401e88:	75 08                	jne    401e92 <fmt_fp+0x6d8>
  401e8a:	d9 c9                	fxch   %st(1)
  401e8c:	d9 e0                	fchs   
  401e8e:	d9 c9                	fxch   %st(1)
  401e90:	d9 e0                	fchs   
			if (round+small != round) {
  401e92:	d8 c1                	fadd   %st(1),%st
  401e94:	d9 c9                	fxch   %st(1)
			*d -= x;
  401e96:	44 29 df             	sub    %r11d,%edi
			if (round+small != round) {
  401e99:	df e9                	fucomip %st(1),%st
  401e9b:	dd d8                	fstp   %st(0)
  401e9d:	7a 06                	jp     401ea5 <fmt_fp+0x6eb>
  401e9f:	75 04                	jne    401ea5 <fmt_fp+0x6eb>
			*d -= x;
  401ea1:	89 39                	mov    %edi,(%rcx)
  401ea3:	eb 4f                	jmp    401ef4 <fmt_fp+0x73a>
				*d = *d + i;
  401ea5:	01 fe                	add    %edi,%esi
  401ea7:	89 31                	mov    %esi,(%rcx)
				while (*d > 999999999) {
  401ea9:	81 39 ff c9 9a 3b    	cmpl   $0x3b9ac9ff,(%rcx)
  401eaf:	76 1f                	jbe    401ed0 <fmt_fp+0x716>
					*d--=0;
  401eb1:	48 83 e9 04          	sub    $0x4,%rcx
  401eb5:	c7 41 04 00 00 00 00 	movl   $0x0,0x4(%rcx)
					if (d<a) *--a=0;
  401ebc:	48 39 cd             	cmp    %rcx,%rbp
  401ebf:	76 0b                	jbe    401ecc <fmt_fp+0x712>
  401ec1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  401ec8:	48 83 ed 04          	sub    $0x4,%rbp
					(*d)++;
  401ecc:	ff 01                	incl   (%rcx)
  401ece:	eb d9                	jmp    401ea9 <fmt_fp+0x6ef>
				for (i=10, e=9*(r-a); *a>=i; i*=10, e++);
  401ed0:	4c 8b 44 24 10       	mov    0x10(%rsp),%r8
  401ed5:	8b 55 00             	mov    0x0(%rbp),%edx
  401ed8:	b8 0a 00 00 00       	mov    $0xa,%eax
  401edd:	49 29 e8             	sub    %rbp,%r8
  401ee0:	49 c1 f8 02          	sar    $0x2,%r8
  401ee4:	47 8d 04 c0          	lea    (%r8,%r8,8),%r8d
  401ee8:	39 c2                	cmp    %eax,%edx
  401eea:	72 08                	jb     401ef4 <fmt_fp+0x73a>
  401eec:	6b c0 0a             	imul   $0xa,%eax,%eax
  401eef:	41 ff c0             	inc    %r8d
  401ef2:	eb f4                	jmp    401ee8 <fmt_fp+0x72e>
		if (z>d+1) z=d+1;
  401ef4:	48 83 c1 04          	add    $0x4,%rcx
  401ef8:	49 39 ce             	cmp    %rcx,%r14
  401efb:	4c 0f 47 f1          	cmova  %rcx,%r14
  401eff:	eb 0b                	jmp    401f0c <fmt_fp+0x752>
	for (; z>a && !z[-1]; z--);
  401f01:	41 83 7e fc 00       	cmpl   $0x0,-0x4(%r14)
  401f06:	75 09                	jne    401f11 <fmt_fp+0x757>
  401f08:	49 83 ee 04          	sub    $0x4,%r14
  401f0c:	49 39 ee             	cmp    %rbp,%r14
  401f0f:	77 f0                	ja     401f01 <fmt_fp+0x747>
	if ((t|32)=='g') {
  401f11:	41 83 f9 67          	cmp    $0x67,%r9d
  401f15:	0f 85 c3 00 00 00    	jne    401fde <fmt_fp+0x824>
		if (!p) p++;
  401f1b:	85 db                	test   %ebx,%ebx
  401f1d:	b8 01 00 00 00       	mov    $0x1,%eax
  401f22:	0f 44 d8             	cmove  %eax,%ebx
		if (p>e && e>=-4) {
  401f25:	44 39 c3             	cmp    %r8d,%ebx
  401f28:	7e 11                	jle    401f3b <fmt_fp+0x781>
  401f2a:	41 83 f8 fc          	cmp    $0xfffffffc,%r8d
  401f2e:	7c 0b                	jl     401f3b <fmt_fp+0x781>
			p-=e+1;
  401f30:	41 8d 40 01          	lea    0x1(%r8),%eax
			t--;
  401f34:	41 ff cf             	dec    %r15d
			p-=e+1;
  401f37:	29 c3                	sub    %eax,%ebx
  401f39:	eb 06                	jmp    401f41 <fmt_fp+0x787>
			t-=2;
  401f3b:	41 83 ef 02          	sub    $0x2,%r15d
			p--;
  401f3f:	ff cb                	dec    %ebx
		if (!(fl&ALT_FORM)) {
  401f41:	f6 44 24 0c 08       	testb  $0x8,0xc(%rsp)
  401f46:	0f 85 92 00 00 00    	jne    401fde <fmt_fp+0x824>
			if (z>a && z[-1]) for (i=10, j=0; z[-1]%i==0; i*=10, j++);
  401f4c:	49 39 ee             	cmp    %rbp,%r14
			else j=9;
  401f4f:	b9 09 00 00 00       	mov    $0x9,%ecx
			if (z>a && z[-1]) for (i=10, j=0; z[-1]%i==0; i*=10, j++);
  401f54:	76 20                	jbe    401f76 <fmt_fp+0x7bc>
  401f56:	41 8b 7e fc          	mov    -0x4(%r14),%edi
  401f5a:	85 ff                	test   %edi,%edi
  401f5c:	74 18                	je     401f76 <fmt_fp+0x7bc>
  401f5e:	31 c9                	xor    %ecx,%ecx
  401f60:	be 0a 00 00 00       	mov    $0xa,%esi
  401f65:	31 d2                	xor    %edx,%edx
  401f67:	89 f8                	mov    %edi,%eax
  401f69:	f7 f6                	div    %esi
  401f6b:	85 d2                	test   %edx,%edx
  401f6d:	75 07                	jne    401f76 <fmt_fp+0x7bc>
  401f6f:	6b f6 0a             	imul   $0xa,%esi,%esi
  401f72:	ff c1                	inc    %ecx
  401f74:	eb ef                	jmp    401f65 <fmt_fp+0x7ab>
			if ((t|32)=='f')
  401f76:	44 89 f8             	mov    %r15d,%eax
  401f79:	48 63 d3             	movslq %ebx,%rdx
  401f7c:	48 63 c9             	movslq %ecx,%rcx
  401f7f:	83 c8 20             	or     $0x20,%eax
  401f82:	83 f8 66             	cmp    $0x66,%eax
  401f85:	75 28                	jne    401faf <fmt_fp+0x7f5>
				p = MIN(p,MAX(0,9*(z-r-1)-j));
  401f87:	4c 89 f3             	mov    %r14,%rbx
  401f8a:	48 2b 5c 24 10       	sub    0x10(%rsp),%rbx
  401f8f:	b8 00 00 00 00       	mov    $0x0,%eax
  401f94:	48 c1 fb 02          	sar    $0x2,%rbx
  401f98:	48 ff cb             	dec    %rbx
  401f9b:	48 8d 1c db          	lea    (%rbx,%rbx,8),%rbx
  401f9f:	48 29 cb             	sub    %rcx,%rbx
  401fa2:	48 0f 48 d8          	cmovs  %rax,%rbx
  401fa6:	48 39 d3             	cmp    %rdx,%rbx
  401fa9:	48 0f 4f da          	cmovg  %rdx,%rbx
  401fad:	eb 2f                	jmp    401fde <fmt_fp+0x824>
				p = MIN(p,MAX(0,9*(z-r-1)+e-j));
  401faf:	4c 89 f0             	mov    %r14,%rax
  401fb2:	48 2b 44 24 10       	sub    0x10(%rsp),%rax
  401fb7:	49 63 d8             	movslq %r8d,%rbx
  401fba:	48 c1 f8 02          	sar    $0x2,%rax
  401fbe:	48 ff c8             	dec    %rax
  401fc1:	48 8d 04 c0          	lea    (%rax,%rax,8),%rax
  401fc5:	48 01 d8             	add    %rbx,%rax
  401fc8:	48 29 c8             	sub    %rcx,%rax
  401fcb:	b9 00 00 00 00       	mov    $0x0,%ecx
  401fd0:	48 0f 48 c1          	cmovs  %rcx,%rax
  401fd4:	48 39 d0             	cmp    %rdx,%rax
  401fd7:	48 0f 4e d0          	cmovle %rax,%rdx
  401fdb:	48 89 d3             	mov    %rdx,%rbx
	if (p > INT_MAX-1-(p || (fl&ALT_FORM)))
  401fde:	85 db                	test   %ebx,%ebx
  401fe0:	b0 01                	mov    $0x1,%al
  401fe2:	75 0a                	jne    401fee <fmt_fp+0x834>
  401fe4:	8b 44 24 0c          	mov    0xc(%rsp),%eax
  401fe8:	c1 e8 03             	shr    $0x3,%eax
  401feb:	83 e0 01             	and    $0x1,%eax
  401fee:	0f b6 c0             	movzbl %al,%eax
  401ff1:	ba fe ff ff 7f       	mov    $0x7ffffffe,%edx
  401ff6:	29 c2                	sub    %eax,%edx
  401ff8:	39 d3                	cmp    %edx,%ebx
  401ffa:	0f 8f b7 fa ff ff    	jg     401ab7 <fmt_fp+0x2fd>
	l = 1 + p + (p || (fl&ALT_FORM));
  402000:	44 8d 4c 18 01       	lea    0x1(%rax,%rbx,1),%r9d
	if ((t|32)=='f') {
  402005:	44 89 f8             	mov    %r15d,%eax
  402008:	83 c8 20             	or     $0x20,%eax
  40200b:	83 f8 66             	cmp    $0x66,%eax
  40200e:	89 44 24 4c          	mov    %eax,0x4c(%rsp)
  402012:	75 1e                	jne    402032 <fmt_fp+0x878>
		if (e > INT_MAX-l) return -1;
  402014:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
  402019:	44 29 c8             	sub    %r9d,%eax
  40201c:	41 39 c0             	cmp    %eax,%r8d
  40201f:	0f 8f 92 fa ff ff    	jg     401ab7 <fmt_fp+0x2fd>
		if (e>0) l+=e;
  402025:	43 8d 04 01          	lea    (%r9,%r8,1),%eax
  402029:	45 85 c0             	test   %r8d,%r8d
  40202c:	44 0f 4f c8          	cmovg  %eax,%r9d
  402030:	eb 66                	jmp    402098 <fmt_fp+0x8de>
		estr=fmt_u(e<0 ? -e : e, ebuf);
  402032:	44 89 c0             	mov    %r8d,%eax
  402035:	4c 8d 5c 24 7b       	lea    0x7b(%rsp),%r11
  40203a:	c1 f8 1f             	sar    $0x1f,%eax
  40203d:	89 c7                	mov    %eax,%edi
  40203f:	4c 89 de             	mov    %r11,%rsi
  402042:	44 31 c7             	xor    %r8d,%edi
  402045:	29 c7                	sub    %eax,%edi
  402047:	48 63 ff             	movslq %edi,%rdi
  40204a:	e8 7a f6 ff ff       	callq  4016c9 <fmt_u>
		while(ebuf-estr<2) *--estr='0';
  40204f:	4c 89 da             	mov    %r11,%rdx
  402052:	48 29 c2             	sub    %rax,%rdx
  402055:	48 ff ca             	dec    %rdx
  402058:	7f 08                	jg     402062 <fmt_fp+0x8a8>
  40205a:	48 ff c8             	dec    %rax
  40205d:	c6 00 30             	movb   $0x30,(%rax)
  402060:	eb ed                	jmp    40204f <fmt_fp+0x895>
		*--estr = (e<0 ? '-' : '+');
  402062:	41 c1 f8 1f          	sar    $0x1f,%r8d
		*--estr = t;
  402066:	48 8d 78 fe          	lea    -0x2(%rax),%rdi
  40206a:	44 88 78 fe          	mov    %r15b,-0x2(%rax)
		*--estr = (e<0 ? '-' : '+');
  40206e:	41 83 e0 02          	and    $0x2,%r8d
  402072:	41 83 c0 2b          	add    $0x2b,%r8d
		if (ebuf-estr > INT_MAX-l) return -1;
  402076:	49 29 fb             	sub    %rdi,%r11
		*--estr = t;
  402079:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
		*--estr = (e<0 ? '-' : '+');
  40207e:	44 88 40 ff          	mov    %r8b,-0x1(%rax)
		if (ebuf-estr > INT_MAX-l) return -1;
  402082:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
  402087:	44 29 c8             	sub    %r9d,%eax
  40208a:	48 98                	cltq   
  40208c:	49 39 c3             	cmp    %rax,%r11
  40208f:	0f 8f 22 fa ff ff    	jg     401ab7 <fmt_fp+0x2fd>
		l += ebuf-estr;
  402095:	45 01 d9             	add    %r11d,%r9d
	if (l > INT_MAX-pl) return -1;
  402098:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
  40209d:	44 29 e8             	sub    %r13d,%eax
  4020a0:	41 39 c1             	cmp    %eax,%r9d
  4020a3:	0f 8f 0e fa ff ff    	jg     401ab7 <fmt_fp+0x2fd>
	pad(f, ' ', w, pl+l, fl);
  4020a9:	43 8d 04 29          	lea    (%r9,%r13,1),%eax
  4020ad:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  4020b2:	8b 54 24 48          	mov    0x48(%rsp),%edx
  4020b6:	be 20 00 00 00       	mov    $0x20,%esi
  4020bb:	4c 89 e7             	mov    %r12,%rdi
  4020be:	89 c1                	mov    %eax,%ecx
  4020c0:	89 44 24 20          	mov    %eax,0x20(%rsp)
  4020c4:	e8 72 f6 ff ff       	callq  40173b <pad>
	out(f, prefix, pl);
  4020c9:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  4020ce:	49 63 d5             	movslq %r13d,%rdx
  4020d1:	4c 89 e7             	mov    %r12,%rdi
  4020d4:	e8 4b f6 ff ff       	callq  401724 <out>
	pad(f, '0', w, pl+l, fl^ZERO_PAD);
  4020d9:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  4020de:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
  4020e2:	be 30 00 00 00       	mov    $0x30,%esi
  4020e7:	8b 54 24 48          	mov    0x48(%rsp),%edx
  4020eb:	4c 89 e7             	mov    %r12,%rdi
  4020ee:	41 81 f0 00 00 01 00 	xor    $0x10000,%r8d
  4020f5:	e8 41 f6 ff ff       	callq  40173b <pad>
	if ((t|32)=='f') {
  4020fa:	83 7c 24 4c 66       	cmpl   $0x66,0x4c(%rsp)
  4020ff:	0f 85 eb 00 00 00    	jne    4021f0 <fmt_fp+0xa36>
  402105:	48 3b 6c 24 10       	cmp    0x10(%rsp),%rbp
			char *s = fmt_u(*d, buf+9);
  40210a:	4c 8d 7c 24 7b       	lea    0x7b(%rsp),%r15
  40210f:	48 0f 47 6c 24 10    	cmova  0x10(%rsp),%rbp
		for (d=a; d<=r; d++) {
  402115:	49 89 ed             	mov    %rbp,%r13
  402118:	4c 3b 6c 24 10       	cmp    0x10(%rsp),%r13
  40211d:	77 4b                	ja     40216a <fmt_fp+0x9b0>
			char *s = fmt_u(*d, buf+9);
  40211f:	41 8b 7d 00          	mov    0x0(%r13),%edi
  402123:	4d 8d 47 09          	lea    0x9(%r15),%r8
  402127:	4c 89 c6             	mov    %r8,%rsi
  40212a:	e8 9a f5 ff ff       	callq  4016c9 <fmt_u>
			if (d!=a) while (s>buf) *--s='0';
  40212f:	49 39 ed             	cmp    %rbp,%r13
  402132:	74 0d                	je     402141 <fmt_fp+0x987>
  402134:	4c 39 f8             	cmp    %r15,%rax
  402137:	76 19                	jbe    402152 <fmt_fp+0x998>
  402139:	48 ff c8             	dec    %rax
  40213c:	c6 00 30             	movb   $0x30,(%rax)
  40213f:	eb f3                	jmp    402134 <fmt_fp+0x97a>
			else if (s==buf+9) *--s='0';
  402141:	4c 39 c0             	cmp    %r8,%rax
  402144:	75 0c                	jne    402152 <fmt_fp+0x998>
  402146:	49 8d 47 08          	lea    0x8(%r15),%rax
  40214a:	c6 84 24 83 00 00 00 	movb   $0x30,0x83(%rsp)
  402151:	30 
			out(f, s, buf+9-s);
  402152:	49 8d 57 09          	lea    0x9(%r15),%rdx
  402156:	48 89 c6             	mov    %rax,%rsi
  402159:	4c 89 e7             	mov    %r12,%rdi
		for (d=a; d<=r; d++) {
  40215c:	49 83 c5 04          	add    $0x4,%r13
			out(f, s, buf+9-s);
  402160:	48 29 c2             	sub    %rax,%rdx
  402163:	e8 bc f5 ff ff       	callq  401724 <out>
  402168:	eb ae                	jmp    402118 <fmt_fp+0x95e>
		if (p || (fl&ALT_FORM)) out(f, ".", 1);
  40216a:	85 db                	test   %ebx,%ebx
  40216c:	75 07                	jne    402175 <fmt_fp+0x9bb>
  40216e:	f6 44 24 0c 08       	testb  $0x8,0xc(%rsp)
  402173:	74 5e                	je     4021d3 <fmt_fp+0xa19>
  402175:	48 8d 35 2f 3e 00 00 	lea    0x3e2f(%rip),%rsi        # 405fab <_fini+0x618>
			char *s = fmt_u(*d, buf+9);
  40217c:	48 8d 6c 24 7b       	lea    0x7b(%rsp),%rbp
		if (p || (fl&ALT_FORM)) out(f, ".", 1);
  402181:	ba 01 00 00 00       	mov    $0x1,%edx
  402186:	4c 89 e7             	mov    %r12,%rdi
  402189:	e8 96 f5 ff ff       	callq  401724 <out>
		for (; d<z && p>0; d++, p-=9) {
  40218e:	4d 39 f5             	cmp    %r14,%r13
  402191:	73 40                	jae    4021d3 <fmt_fp+0xa19>
  402193:	85 db                	test   %ebx,%ebx
  402195:	7e 3c                	jle    4021d3 <fmt_fp+0xa19>
			char *s = fmt_u(*d, buf+9);
  402197:	41 8b 7d 00          	mov    0x0(%r13),%edi
  40219b:	48 8d 75 09          	lea    0x9(%rbp),%rsi
  40219f:	e8 25 f5 ff ff       	callq  4016c9 <fmt_u>
			while (s>buf) *--s='0';
  4021a4:	48 39 e8             	cmp    %rbp,%rax
  4021a7:	76 08                	jbe    4021b1 <fmt_fp+0x9f7>
  4021a9:	48 ff c8             	dec    %rax
  4021ac:	c6 00 30             	movb   $0x30,(%rax)
  4021af:	eb f3                	jmp    4021a4 <fmt_fp+0x9ea>
			out(f, s, MIN(9,p));
  4021b1:	83 fb 09             	cmp    $0x9,%ebx
  4021b4:	ba 09 00 00 00       	mov    $0x9,%edx
  4021b9:	48 89 c6             	mov    %rax,%rsi
  4021bc:	0f 4e d3             	cmovle %ebx,%edx
  4021bf:	4c 89 e7             	mov    %r12,%rdi
		for (; d<z && p>0; d++, p-=9) {
  4021c2:	49 83 c5 04          	add    $0x4,%r13
			out(f, s, MIN(9,p));
  4021c6:	48 63 d2             	movslq %edx,%rdx
		for (; d<z && p>0; d++, p-=9) {
  4021c9:	83 eb 09             	sub    $0x9,%ebx
			out(f, s, MIN(9,p));
  4021cc:	e8 53 f5 ff ff       	callq  401724 <out>
  4021d1:	eb bb                	jmp    40218e <fmt_fp+0x9d4>
		pad(f, '0', p+9, 9, 0);
  4021d3:	8d 53 09             	lea    0x9(%rbx),%edx
  4021d6:	45 31 c0             	xor    %r8d,%r8d
  4021d9:	b9 09 00 00 00       	mov    $0x9,%ecx
  4021de:	be 30 00 00 00       	mov    $0x30,%esi
  4021e3:	4c 89 e7             	mov    %r12,%rdi
  4021e6:	e8 50 f5 ff ff       	callq  40173b <pad>
  4021eb:	e9 04 01 00 00       	jmpq   4022f4 <fmt_fp+0xb3a>
		if (z<=a) z=a+1;
  4021f0:	48 8d 45 04          	lea    0x4(%rbp),%rax
  4021f4:	49 39 ee             	cmp    %rbp,%r14
			char *s = fmt_u(*d, buf+9);
  4021f7:	4c 8d 7c 24 7b       	lea    0x7b(%rsp),%r15
		for (d=a; d<z && p>=0; d++) {
  4021fc:	49 89 ed             	mov    %rbp,%r13
		if (z<=a) z=a+1;
  4021ff:	4c 0f 46 f0          	cmovbe %rax,%r14
		for (d=a; d<z && p>=0; d++) {
  402203:	4d 39 f5             	cmp    %r14,%r13
  402206:	0f 83 b9 00 00 00    	jae    4022c5 <fmt_fp+0xb0b>
  40220c:	89 d8                	mov    %ebx,%eax
  40220e:	83 e8 00             	sub    $0x0,%eax
  402211:	0f 88 ae 00 00 00    	js     4022c5 <fmt_fp+0xb0b>
			char *s = fmt_u(*d, buf+9);
  402217:	41 8b 7d 00          	mov    0x0(%r13),%edi
  40221b:	4d 8d 47 09          	lea    0x9(%r15),%r8
  40221f:	4c 89 c6             	mov    %r8,%rsi
  402222:	e8 a2 f4 ff ff       	callq  4016c9 <fmt_u>
			if (s==buf+9) *--s='0';
  402227:	4c 39 c0             	cmp    %r8,%rax
  40222a:	75 0c                	jne    402238 <fmt_fp+0xa7e>
  40222c:	49 8d 47 08          	lea    0x8(%r15),%rax
  402230:	c6 84 24 83 00 00 00 	movb   $0x30,0x83(%rsp)
  402237:	30 
			if (d!=a) while (s>buf) *--s='0';
  402238:	49 39 ed             	cmp    %rbp,%r13
  40223b:	48 89 c1             	mov    %rax,%rcx
  40223e:	74 0d                	je     40224d <fmt_fp+0xa93>
  402240:	4c 39 f9             	cmp    %r15,%rcx
  402243:	76 4f                	jbe    402294 <fmt_fp+0xada>
  402245:	48 ff c9             	dec    %rcx
  402248:	c6 01 30             	movb   $0x30,(%rcx)
  40224b:	eb f3                	jmp    402240 <fmt_fp+0xa86>
				out(f, s++, 1);
  40224d:	48 8d 48 01          	lea    0x1(%rax),%rcx
  402251:	ba 01 00 00 00       	mov    $0x1,%edx
  402256:	48 89 c6             	mov    %rax,%rsi
  402259:	4c 89 e7             	mov    %r12,%rdi
  40225c:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  402261:	e8 be f4 ff ff       	callq  401724 <out>
				if (p>0||(fl&ALT_FORM)) out(f, ".", 1);
  402266:	85 db                	test   %ebx,%ebx
  402268:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
  40226d:	75 07                	jne    402276 <fmt_fp+0xabc>
  40226f:	f6 44 24 0c 08       	testb  $0x8,0xc(%rsp)
  402274:	74 1e                	je     402294 <fmt_fp+0xada>
  402276:	48 8d 35 2e 3d 00 00 	lea    0x3d2e(%rip),%rsi        # 405fab <_fini+0x618>
  40227d:	ba 01 00 00 00       	mov    $0x1,%edx
  402282:	4c 89 e7             	mov    %r12,%rdi
  402285:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  40228a:	e8 95 f4 ff ff       	callq  401724 <out>
  40228f:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
			out(f, s, MIN(buf+9-s, p));
  402294:	49 8d 47 09          	lea    0x9(%r15),%rax
  402298:	48 63 d3             	movslq %ebx,%rdx
  40229b:	48 89 ce             	mov    %rcx,%rsi
  40229e:	4c 89 e7             	mov    %r12,%rdi
  4022a1:	48 29 c8             	sub    %rcx,%rax
  4022a4:	48 39 c2             	cmp    %rax,%rdx
  4022a7:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  4022ac:	48 0f 4f d0          	cmovg  %rax,%rdx
		for (d=a; d<z && p>=0; d++) {
  4022b0:	49 83 c5 04          	add    $0x4,%r13
			out(f, s, MIN(buf+9-s, p));
  4022b4:	e8 6b f4 ff ff       	callq  401724 <out>
			p -= buf+9-s;
  4022b9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  4022be:	29 c3                	sub    %eax,%ebx
  4022c0:	e9 3e ff ff ff       	jmpq   402203 <fmt_fp+0xa49>
		pad(f, '0', p+18, 18, 0);
  4022c5:	8d 53 12             	lea    0x12(%rbx),%edx
  4022c8:	be 30 00 00 00       	mov    $0x30,%esi
  4022cd:	4c 89 e7             	mov    %r12,%rdi
  4022d0:	45 31 c0             	xor    %r8d,%r8d
  4022d3:	b9 12 00 00 00       	mov    $0x12,%ecx
  4022d8:	e8 5e f4 ff ff       	callq  40173b <pad>
		out(f, estr, ebuf-estr);
  4022dd:	48 8d 54 24 7b       	lea    0x7b(%rsp),%rdx
  4022e2:	48 2b 54 24 30       	sub    0x30(%rsp),%rdx
  4022e7:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
  4022ec:	4c 89 e7             	mov    %r12,%rdi
  4022ef:	e8 30 f4 ff ff       	callq  401724 <out>
	pad(f, ' ', w, pl+l, fl^LEFT_ADJ);
  4022f4:	44 8b 44 24 0c       	mov    0xc(%rsp),%r8d
  4022f9:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
  4022fd:	be 20 00 00 00       	mov    $0x20,%esi
  402302:	8b 54 24 48          	mov    0x48(%rsp),%edx
  402306:	4c 89 e7             	mov    %r12,%rdi
  402309:	41 81 f0 00 20 00 00 	xor    $0x2000,%r8d
  402310:	e8 26 f4 ff ff       	callq  40173b <pad>
	return MAX(w, pl+l);
  402315:	8b 5c 24 20          	mov    0x20(%rsp),%ebx
  402319:	39 5c 24 48          	cmp    %ebx,0x48(%rsp)
  40231d:	89 d8                	mov    %ebx,%eax
  40231f:	0f 4d 44 24 48       	cmovge 0x48(%rsp),%eax
}
  402324:	48 81 c4 48 1d 00 00 	add    $0x1d48,%rsp
  40232b:	5b                   	pop    %rbx
  40232c:	5d                   	pop    %rbp
  40232d:	41 5c                	pop    %r12
  40232f:	41 5d                	pop    %r13
  402331:	41 5e                	pop    %r14
  402333:	41 5f                	pop    %r15
  402335:	c3                   	retq   

0000000000402336 <printf_core>:

static int printf_core(FILE *f, const char *fmt, va_list *ap, union arg *nl_arg, int *nl_type)
{
  402336:	41 57                	push   %r15
  402338:	41 56                	push   %r14
	unsigned l10n=0, fl;
	int w, p, xp;
	union arg arg;
	int argpos;
	unsigned st, ps;
	int cnt=0, l=0;
  40233a:	45 31 ff             	xor    %r15d,%r15d
{
  40233d:	41 55                	push   %r13
  40233f:	41 54                	push   %r12
  402341:	55                   	push   %rbp
  402342:	53                   	push   %rbx
	int cnt=0, l=0;
  402343:	31 db                	xor    %ebx,%ebx
{
  402345:	48 81 ec c8 00 00 00 	sub    $0xc8,%rsp
			wc[1] = 0;
			arg.p = wc;
			p = -1;
		case 'S':
			ws = arg.p;
			for (i=l=0; i<p && *ws && (l=wctomb(mb, *ws++))>=0 && l<=p-i; i+=l);
  40234c:	48 8d 44 24 6c       	lea    0x6c(%rsp),%rax
{
  402351:	48 89 3c 24          	mov    %rdi,(%rsp)
  402355:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
  40235a:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  40235f:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
			for (i=l=0; i<p && *ws && (l=wctomb(mb, *ws++))>=0 && l<=p-i; i+=l);
  402364:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
			arg.p = wc;
  402369:	48 8d 44 24 78       	lea    0x78(%rsp),%rax
	char *a, *z, *s=(char *)fmt;
  40236e:	48 89 74 24 70       	mov    %rsi,0x70(%rsp)
	unsigned l10n=0, fl;
  402373:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%rsp)
  40237a:	00 
			arg.p = wc;
  40237b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
		z = buf + sizeof(buf);
  402380:	48 8d 84 24 95 00 00 	lea    0x95(%rsp),%rax
  402387:	00 
  402388:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
			else if (f) pop_arg(&arg, st, ap);
  40238d:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  402394:	00 
  402395:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
		if (l > INT_MAX - cnt) goto overflow;
  40239a:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
  40239f:	44 29 f8             	sub    %r15d,%eax
  4023a2:	39 c3                	cmp    %eax,%ebx
  4023a4:	0f 8f b2 08 00 00    	jg     402c5c <printf_core+0x926>
		if (!*s) break;
  4023aa:	4c 8b 74 24 70       	mov    0x70(%rsp),%r14
		cnt += l;
  4023af:	41 01 df             	add    %ebx,%r15d
		if (!*s) break;
  4023b2:	41 80 3e 00          	cmpb   $0x0,(%r14)
  4023b6:	0f 84 2f 08 00 00    	je     402beb <printf_core+0x8b5>
		for (a=s; *s && *s!='%'; s++);
  4023bc:	4c 8b 6c 24 70       	mov    0x70(%rsp),%r13
  4023c1:	41 8a 45 00          	mov    0x0(%r13),%al
  4023c5:	84 c0                	test   %al,%al
  4023c7:	74 20                	je     4023e9 <printf_core+0xb3>
  4023c9:	3c 25                	cmp    $0x25,%al
  4023cb:	74 1c                	je     4023e9 <printf_core+0xb3>
  4023cd:	49 ff c5             	inc    %r13
  4023d0:	4c 89 6c 24 70       	mov    %r13,0x70(%rsp)
  4023d5:	eb e5                	jmp    4023bc <printf_core+0x86>
		for (z=s; s[0]=='%' && s[1]=='%'; z++, s+=2);
  4023d7:	80 78 01 25          	cmpb   $0x25,0x1(%rax)
  4023db:	75 16                	jne    4023f3 <printf_core+0xbd>
  4023dd:	48 83 c0 02          	add    $0x2,%rax
  4023e1:	49 ff c5             	inc    %r13
  4023e4:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  4023e9:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  4023ee:	80 38 25             	cmpb   $0x25,(%rax)
  4023f1:	74 e4                	je     4023d7 <printf_core+0xa1>
		if (z-a > INT_MAX-cnt) goto overflow;
  4023f3:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
  4023f8:	4d 29 f5             	sub    %r14,%r13
  4023fb:	44 29 f8             	sub    %r15d,%eax
  4023fe:	89 44 24 34          	mov    %eax,0x34(%rsp)
  402402:	48 98                	cltq   
  402404:	49 39 c5             	cmp    %rax,%r13
  402407:	0f 8f 4f 08 00 00    	jg     402c5c <printf_core+0x926>
		if (f) out(f, a, l);
  40240d:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
		l = z-a;
  402412:	44 89 eb             	mov    %r13d,%ebx
		if (f) out(f, a, l);
  402415:	74 0f                	je     402426 <printf_core+0xf0>
  402417:	48 8b 3c 24          	mov    (%rsp),%rdi
  40241b:	49 63 d5             	movslq %r13d,%rdx
  40241e:	4c 89 f6             	mov    %r14,%rsi
  402421:	e8 fe f2 ff ff       	callq  401724 <out>
		if (l) continue;
  402426:	45 85 ed             	test   %r13d,%r13d
  402429:	0f 85 6b ff ff ff    	jne    40239a <printf_core+0x64>
		if (isdigit(s[1]) && s[2]=='$') {
  40242f:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  402434:	44 0f be 58 01       	movsbl 0x1(%rax),%r11d
  402439:	41 83 eb 30          	sub    $0x30,%r11d
  40243d:	41 83 fb 09          	cmp    $0x9,%r11d
  402441:	77 19                	ja     40245c <printf_core+0x126>
  402443:	80 78 02 24          	cmpb   $0x24,0x2(%rax)
  402447:	75 13                	jne    40245c <printf_core+0x126>
			s+=3;
  402449:	48 83 c0 03          	add    $0x3,%rax
			l10n=1;
  40244d:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%rsp)
  402454:	00 
			s+=3;
  402455:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  40245a:	eb 0c                	jmp    402468 <printf_core+0x132>
			s++;
  40245c:	48 ff c0             	inc    %rax
			argpos = -1;
  40245f:	41 83 cb ff          	or     $0xffffffff,%r11d
			s++;
  402463:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
		for (fl=0; (unsigned)*s-' '<32 && (FLAGMASK&(1U<<*s-' ')); s++)
  402468:	31 ed                	xor    %ebp,%ebp
  40246a:	be 89 28 01 00       	mov    $0x12889,%esi
			fl |= 1U<<*s-' ';
  40246f:	bf 01 00 00 00       	mov    $0x1,%edi
		for (fl=0; (unsigned)*s-' '<32 && (FLAGMASK&(1U<<*s-' ')); s++)
  402474:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  402479:	0f be 08             	movsbl (%rax),%ecx
  40247c:	89 ca                	mov    %ecx,%edx
  40247e:	83 e9 20             	sub    $0x20,%ecx
  402481:	83 f9 1f             	cmp    $0x1f,%ecx
  402484:	76 0b                	jbe    402491 <printf_core+0x15b>
		if (*s=='*') {
  402486:	80 fa 2a             	cmp    $0x2a,%dl
  402489:	0f 85 cc 00 00 00    	jne    40255b <printf_core+0x225>
  40248f:	eb 15                	jmp    4024a6 <printf_core+0x170>
		for (fl=0; (unsigned)*s-' '<32 && (FLAGMASK&(1U<<*s-' ')); s++)
  402491:	0f a3 ce             	bt     %ecx,%esi
  402494:	73 f0                	jae    402486 <printf_core+0x150>
			fl |= 1U<<*s-' ';
  402496:	89 fa                	mov    %edi,%edx
		for (fl=0; (unsigned)*s-' '<32 && (FLAGMASK&(1U<<*s-' ')); s++)
  402498:	48 ff c0             	inc    %rax
			fl |= 1U<<*s-' ';
  40249b:	d3 e2                	shl    %cl,%edx
		for (fl=0; (unsigned)*s-' '<32 && (FLAGMASK&(1U<<*s-' ')); s++)
  40249d:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
			fl |= 1U<<*s-' ';
  4024a2:	09 d5                	or     %edx,%ebp
  4024a4:	eb ce                	jmp    402474 <printf_core+0x13e>
			if (isdigit(s[1]) && s[2]=='$') {
  4024a6:	48 0f be 48 01       	movsbq 0x1(%rax),%rcx
  4024ab:	48 89 ca             	mov    %rcx,%rdx
  4024ae:	83 e9 30             	sub    $0x30,%ecx
  4024b1:	83 f9 09             	cmp    $0x9,%ecx
  4024b4:	77 3f                	ja     4024f5 <printf_core+0x1bf>
  4024b6:	80 78 02 24          	cmpb   $0x24,0x2(%rax)
  4024ba:	75 39                	jne    4024f5 <printf_core+0x1bf>
				nl_type[s[1]-'0'] = INT;
  4024bc:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
				s+=3;
  4024c1:	48 83 c0 03          	add    $0x3,%rax
				l10n=1;
  4024c5:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%rsp)
  4024cc:	00 
				nl_type[s[1]-'0'] = INT;
  4024cd:	c7 84 97 40 ff ff ff 	movl   $0xa,-0xc0(%rdi,%rdx,4)
  4024d4:	0a 00 00 00 
				w = nl_arg[s[1]-'0'].i;
  4024d8:	48 0f be 50 fe       	movsbq -0x2(%rax),%rdx
  4024dd:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
				s+=3;
  4024e2:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
				w = nl_arg[s[1]-'0'].i;
  4024e7:	48 c1 e2 04          	shl    $0x4,%rdx
  4024eb:	44 8b a4 17 00 fd ff 	mov    -0x300(%rdi,%rdx,1),%r12d
  4024f2:	ff 
				s+=3;
  4024f3:	eb 56                	jmp    40254b <printf_core+0x215>
			} else if (!l10n) {
  4024f5:	83 7c 24 14 00       	cmpl   $0x0,0x14(%rsp)
  4024fa:	74 10                	je     40250c <printf_core+0x1d6>
	for (; i<=NL_ARGMAX && !nl_type[i]; i++);
	if (i<=NL_ARGMAX) goto inval;
	return 1;

inval:
	errno = EINVAL;
  4024fc:	e8 6f 0f 00 00       	callq  403470 <__errno_location>
  402501:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
  402507:	e9 5b 07 00 00       	jmpq   402c67 <printf_core+0x931>
				w = f ? va_arg(*ap, int) : 0;
  40250c:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  402511:	45 89 ec             	mov    %r13d,%r12d
  402514:	74 2d                	je     402543 <printf_core+0x20d>
  402516:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  40251b:	8b 0f                	mov    (%rdi),%ecx
  40251d:	83 f9 2f             	cmp    $0x2f,%ecx
  402520:	77 0d                	ja     40252f <printf_core+0x1f9>
  402522:	89 ca                	mov    %ecx,%edx
  402524:	83 c1 08             	add    $0x8,%ecx
  402527:	48 03 57 10          	add    0x10(%rdi),%rdx
  40252b:	89 0f                	mov    %ecx,(%rdi)
  40252d:	eb 11                	jmp    402540 <printf_core+0x20a>
  40252f:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  402534:	48 8b 56 08          	mov    0x8(%rsi),%rdx
  402538:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  40253c:	48 89 4e 08          	mov    %rcx,0x8(%rsi)
  402540:	44 8b 22             	mov    (%rdx),%r12d
				s++;
  402543:	48 ff c0             	inc    %rax
  402546:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
			if (w<0) fl|=LEFT_ADJ, w=-w;
  40254b:	45 85 e4             	test   %r12d,%r12d
  40254e:	79 20                	jns    402570 <printf_core+0x23a>
  402550:	81 cd 00 20 00 00    	or     $0x2000,%ebp
  402556:	41 f7 dc             	neg    %r12d
  402559:	eb 15                	jmp    402570 <printf_core+0x23a>
		} else if ((w=getint(&s))<0) goto overflow;
  40255b:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
  402560:	e8 84 f1 ff ff       	callq  4016e9 <getint>
  402565:	85 c0                	test   %eax,%eax
  402567:	41 89 c4             	mov    %eax,%r12d
  40256a:	0f 88 ec 06 00 00    	js     402c5c <printf_core+0x926>
		if (*s=='.' && s[1]=='*') {
  402570:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
			p = -1;
  402575:	49 83 c9 ff          	or     $0xffffffffffffffff,%r9
			xp = 0;
  402579:	45 89 ea             	mov    %r13d,%r10d
		if (*s=='.' && s[1]=='*') {
  40257c:	80 38 2e             	cmpb   $0x2e,(%rax)
  40257f:	0f 85 bf 00 00 00    	jne    402644 <printf_core+0x30e>
  402585:	80 78 01 2a          	cmpb   $0x2a,0x1(%rax)
  402589:	0f 85 9a 00 00 00    	jne    402629 <printf_core+0x2f3>
			if (isdigit(s[2]) && s[3]=='$') {
  40258f:	48 0f be 48 02       	movsbq 0x2(%rax),%rcx
  402594:	48 89 ca             	mov    %rcx,%rdx
  402597:	83 e9 30             	sub    $0x30,%ecx
  40259a:	83 f9 09             	cmp    $0x9,%ecx
  40259d:	77 32                	ja     4025d1 <printf_core+0x29b>
  40259f:	80 78 03 24          	cmpb   $0x24,0x3(%rax)
  4025a3:	75 2c                	jne    4025d1 <printf_core+0x29b>
				nl_type[s[2]-'0'] = INT;
  4025a5:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
				p = nl_arg[s[2]-'0'].i;
  4025aa:	48 8b 7c 24 20       	mov    0x20(%rsp),%rdi
				s+=4;
  4025af:	48 83 c0 04          	add    $0x4,%rax
				nl_type[s[2]-'0'] = INT;
  4025b3:	c7 84 96 40 ff ff ff 	movl   $0xa,-0xc0(%rsi,%rdx,4)
  4025ba:	0a 00 00 00 
				p = nl_arg[s[2]-'0'].i;
  4025be:	48 0f be 50 fe       	movsbq -0x2(%rax),%rdx
  4025c3:	48 c1 e2 04          	shl    $0x4,%rdx
  4025c7:	4c 63 8c 17 00 fd ff 	movslq -0x300(%rdi,%rdx,1),%r9
  4025ce:	ff 
  4025cf:	eb 46                	jmp    402617 <printf_core+0x2e1>
			} else if (!l10n) {
  4025d1:	83 7c 24 14 00       	cmpl   $0x0,0x14(%rsp)
  4025d6:	0f 85 20 ff ff ff    	jne    4024fc <printf_core+0x1c6>
				p = f ? va_arg(*ap, int) : 0;
  4025dc:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  4025e1:	4d 63 cd             	movslq %r13d,%r9
  4025e4:	74 2d                	je     402613 <printf_core+0x2dd>
  4025e6:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  4025eb:	8b 0e                	mov    (%rsi),%ecx
  4025ed:	83 f9 2f             	cmp    $0x2f,%ecx
  4025f0:	77 0d                	ja     4025ff <printf_core+0x2c9>
  4025f2:	89 ca                	mov    %ecx,%edx
  4025f4:	83 c1 08             	add    $0x8,%ecx
  4025f7:	48 03 56 10          	add    0x10(%rsi),%rdx
  4025fb:	89 0e                	mov    %ecx,(%rsi)
  4025fd:	eb 11                	jmp    402610 <printf_core+0x2da>
  4025ff:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  402604:	48 8b 57 08          	mov    0x8(%rdi),%rdx
  402608:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  40260c:	48 89 4f 08          	mov    %rcx,0x8(%rdi)
  402610:	4c 63 0a             	movslq (%rdx),%r9
				s+=2;
  402613:	48 83 c0 02          	add    $0x2,%rax
  402617:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
			xp = (p>=0);
  40261c:	44 89 c8             	mov    %r9d,%eax
  40261f:	f7 d0                	not    %eax
  402621:	c1 e8 1f             	shr    $0x1f,%eax
  402624:	41 89 c2             	mov    %eax,%r10d
  402627:	eb 1b                	jmp    402644 <printf_core+0x30e>
			p = getint(&s);
  402629:	48 8d 7c 24 70       	lea    0x70(%rsp),%rdi
			s++;
  40262e:	48 ff c0             	inc    %rax
  402631:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
			p = getint(&s);
  402636:	e8 ae f0 ff ff       	callq  4016e9 <getint>
			xp = 1;
  40263b:	41 ba 01 00 00 00    	mov    $0x1,%r10d
			p = getint(&s);
  402641:	4c 63 c8             	movslq %eax,%r9
			st=states[st]S(*s++);
  402644:	48 8d 3d 95 3a 00 00 	lea    0x3a95(%rip),%rdi        # 4060e0 <states>
		st=0;
  40264b:	31 c0                	xor    %eax,%eax
			if (OOB(*s)) goto inval;
  40264d:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
  402652:	0f be 0a             	movsbl (%rdx),%ecx
  402655:	83 e9 41             	sub    $0x41,%ecx
  402658:	83 f9 39             	cmp    $0x39,%ecx
  40265b:	0f 87 9b fe ff ff    	ja     4024fc <printf_core+0x1c6>
			st=states[st]S(*s++);
  402661:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  402665:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
  40266a:	89 c1                	mov    %eax,%ecx
  40266c:	0f be 12             	movsbl (%rdx),%edx
  40266f:	48 6b c9 3a          	imul   $0x3a,%rcx,%rcx
  402673:	83 ea 41             	sub    $0x41,%edx
  402676:	48 63 d2             	movslq %edx,%rdx
  402679:	48 01 f9             	add    %rdi,%rcx
  40267c:	0f b6 34 11          	movzbl (%rcx,%rdx,1),%esi
		} while (st-1<STOP);
  402680:	8d 56 ff             	lea    -0x1(%rsi),%edx
  402683:	83 fa 07             	cmp    $0x7,%edx
  402686:	77 04                	ja     40268c <printf_core+0x356>
  402688:	89 f0                	mov    %esi,%eax
  40268a:	eb c1                	jmp    40264d <printf_core+0x317>
		if (!st) goto inval;
  40268c:	85 f6                	test   %esi,%esi
  40268e:	0f 84 68 fe ff ff    	je     4024fc <printf_core+0x1c6>
		if (st==NOARG) {
  402694:	83 fe 1b             	cmp    $0x1b,%esi
  402697:	75 0a                	jne    4026a3 <printf_core+0x36d>
			if (argpos>=0) goto inval;
  402699:	45 85 db             	test   %r11d,%r11d
  40269c:	78 6a                	js     402708 <printf_core+0x3d2>
  40269e:	e9 59 fe ff ff       	jmpq   4024fc <printf_core+0x1c6>
			if (argpos>=0) nl_type[argpos]=st, arg=nl_arg[argpos];
  4026a3:	45 85 db             	test   %r11d,%r11d
  4026a6:	78 2e                	js     4026d6 <printf_core+0x3a0>
  4026a8:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  4026ad:	4d 63 db             	movslq %r11d,%r11
  4026b0:	42 89 34 9f          	mov    %esi,(%rdi,%r11,4)
  4026b4:	49 c1 e3 04          	shl    $0x4,%r11
  4026b8:	4c 03 5c 24 20       	add    0x20(%rsp),%r11
  4026bd:	49 8b 13             	mov    (%r11),%rdx
  4026c0:	48 89 94 24 80 00 00 	mov    %rdx,0x80(%rsp)
  4026c7:	00 
  4026c8:	49 8b 53 08          	mov    0x8(%r11),%rdx
  4026cc:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
  4026d3:	00 
  4026d4:	eb 32                	jmp    402708 <printf_core+0x3d2>
			else if (f) pop_arg(&arg, st, ap);
  4026d6:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  4026db:	75 08                	jne    4026e5 <printf_core+0x3af>
			else return 0;
  4026dd:	45 31 ff             	xor    %r15d,%r15d
  4026e0:	e9 20 06 00 00       	jmpq   402d05 <printf_core+0x9cf>
			else if (f) pop_arg(&arg, st, ap);
  4026e5:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  4026ea:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  4026ef:	89 44 24 50          	mov    %eax,0x50(%rsp)
  4026f3:	44 89 4c 24 30       	mov    %r9d,0x30(%rsp)
  4026f8:	e8 5e ee ff ff       	callq  40155b <pop_arg>
  4026fd:	4c 63 4c 24 30       	movslq 0x30(%rsp),%r9
  402702:	8b 44 24 50          	mov    0x50(%rsp),%eax
  402706:	eb 0b                	jmp    402713 <printf_core+0x3dd>
		if (!f) continue;
  402708:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  40270d:	0f 84 87 fc ff ff    	je     40239a <printf_core+0x64>
		t = s[-1];
  402713:	48 8b 54 24 70       	mov    0x70(%rsp),%rdx
		if (ps && (t&15)==3) t&=~32;
  402718:	85 c0                	test   %eax,%eax
		t = s[-1];
  40271a:	44 0f be 42 ff       	movsbl -0x1(%rdx),%r8d
  40271f:	45 89 c3             	mov    %r8d,%r11d
		if (ps && (t&15)==3) t&=~32;
  402722:	74 13                	je     402737 <printf_core+0x401>
  402724:	44 88 c2             	mov    %r8b,%dl
  402727:	83 e2 0f             	and    $0xf,%edx
  40272a:	80 fa 03             	cmp    $0x3,%dl
  40272d:	75 08                	jne    402737 <printf_core+0x401>
  40272f:	41 83 e3 df          	and    $0xffffffdf,%r11d
  402733:	45 0f be c3          	movsbl %r11b,%r8d
		if (fl & LEFT_ADJ) fl &= ~ZERO_PAD;
  402737:	89 ea                	mov    %ebp,%edx
  402739:	81 e2 ff ff fe ff    	and    $0xfffeffff,%edx
  40273f:	f7 c5 00 20 00 00    	test   $0x2000,%ebp
  402745:	0f 45 ea             	cmovne %edx,%ebp
		switch(t) {
  402748:	41 8d 50 bf          	lea    -0x41(%r8),%edx
  40274c:	83 fa 37             	cmp    $0x37,%edx
  40274f:	0f 87 9b 03 00 00    	ja     402af0 <printf_core+0x7ba>
  402755:	48 8d 0d 64 38 00 00 	lea    0x3864(%rip),%rcx        # 405fc0 <_fini+0x62d>
  40275c:	48 63 14 91          	movslq (%rcx,%rdx,4),%rdx
  402760:	48 01 ca             	add    %rcx,%rdx
  402763:	ff e2                	jmpq   *%rdx
			switch(ps) {
  402765:	83 f8 07             	cmp    $0x7,%eax
  402768:	0f 87 2c fc ff ff    	ja     40239a <printf_core+0x64>
  40276e:	48 8d 15 2b 39 00 00 	lea    0x392b(%rip),%rdx        # 4060a0 <_fini+0x70d>
  402775:	48 63 04 82          	movslq (%rdx,%rax,4),%rax
  402779:	48 01 d0             	add    %rdx,%rax
  40277c:	ff e0                	jmpq   *%rax
			case BARE: *(int *)arg.p = cnt; break;
  40277e:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  402785:	00 
  402786:	44 89 38             	mov    %r15d,(%rax)
  402789:	e9 0c fc ff ff       	jmpq   40239a <printf_core+0x64>
			case HPRE: *(unsigned short *)arg.p = cnt; break;
  40278e:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  402795:	00 
  402796:	66 44 89 38          	mov    %r15w,(%rax)
  40279a:	e9 fb fb ff ff       	jmpq   40239a <printf_core+0x64>
			case HHPRE: *(unsigned char *)arg.p = cnt; break;
  40279f:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  4027a6:	00 
  4027a7:	44 88 38             	mov    %r15b,(%rax)
  4027aa:	e9 eb fb ff ff       	jmpq   40239a <printf_core+0x64>
			case JPRE: *(uintmax_t *)arg.p = cnt; break;
  4027af:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  4027b6:	00 
  4027b7:	49 63 c7             	movslq %r15d,%rax
  4027ba:	48 89 02             	mov    %rax,(%rdx)
  4027bd:	e9 d8 fb ff ff       	jmpq   40239a <printf_core+0x64>
			p = MAX(p, 2*sizeof(void*));
  4027c2:	41 83 f9 10          	cmp    $0x10,%r9d
  4027c6:	b8 10 00 00 00       	mov    $0x10,%eax
			t = 'x';
  4027cb:	41 b8 78 00 00 00    	mov    $0x78,%r8d
			p = MAX(p, 2*sizeof(void*));
  4027d1:	4c 0f 42 c8          	cmovb  %rax,%r9
			fl |= ALT_FORM;
  4027d5:	83 cd 08             	or     $0x8,%ebp
			a = fmt_x(arg.i, z, t&32);
  4027d8:	48 8b 94 24 80 00 00 	mov    0x80(%rsp),%rdx
  4027df:	00 
  4027e0:	44 89 c1             	mov    %r8d,%ecx
  4027e3:	4c 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%r14
  4027ea:	00 
	for (; x; x>>=4) *--s = xdigits[(x&15)]|lower;
  4027eb:	48 8d 35 ce 38 00 00 	lea    0x38ce(%rip),%rsi        # 4060c0 <xdigits>
			a = fmt_x(arg.i, z, t&32);
  4027f2:	83 e1 20             	and    $0x20,%ecx
  4027f5:	48 89 d0             	mov    %rdx,%rax
	for (; x; x>>=4) *--s = xdigits[(x&15)]|lower;
  4027f8:	48 85 c0             	test   %rax,%rax
  4027fb:	74 17                	je     402814 <printf_core+0x4de>
  4027fd:	48 89 c7             	mov    %rax,%rdi
  402800:	88 cb                	mov    %cl,%bl
  402802:	49 ff ce             	dec    %r14
  402805:	83 e7 0f             	and    $0xf,%edi
  402808:	48 c1 e8 04          	shr    $0x4,%rax
  40280c:	0a 1c 3e             	or     (%rsi,%rdi,1),%bl
  40280f:	41 88 1e             	mov    %bl,(%r14)
  402812:	eb e4                	jmp    4027f8 <printf_core+0x4c2>
			if (arg.i && (fl & ALT_FORM)) prefix+=(t>>4), pl=2;
  402814:	48 85 d2             	test   %rdx,%rdx
		pl = 0;
  402817:	44 89 eb             	mov    %r13d,%ebx
		prefix = "-+   0X0x";
  40281a:	4c 8d 1d 8c 37 00 00 	lea    0x378c(%rip),%r11        # 405fad <_fini+0x61a>
			if (arg.i && (fl & ALT_FORM)) prefix+=(t>>4), pl=2;
  402821:	0f 84 0c 01 00 00    	je     402933 <printf_core+0x5fd>
  402827:	40 f6 c5 08          	test   $0x8,%bpl
		pl = 0;
  40282b:	44 89 eb             	mov    %r13d,%ebx
			if (arg.i && (fl & ALT_FORM)) prefix+=(t>>4), pl=2;
  40282e:	0f 84 ff 00 00 00    	je     402933 <printf_core+0x5fd>
  402834:	41 c1 f8 04          	sar    $0x4,%r8d
  402838:	bb 02 00 00 00       	mov    $0x2,%ebx
  40283d:	4d 63 c0             	movslq %r8d,%r8
  402840:	4d 01 c3             	add    %r8,%r11
  402843:	e9 eb 00 00 00       	jmpq   402933 <printf_core+0x5fd>
			a = fmt_o(arg.i, z);
  402848:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40284f:	00 
  402850:	4c 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%r14
  402857:	00 
	for (; x; x>>=3) *--s = '0' + (x&7);
  402858:	48 85 c0             	test   %rax,%rax
  40285b:	74 14                	je     402871 <printf_core+0x53b>
  40285d:	88 c2                	mov    %al,%dl
  40285f:	49 ff ce             	dec    %r14
  402862:	48 c1 e8 03          	shr    $0x3,%rax
  402866:	83 e2 07             	and    $0x7,%edx
  402869:	83 c2 30             	add    $0x30,%edx
  40286c:	41 88 16             	mov    %dl,(%r14)
  40286f:	eb e7                	jmp    402858 <printf_core+0x522>
			if ((fl&ALT_FORM) && p<z-a+1) prefix+=5, pl=1;
  402871:	40 f6 c5 08          	test   $0x8,%bpl
		pl = 0;
  402875:	44 89 eb             	mov    %r13d,%ebx
		prefix = "-+   0X0x";
  402878:	4c 8d 1d 2e 37 00 00 	lea    0x372e(%rip),%r11        # 405fad <_fini+0x61a>
			if ((fl&ALT_FORM) && p<z-a+1) prefix+=5, pl=1;
  40287f:	0f 84 ae 00 00 00    	je     402933 <printf_core+0x5fd>
  402885:	48 8d 8c 24 c0 00 00 	lea    0xc0(%rsp),%rcx
  40288c:	00 
  40288d:	49 63 c1             	movslq %r9d,%rax
  402890:	bb 01 00 00 00       	mov    $0x1,%ebx
  402895:	4c 29 f1             	sub    %r14,%rcx
  402898:	48 39 c1             	cmp    %rax,%rcx
  40289b:	48 8d 05 10 37 00 00 	lea    0x3710(%rip),%rax        # 405fb2 <_fini+0x61f>
  4028a2:	41 0f 4c dd          	cmovl  %r13d,%ebx
  4028a6:	4c 0f 4d d8          	cmovge %rax,%r11
  4028aa:	e9 84 00 00 00       	jmpq   402933 <printf_core+0x5fd>
			if (arg.i>INTMAX_MAX) {
  4028af:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  4028b6:	00 
  4028b7:	48 85 c0             	test   %rax,%rax
  4028ba:	79 12                	jns    4028ce <printf_core+0x598>
				arg.i=-arg.i;
  4028bc:	48 f7 d8             	neg    %rax
			pl=1;
  4028bf:	bb 01 00 00 00       	mov    $0x1,%ebx
				arg.i=-arg.i;
  4028c4:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  4028cb:	00 
  4028cc:	eb 32                	jmp    402900 <printf_core+0x5ca>
			} else if (fl & MARK_POS) {
  4028ce:	0f ba e5 0b          	bt     $0xb,%ebp
			pl=1;
  4028d2:	bb 01 00 00 00       	mov    $0x1,%ebx
				prefix++;
  4028d7:	4c 8d 1d d0 36 00 00 	lea    0x36d0(%rip),%r11        # 405fae <_fini+0x61b>
			} else if (fl & MARK_POS) {
  4028de:	72 27                	jb     402907 <printf_core+0x5d1>
			} else pl=0;
  4028e0:	89 e8                	mov    %ebp,%eax
  4028e2:	4c 8d 1d c6 36 00 00 	lea    0x36c6(%rip),%r11        # 405faf <_fini+0x61c>
  4028e9:	83 e0 01             	and    $0x1,%eax
  4028ec:	48 8d 05 ba 36 00 00 	lea    0x36ba(%rip),%rax        # 405fad <_fini+0x61a>
  4028f3:	41 0f 44 dd          	cmove  %r13d,%ebx
  4028f7:	4c 0f 44 d8          	cmove  %rax,%r11
  4028fb:	eb 0a                	jmp    402907 <printf_core+0x5d1>
		pl = 0;
  4028fd:	44 89 eb             	mov    %r13d,%ebx
		prefix = "-+   0X0x";
  402900:	4c 8d 1d a6 36 00 00 	lea    0x36a6(%rip),%r11        # 405fad <_fini+0x61a>
			a = fmt_u(arg.i, z);
  402907:	48 8b bc 24 80 00 00 	mov    0x80(%rsp),%rdi
  40290e:	00 
  40290f:	48 8d b4 24 c0 00 00 	lea    0xc0(%rsp),%rsi
  402916:	00 
  402917:	4c 89 5c 24 50       	mov    %r11,0x50(%rsp)
  40291c:	44 89 4c 24 30       	mov    %r9d,0x30(%rsp)
  402921:	e8 a3 ed ff ff       	callq  4016c9 <fmt_u>
  402926:	4c 63 4c 24 30       	movslq 0x30(%rsp),%r9
  40292b:	4c 8b 5c 24 50       	mov    0x50(%rsp),%r11
  402930:	49 89 c6             	mov    %rax,%r14
			if (xp && p<0) goto overflow;
  402933:	44 89 c8             	mov    %r9d,%eax
  402936:	c1 e8 1f             	shr    $0x1f,%eax
  402939:	74 0a                	je     402945 <printf_core+0x60f>
  40293b:	41 80 e2 01          	and    $0x1,%r10b
  40293f:	0f 85 17 03 00 00    	jne    402c5c <printf_core+0x926>
			if (p>=0) fl &= ~ZERO_PAD;
  402945:	89 e8                	mov    %ebp,%eax
  402947:	25 ff ff fe ff       	and    $0xfffeffff,%eax
  40294c:	45 85 c9             	test   %r9d,%r9d
  40294f:	0f 49 e8             	cmovns %eax,%ebp
			if (!arg.i && !p) {
  402952:	48 83 bc 24 80 00 00 	cmpq   $0x0,0x80(%rsp)
  402959:	00 00 
  40295b:	0f 94 c2             	sete   %dl
  40295e:	45 85 c9             	test   %r9d,%r9d
  402961:	75 08                	jne    40296b <printf_core+0x635>
  402963:	84 d2                	test   %dl,%dl
  402965:	0f 85 96 01 00 00    	jne    402b01 <printf_core+0x7cb>
			p = MAX(p, z-a + !arg.i);
  40296b:	48 8d 84 24 c0 00 00 	lea    0xc0(%rsp),%rax
  402972:	00 
  402973:	0f b6 d2             	movzbl %dl,%edx
  402976:	4c 29 f0             	sub    %r14,%rax
  402979:	48 01 d0             	add    %rdx,%rax
  40297c:	4c 39 c8             	cmp    %r9,%rax
  40297f:	4c 0f 4d c8          	cmovge %rax,%r9
  402983:	e9 6f 01 00 00       	jmpq   402af7 <printf_core+0x7c1>
			*(a=z-(p=1))=arg.i;
  402988:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  40298f:	00 
			fl &= ~ZERO_PAD;
  402990:	81 e5 ff ff fe ff    	and    $0xfffeffff,%ebp
		prefix = "-+   0X0x";
  402996:	4c 8d 1d 10 36 00 00 	lea    0x3610(%rip),%r11        # 405fad <_fini+0x61a>
			*(a=z-(p=1))=arg.i;
  40299d:	41 b9 01 00 00 00    	mov    $0x1,%r9d
		z = buf + sizeof(buf);
  4029a3:	4c 8d ac 24 c0 00 00 	lea    0xc0(%rsp),%r13
  4029aa:	00 
			*(a=z-(p=1))=arg.i;
  4029ab:	88 84 24 bf 00 00 00 	mov    %al,0xbf(%rsp)
  4029b2:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
  4029b7:	4c 8d 70 2a          	lea    0x2a(%rax),%r14
			break;
  4029bb:	e9 4f 01 00 00       	jmpq   402b0f <printf_core+0x7d9>
  4029c0:	44 89 4c 24 30       	mov    %r9d,0x30(%rsp)
			if (1) a = strerror(errno); else
  4029c5:	e8 a6 0a 00 00       	callq  403470 <__errno_location>
  4029ca:	8b 38                	mov    (%rax),%edi
  4029cc:	e8 e9 0a 00 00       	callq  4034ba <strerror>
  4029d1:	4c 63 4c 24 30       	movslq 0x30(%rsp),%r9
  4029d6:	49 89 c6             	mov    %rax,%r14
  4029d9:	eb 19                	jmp    4029f4 <printf_core+0x6be>
			a = arg.p ? arg.p : "(null)";
  4029db:	4c 8b 94 24 80 00 00 	mov    0x80(%rsp),%r10
  4029e2:	00 
  4029e3:	48 8d 05 cd 35 00 00 	lea    0x35cd(%rip),%rax        # 405fb7 <_fini+0x624>
  4029ea:	4d 85 d2             	test   %r10,%r10
  4029ed:	49 0f 45 c2          	cmovne %r10,%rax
  4029f1:	49 89 c6             	mov    %rax,%r14
			z = a + strnlen(a, p<0 ? INT_MAX : p);
  4029f4:	45 85 c9             	test   %r9d,%r9d
  4029f7:	be ff ff ff 7f       	mov    $0x7fffffff,%esi
  4029fc:	4c 89 f7             	mov    %r14,%rdi
  4029ff:	49 0f 49 f1          	cmovns %r9,%rsi
  402a03:	44 89 4c 24 30       	mov    %r9d,0x30(%rsp)
  402a08:	e8 33 06 00 00       	callq  403040 <strnlen>
			if (p<0 && *z) goto overflow;
  402a0d:	44 8b 4c 24 30       	mov    0x30(%rsp),%r9d
			z = a + strnlen(a, p<0 ? INT_MAX : p);
  402a12:	4d 8d 2c 06          	lea    (%r14,%rax,1),%r13
			if (p<0 && *z) goto overflow;
  402a16:	45 85 c9             	test   %r9d,%r9d
  402a19:	79 0b                	jns    402a26 <printf_core+0x6f0>
  402a1b:	41 80 7d 00 00       	cmpb   $0x0,0x0(%r13)
  402a20:	0f 85 36 02 00 00    	jne    402c5c <printf_core+0x926>
			p = z-a;
  402a26:	41 89 c1             	mov    %eax,%r9d
			fl &= ~ZERO_PAD;
  402a29:	81 e5 ff ff fe ff    	and    $0xfffeffff,%ebp
		prefix = "-+   0X0x";
  402a2f:	4c 8d 1d 77 35 00 00 	lea    0x3577(%rip),%r11        # 405fad <_fini+0x61a>
			break;
  402a36:	e9 d4 00 00 00       	jmpq   402b0f <printf_core+0x7d9>
			wc[0] = arg.i;
  402a3b:	48 8b 84 24 80 00 00 	mov    0x80(%rsp),%rax
  402a42:	00 
			wc[1] = 0;
  402a43:	c7 44 24 7c 00 00 00 	movl   $0x0,0x7c(%rsp)
  402a4a:	00 
			p = -1;
  402a4b:	41 83 c9 ff          	or     $0xffffffff,%r9d
			wc[0] = arg.i;
  402a4f:	89 44 24 78          	mov    %eax,0x78(%rsp)
			arg.p = wc;
  402a53:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
  402a58:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
  402a5f:	00 
			ws = arg.p;
  402a60:	48 8b 9c 24 80 00 00 	mov    0x80(%rsp),%rbx
  402a67:	00 
			for (i=l=0; i<p && *ws && (l=wctomb(mb, *ws++))>=0 && l<=p-i; i+=l);
  402a68:	45 31 ed             	xor    %r13d,%r13d
  402a6b:	4d 63 f1             	movslq %r9d,%r14
  402a6e:	4d 39 f5             	cmp    %r14,%r13
  402a71:	0f 83 f9 01 00 00    	jae    402c70 <printf_core+0x93a>
  402a77:	8b 33                	mov    (%rbx),%esi
  402a79:	85 f6                	test   %esi,%esi
  402a7b:	0f 84 ef 01 00 00    	je     402c70 <printf_core+0x93a>
  402a81:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  402a86:	48 83 c3 04          	add    $0x4,%rbx
  402a8a:	e8 00 20 00 00       	callq  404a8f <wctomb>
  402a8f:	85 c0                	test   %eax,%eax
  402a91:	0f 88 d0 01 00 00    	js     402c67 <printf_core+0x931>
  402a97:	4c 89 f2             	mov    %r14,%rdx
  402a9a:	48 98                	cltq   
  402a9c:	4c 29 ea             	sub    %r13,%rdx
  402a9f:	48 39 d0             	cmp    %rdx,%rax
  402aa2:	0f 87 c8 01 00 00    	ja     402c70 <printf_core+0x93a>
  402aa8:	49 01 c5             	add    %rax,%r13
  402aab:	eb c1                	jmp    402a6e <printf_core+0x738>
			if (xp && p<0) goto overflow;
  402aad:	44 89 c8             	mov    %r9d,%eax
  402ab0:	c1 e8 1f             	shr    $0x1f,%eax
  402ab3:	74 0a                	je     402abf <printf_core+0x789>
  402ab5:	41 80 e2 01          	and    $0x1,%r10b
  402ab9:	0f 85 9d 01 00 00    	jne    402c5c <printf_core+0x926>
			l = fmt_fp(f, arg.f, w, p, fl, t);
  402abf:	ff b4 24 88 00 00 00 	pushq  0x88(%rsp)
  402ac6:	ff b4 24 88 00 00 00 	pushq  0x88(%rsp)
  402acd:	44 89 ca             	mov    %r9d,%edx
  402ad0:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  402ad5:	89 e9                	mov    %ebp,%ecx
  402ad7:	44 89 e6             	mov    %r12d,%esi
  402ada:	e8 db ec ff ff       	callq  4017ba <fmt_fp>
  402adf:	89 c3                	mov    %eax,%ebx
			if (l<0) goto overflow;
  402ae1:	85 db                	test   %ebx,%ebx
  402ae3:	58                   	pop    %rax
  402ae4:	5a                   	pop    %rdx
  402ae5:	0f 89 af f8 ff ff    	jns    40239a <printf_core+0x64>
  402aeb:	e9 6c 01 00 00       	jmpq   402c5c <printf_core+0x926>
		prefix = "-+   0X0x";
  402af0:	4c 8d 1d b6 34 00 00 	lea    0x34b6(%rip),%r11        # 405fad <_fini+0x61a>
		z = buf + sizeof(buf);
  402af7:	4c 8d ac 24 c0 00 00 	lea    0xc0(%rsp),%r13
  402afe:	00 
  402aff:	eb 0e                	jmp    402b0f <printf_core+0x7d9>
  402b01:	45 89 e9             	mov    %r13d,%r9d
  402b04:	4c 8d ac 24 c0 00 00 	lea    0xc0(%rsp),%r13
  402b0b:	00 
				a=z;
  402b0c:	4d 89 ee             	mov    %r13,%r14
		if (p < z-a) p = z-a;
  402b0f:	49 63 c1             	movslq %r9d,%rax
  402b12:	4d 29 f5             	sub    %r14,%r13
  402b15:	4c 89 5c 24 58       	mov    %r11,0x58(%rsp)
  402b1a:	4c 39 e8             	cmp    %r13,%rax
		if (p > INT_MAX-pl) goto overflow;
  402b1d:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
		if (p < z-a) p = z-a;
  402b22:	45 0f 4c cd          	cmovl  %r13d,%r9d
		if (p > INT_MAX-pl) goto overflow;
  402b26:	29 d8                	sub    %ebx,%eax
  402b28:	41 39 c1             	cmp    %eax,%r9d
  402b2b:	0f 8f 2b 01 00 00    	jg     402c5c <printf_core+0x926>
		if (w < pl+p) w = pl+p;
  402b31:	41 8d 04 19          	lea    (%r9,%rbx,1),%eax
  402b35:	44 89 4c 24 50       	mov    %r9d,0x50(%rsp)
  402b3a:	41 39 c4             	cmp    %eax,%r12d
  402b3d:	89 44 24 30          	mov    %eax,0x30(%rsp)
  402b41:	44 0f 4c e0          	cmovl  %eax,%r12d
		if (w > INT_MAX-cnt) goto overflow;
  402b45:	44 3b 64 24 34       	cmp    0x34(%rsp),%r12d
  402b4a:	0f 8f 0c 01 00 00    	jg     402c5c <printf_core+0x926>
		pad(f, ' ', w, pl+p, fl);
  402b50:	48 8b 3c 24          	mov    (%rsp),%rdi
  402b54:	89 c1                	mov    %eax,%ecx
  402b56:	41 89 e8             	mov    %ebp,%r8d
  402b59:	44 89 e2             	mov    %r12d,%edx
  402b5c:	be 20 00 00 00       	mov    $0x20,%esi
  402b61:	e8 d5 eb ff ff       	callq  40173b <pad>
		out(f, prefix, pl);
  402b66:	4c 8b 5c 24 58       	mov    0x58(%rsp),%r11
  402b6b:	48 8b 3c 24          	mov    (%rsp),%rdi
  402b6f:	48 63 d3             	movslq %ebx,%rdx
		pad(f, ' ', w, pl+p, fl^LEFT_ADJ);
  402b72:	44 89 e3             	mov    %r12d,%ebx
		out(f, prefix, pl);
  402b75:	4c 89 de             	mov    %r11,%rsi
  402b78:	e8 a7 eb ff ff       	callq  401724 <out>
		pad(f, '0', w, pl+p, fl^ZERO_PAD);
  402b7d:	8b 4c 24 30          	mov    0x30(%rsp),%ecx
  402b81:	48 8b 3c 24          	mov    (%rsp),%rdi
  402b85:	41 89 e8             	mov    %ebp,%r8d
  402b88:	41 81 f0 00 00 01 00 	xor    $0x10000,%r8d
  402b8f:	44 89 e2             	mov    %r12d,%edx
  402b92:	be 30 00 00 00       	mov    $0x30,%esi
  402b97:	e8 9f eb ff ff       	callq  40173b <pad>
		pad(f, '0', p, z-a, 0);
  402b9c:	44 8b 4c 24 50       	mov    0x50(%rsp),%r9d
  402ba1:	48 8b 3c 24          	mov    (%rsp),%rdi
  402ba5:	45 31 c0             	xor    %r8d,%r8d
  402ba8:	44 89 e9             	mov    %r13d,%ecx
  402bab:	be 30 00 00 00       	mov    $0x30,%esi
  402bb0:	44 89 ca             	mov    %r9d,%edx
  402bb3:	e8 83 eb ff ff       	callq  40173b <pad>
		out(f, a, z-a);
  402bb8:	48 8b 3c 24          	mov    (%rsp),%rdi
  402bbc:	4c 89 ea             	mov    %r13,%rdx
  402bbf:	4c 89 f6             	mov    %r14,%rsi
  402bc2:	e8 5d eb ff ff       	callq  401724 <out>
		pad(f, ' ', w, pl+p, fl^LEFT_ADJ);
  402bc7:	8b 4c 24 30          	mov    0x30(%rsp),%ecx
  402bcb:	48 8b 3c 24          	mov    (%rsp),%rdi
  402bcf:	41 89 e8             	mov    %ebp,%r8d
  402bd2:	41 81 f0 00 20 00 00 	xor    $0x2000,%r8d
  402bd9:	44 89 e2             	mov    %r12d,%edx
  402bdc:	be 20 00 00 00       	mov    $0x20,%esi
  402be1:	e8 55 eb ff ff       	callq  40173b <pad>
  402be6:	e9 af f7 ff ff       	jmpq   40239a <printf_core+0x64>
	if (f) return cnt;
  402beb:	48 83 3c 24 00       	cmpq   $0x0,(%rsp)
  402bf0:	0f 85 0f 01 00 00    	jne    402d05 <printf_core+0x9cf>
	if (!l10n) return 0;
  402bf6:	83 7c 24 14 00       	cmpl   $0x0,0x14(%rsp)
  402bfb:	0f 84 dc fa ff ff    	je     4026dd <printf_core+0x3a7>
  402c01:	4c 8b 4c 24 20       	mov    0x20(%rsp),%r9
  402c06:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  402c0c:	49 83 c1 10          	add    $0x10,%r9
	for (i=1; i<=NL_ARGMAX && nl_type[i]; i++)
  402c10:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  402c15:	42 8b 34 80          	mov    (%rax,%r8,4),%esi
  402c19:	85 f6                	test   %esi,%esi
  402c1b:	74 2e                	je     402c4b <printf_core+0x915>
		pop_arg(nl_arg+i, nl_type[i], ap);
  402c1d:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  402c22:	4c 89 cf             	mov    %r9,%rdi
  402c25:	e8 31 e9 ff ff       	callq  40155b <pop_arg>
	for (i=1; i<=NL_ARGMAX && nl_type[i]; i++)
  402c2a:	49 ff c0             	inc    %r8
  402c2d:	49 83 c1 10          	add    $0x10,%r9
  402c31:	49 83 f8 0a          	cmp    $0xa,%r8
  402c35:	75 d9                	jne    402c10 <printf_core+0x8da>
	return 1;
  402c37:	41 bf 01 00 00 00    	mov    $0x1,%r15d
  402c3d:	e9 c3 00 00 00       	jmpq   402d05 <printf_core+0x9cf>
	for (; i<=NL_ARGMAX && !nl_type[i]; i++);
  402c42:	49 ff c0             	inc    %r8
  402c45:	49 83 f8 0a          	cmp    $0xa,%r8
  402c49:	74 ec                	je     402c37 <printf_core+0x901>
  402c4b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  402c50:	42 83 3c 80 00       	cmpl   $0x0,(%rax,%r8,4)
  402c55:	74 eb                	je     402c42 <printf_core+0x90c>
  402c57:	e9 a0 f8 ff ff       	jmpq   4024fc <printf_core+0x1c6>
	return -1;
overflow:
	errno = EOVERFLOW;
  402c5c:	e8 0f 08 00 00       	callq  403470 <__errno_location>
  402c61:	c7 00 4b 00 00 00    	movl   $0x4b,(%rax)
			if (l<0) return -1;
  402c67:	41 83 cf ff          	or     $0xffffffff,%r15d
  402c6b:	e9 95 00 00 00       	jmpq   402d05 <printf_core+0x9cf>
			if (i > INT_MAX) goto overflow;
  402c70:	49 81 fd ff ff ff 7f 	cmp    $0x7fffffff,%r13
  402c77:	77 e3                	ja     402c5c <printf_core+0x926>
			pad(f, ' ', w, p, fl);
  402c79:	48 8b 3c 24          	mov    (%rsp),%rdi
  402c7d:	41 89 e8             	mov    %ebp,%r8d
  402c80:	44 89 e9             	mov    %r13d,%ecx
  402c83:	44 89 e2             	mov    %r12d,%edx
  402c86:	be 20 00 00 00       	mov    $0x20,%esi
			p = i;
  402c8b:	44 89 6c 24 30       	mov    %r13d,0x30(%rsp)
			for (i=0; i<0U+p && *ws && i+(l=wctomb(mb, *ws++))<=p; i+=l)
  402c90:	45 31 f6             	xor    %r14d,%r14d
			pad(f, ' ', w, p, fl);
  402c93:	e8 a3 ea ff ff       	callq  40173b <pad>
			ws = arg.p;
  402c98:	48 8b 9c 24 80 00 00 	mov    0x80(%rsp),%rbx
  402c9f:	00 
			for (i=0; i<0U+p && *ws && i+(l=wctomb(mb, *ws++))<=p; i+=l)
  402ca0:	4d 39 f5             	cmp    %r14,%r13
  402ca3:	77 31                	ja     402cd6 <printf_core+0x9a0>
			pad(f, ' ', w, p, fl^LEFT_ADJ);
  402ca5:	8b 4c 24 30          	mov    0x30(%rsp),%ecx
  402ca9:	48 8b 3c 24          	mov    (%rsp),%rdi
  402cad:	41 89 e8             	mov    %ebp,%r8d
  402cb0:	41 81 f0 00 20 00 00 	xor    $0x2000,%r8d
  402cb7:	44 89 e2             	mov    %r12d,%edx
  402cba:	be 20 00 00 00       	mov    $0x20,%esi
  402cbf:	e8 77 ea ff ff       	callq  40173b <pad>
			l = w>p ? w : p;
  402cc4:	44 3b 64 24 30       	cmp    0x30(%rsp),%r12d
  402cc9:	8b 5c 24 30          	mov    0x30(%rsp),%ebx
  402ccd:	41 0f 4d dc          	cmovge %r12d,%ebx
			continue;
  402cd1:	e9 c4 f6 ff ff       	jmpq   40239a <printf_core+0x64>
			for (i=0; i<0U+p && *ws && i+(l=wctomb(mb, *ws++))<=p; i+=l)
  402cd6:	8b 33                	mov    (%rbx),%esi
  402cd8:	85 f6                	test   %esi,%esi
  402cda:	74 c9                	je     402ca5 <printf_core+0x96f>
  402cdc:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
  402ce1:	48 83 c3 04          	add    $0x4,%rbx
  402ce5:	e8 a5 1d 00 00       	callq  404a8f <wctomb>
  402cea:	48 63 d0             	movslq %eax,%rdx
  402ced:	49 01 d6             	add    %rdx,%r14
  402cf0:	4d 39 f5             	cmp    %r14,%r13
  402cf3:	72 b0                	jb     402ca5 <printf_core+0x96f>
				out(f, mb, l);
  402cf5:	48 8b 74 24 28       	mov    0x28(%rsp),%rsi
  402cfa:	48 8b 3c 24          	mov    (%rsp),%rdi
  402cfe:	e8 21 ea ff ff       	callq  401724 <out>
  402d03:	eb 9b                	jmp    402ca0 <printf_core+0x96a>
	return -1;
}
  402d05:	48 81 c4 c8 00 00 00 	add    $0xc8,%rsp
  402d0c:	44 89 f8             	mov    %r15d,%eax
  402d0f:	5b                   	pop    %rbx
  402d10:	5d                   	pop    %rbp
  402d11:	41 5c                	pop    %r12
  402d13:	41 5d                	pop    %r13
  402d15:	41 5e                	pop    %r14
  402d17:	41 5f                	pop    %r15
  402d19:	c3                   	retq   

0000000000402d1a <vfprintf>:

int vfprintf(FILE *restrict f, const char *restrict fmt, va_list ap)
{
  402d1a:	41 57                	push   %r15
  402d1c:	41 56                	push   %r14
	va_list ap2;
	int nl_type[NL_ARGMAX+1] = {0};
  402d1e:	31 c0                	xor    %eax,%eax
{
  402d20:	41 55                	push   %r13
  402d22:	41 54                	push   %r12
  402d24:	49 89 fd             	mov    %rdi,%r13
  402d27:	55                   	push   %rbp
  402d28:	53                   	push   %rbx
	int nl_type[NL_ARGMAX+1] = {0};
  402d29:	b9 0a 00 00 00       	mov    $0xa,%ecx

	/* the copy allows passing va_list* even if va_list is an array */
	va_copy(ap2, ap);
	if (printf_core(0, fmt, &ap2, nl_arg, nl_type) < 0) {
		va_end(ap2);
		return -1;
  402d2e:	83 cb ff             	or     $0xffffffff,%ebx
{
  402d31:	48 81 ec 58 01 00 00 	sub    $0x158,%rsp
	int nl_type[NL_ARGMAX+1] = {0};
  402d38:	48 8d 7c 24 38       	lea    0x38(%rsp),%rdi
{
  402d3d:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  402d42:	48 89 d6             	mov    %rdx,%rsi
	if (printf_core(0, fmt, &ap2, nl_arg, nl_type) < 0) {
  402d45:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
  402d4a:	4c 8d b4 24 b0 00 00 	lea    0xb0(%rsp),%r14
  402d51:	00 
	int nl_type[NL_ARGMAX+1] = {0};
  402d52:	f3 ab                	rep stos %eax,%es:(%rdi)
	va_copy(ap2, ap);
  402d54:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
  402d59:	b9 06 00 00 00       	mov    $0x6,%ecx
	if (printf_core(0, fmt, &ap2, nl_arg, nl_type) < 0) {
  402d5e:	4d 89 f8             	mov    %r15,%r8
	va_copy(ap2, ap);
  402d61:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  402d66:	48 89 c7             	mov    %rax,%rdi
	if (printf_core(0, fmt, &ap2, nl_arg, nl_type) < 0) {
  402d69:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
	va_copy(ap2, ap);
  402d6e:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
	if (printf_core(0, fmt, &ap2, nl_arg, nl_type) < 0) {
  402d70:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  402d75:	31 ff                	xor    %edi,%edi
  402d77:	4c 89 f1             	mov    %r14,%rcx
  402d7a:	e8 b7 f5 ff ff       	callq  402336 <printf_core>
  402d7f:	85 c0                	test   %eax,%eax
  402d81:	0f 88 e9 00 00 00    	js     402e70 <vfprintf+0x156>
	}

	FLOCK(f);
  402d87:	41 8b 85 8c 00 00 00 	mov    0x8c(%r13),%eax
  402d8e:	45 31 e4             	xor    %r12d,%r12d
  402d91:	85 c0                	test   %eax,%eax
  402d93:	78 0b                	js     402da0 <vfprintf+0x86>
  402d95:	4c 89 ef             	mov    %r13,%rdi
  402d98:	e8 fa 1e 00 00       	callq  404c97 <__lockfile>
  402d9d:	41 89 c4             	mov    %eax,%r12d
	olderr = f->flags & F_ERR;
  402da0:	41 8b 45 00          	mov    0x0(%r13),%eax
  402da4:	89 c3                	mov    %eax,%ebx
  402da6:	83 e3 20             	and    $0x20,%ebx
	if (f->mode < 1) f->flags &= ~F_ERR;
  402da9:	41 80 bd 8a 00 00 00 	cmpb   $0x0,0x8a(%r13)
  402db0:	00 
	olderr = f->flags & F_ERR;
  402db1:	89 5c 24 1c          	mov    %ebx,0x1c(%rsp)
	if (f->mode < 1) f->flags &= ~F_ERR;
  402db5:	7f 07                	jg     402dbe <vfprintf+0xa4>
  402db7:	83 e0 df             	and    $0xffffffdf,%eax
  402dba:	41 89 45 00          	mov    %eax,0x0(%r13)
	unsigned char internal_buf[80], *saved_buf = 0;
  402dbe:	31 ed                	xor    %ebp,%ebp
	if (!f->buf_size) {
  402dc0:	49 83 7d 60 00       	cmpq   $0x0,0x60(%r13)
  402dc5:	75 29                	jne    402df0 <vfprintf+0xd6>
		saved_buf = f->buf;
		f->wpos = f->wbase = f->buf = internal_buf;
  402dc7:	48 8d 44 24 60       	lea    0x60(%rsp),%rax
		saved_buf = f->buf;
  402dcc:	49 8b 6d 58          	mov    0x58(%r13),%rbp
		f->buf_size = sizeof internal_buf;
  402dd0:	49 c7 45 60 50 00 00 	movq   $0x50,0x60(%r13)
  402dd7:	00 
		f->wpos = f->wbase = f->buf = internal_buf;
  402dd8:	49 89 45 58          	mov    %rax,0x58(%r13)
  402ddc:	49 89 45 38          	mov    %rax,0x38(%r13)
  402de0:	49 89 45 28          	mov    %rax,0x28(%r13)
		f->wend = internal_buf + sizeof internal_buf;
  402de4:	48 8d 84 24 b0 00 00 	lea    0xb0(%rsp),%rax
  402deb:	00 
  402dec:	49 89 45 20          	mov    %rax,0x20(%r13)
	}
	ret = printf_core(f, fmt, &ap2, nl_arg, nl_type);
  402df0:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
  402df5:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  402dfa:	4d 89 f8             	mov    %r15,%r8
  402dfd:	4c 89 f1             	mov    %r14,%rcx
  402e00:	4c 89 ef             	mov    %r13,%rdi
  402e03:	e8 2e f5 ff ff       	callq  402336 <printf_core>
	if (saved_buf) {
  402e08:	48 85 ed             	test   %rbp,%rbp
	ret = printf_core(f, fmt, &ap2, nl_arg, nl_type);
  402e0b:	89 c3                	mov    %eax,%ebx
	if (saved_buf) {
  402e0d:	74 3c                	je     402e4b <vfprintf+0x131>
		f->write(f, 0, 0);
  402e0f:	31 d2                	xor    %edx,%edx
  402e11:	31 f6                	xor    %esi,%esi
  402e13:	4c 89 ef             	mov    %r13,%rdi
  402e16:	41 ff 55 48          	callq  *0x48(%r13)
		if (!f->wpos) ret = -1;
  402e1a:	49 83 7d 28 00       	cmpq   $0x0,0x28(%r13)
  402e1f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
		f->buf = saved_buf;
  402e24:	49 89 6d 58          	mov    %rbp,0x58(%r13)
		f->buf_size = 0;
  402e28:	49 c7 45 60 00 00 00 	movq   $0x0,0x60(%r13)
  402e2f:	00 
		f->wpos = f->wbase = f->wend = 0;
  402e30:	49 c7 45 20 00 00 00 	movq   $0x0,0x20(%r13)
  402e37:	00 
  402e38:	49 c7 45 38 00 00 00 	movq   $0x0,0x38(%r13)
  402e3f:	00 
  402e40:	49 c7 45 28 00 00 00 	movq   $0x0,0x28(%r13)
  402e47:	00 
		if (!f->wpos) ret = -1;
  402e48:	0f 44 d8             	cmove  %eax,%ebx
	}
	if (f->flags & F_ERR) ret = -1;
  402e4b:	41 8b 45 00          	mov    0x0(%r13),%eax
	f->flags |= olderr;
  402e4f:	8b 6c 24 1c          	mov    0x1c(%rsp),%ebp
	if (f->flags & F_ERR) ret = -1;
  402e53:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  402e58:	a8 20                	test   $0x20,%al
  402e5a:	0f 45 da             	cmovne %edx,%ebx
	f->flags |= olderr;
  402e5d:	09 c5                	or     %eax,%ebp
	FUNLOCK(f);
  402e5f:	45 85 e4             	test   %r12d,%r12d
	f->flags |= olderr;
  402e62:	41 89 6d 00          	mov    %ebp,0x0(%r13)
	FUNLOCK(f);
  402e66:	74 08                	je     402e70 <vfprintf+0x156>
  402e68:	4c 89 ef             	mov    %r13,%rdi
  402e6b:	e8 7b 1e 00 00       	callq  404ceb <__unlockfile>
	va_end(ap2);
	return ret;
}
  402e70:	48 81 c4 58 01 00 00 	add    $0x158,%rsp
  402e77:	89 d8                	mov    %ebx,%eax
  402e79:	5b                   	pop    %rbx
  402e7a:	5d                   	pop    %rbp
  402e7b:	41 5c                	pop    %r12
  402e7d:	41 5d                	pop    %r13
  402e7f:	41 5e                	pop    %r14
  402e81:	41 5f                	pop    %r15
  402e83:	c3                   	retq   
  402e84:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402e8b:	00 00 00 
  402e8e:	66 90                	xchg   %ax,%ax

0000000000402e90 <strchr>:
#include <string.h>

char *__strchrnul(const char *, int);

char *strchr(const char *s, int c)
{
  402e90:	53                   	push   %rbx
  402e91:	89 f3                	mov    %esi,%ebx
	char *r = __strchrnul(s, c);
  402e93:	e8 18 00 00 00       	callq  402eb0 <__strchrnul>
	return *(unsigned char *)r == (unsigned char)c ? r : 0;
  402e98:	38 18                	cmp    %bl,(%rax)
  402e9a:	ba 00 00 00 00       	mov    $0x0,%edx
}
  402e9f:	5b                   	pop    %rbx
	return *(unsigned char *)r == (unsigned char)c ? r : 0;
  402ea0:	48 0f 45 c2          	cmovne %rdx,%rax
}
  402ea4:	c3                   	retq   
  402ea5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  402eac:	00 00 00 
  402eaf:	90                   	nop

0000000000402eb0 <__strchrnul>:
#define ONES ((size_t)-1/UCHAR_MAX)
#define HIGHS (ONES * (UCHAR_MAX/2+1))
#define HASZERO(x) ((x)-ONES & ~(x) & HIGHS)

char *__strchrnul(const char *s, int c)
{
  402eb0:	40 0f b6 f6          	movzbl %sil,%esi
  402eb4:	53                   	push   %rbx
  402eb5:	48 89 fb             	mov    %rdi,%rbx
	size_t *w, k;

	c = (unsigned char)c;
	if (!c) return (char *)s + strlen(s);
  402eb8:	85 f6                	test   %esi,%esi
  402eba:	0f 84 e0 00 00 00    	je     402fa0 <__strchrnul+0xf0>

	for (; (uintptr_t)s % ALIGN; s++)
  402ec0:	40 f6 c7 07          	test   $0x7,%dil
  402ec4:	74 36                	je     402efc <__strchrnul+0x4c>
		if (!*s || *(unsigned char *)s == c) return (char *)s;
  402ec6:	0f b6 07             	movzbl (%rdi),%eax
  402ec9:	84 c0                	test   %al,%al
  402ecb:	0f 84 c6 00 00 00    	je     402f97 <__strchrnul+0xe7>
  402ed1:	39 c6                	cmp    %eax,%esi
  402ed3:	75 1e                	jne    402ef3 <__strchrnul+0x43>
  402ed5:	e9 bd 00 00 00       	jmpq   402f97 <__strchrnul+0xe7>
  402eda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  402ee0:	0f b6 03             	movzbl (%rbx),%eax
  402ee3:	84 c0                	test   %al,%al
  402ee5:	0f 84 ac 00 00 00    	je     402f97 <__strchrnul+0xe7>
  402eeb:	39 f0                	cmp    %esi,%eax
  402eed:	0f 84 a4 00 00 00    	je     402f97 <__strchrnul+0xe7>
	for (; (uintptr_t)s % ALIGN; s++)
  402ef3:	48 83 c3 01          	add    $0x1,%rbx
  402ef7:	f6 c3 07             	test   $0x7,%bl
  402efa:	75 e4                	jne    402ee0 <__strchrnul+0x30>
	k = ONES * c;
  402efc:	48 bf 01 01 01 01 01 	movabs $0x101010101010101,%rdi
  402f03:	01 01 01 
  402f06:	4c 63 ce             	movslq %esi,%r9
	for (w = (void *)s; !HASZERO(*w) && !HASZERO(*w^k); w++);
  402f09:	48 8b 13             	mov    (%rbx),%rdx
	k = ONES * c;
  402f0c:	4c 0f af cf          	imul   %rdi,%r9
	for (w = (void *)s; !HASZERO(*w) && !HASZERO(*w^k); w++);
  402f10:	49 ba 80 80 80 80 80 	movabs $0x8080808080808080,%r10
  402f17:	80 80 80 
  402f1a:	48 89 d0             	mov    %rdx,%rax
  402f1d:	48 29 f8             	sub    %rdi,%rax
  402f20:	4c 89 c9             	mov    %r9,%rcx
  402f23:	48 31 d1             	xor    %rdx,%rcx
  402f26:	48 f7 d2             	not    %rdx
  402f29:	48 21 d0             	and    %rdx,%rax
  402f2c:	48 89 ca             	mov    %rcx,%rdx
  402f2f:	48 f7 d1             	not    %rcx
  402f32:	48 29 fa             	sub    %rdi,%rdx
  402f35:	48 21 d1             	and    %rdx,%rcx
  402f38:	48 09 c8             	or     %rcx,%rax
  402f3b:	4c 85 d0             	test   %r10,%rax
  402f3e:	75 3c                	jne    402f7c <__strchrnul+0xcc>
  402f40:	48 89 d8             	mov    %rbx,%rax
  402f43:	49 b8 ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r8
  402f4a:	fe fe fe 
  402f4d:	0f 1f 00             	nopl   (%rax)
  402f50:	48 83 c0 08          	add    $0x8,%rax
  402f54:	48 8b 08             	mov    (%rax),%rcx
  402f57:	4c 89 cf             	mov    %r9,%rdi
  402f5a:	4a 8d 14 01          	lea    (%rcx,%r8,1),%rdx
  402f5e:	48 31 cf             	xor    %rcx,%rdi
  402f61:	48 f7 d1             	not    %rcx
  402f64:	48 21 ca             	and    %rcx,%rdx
  402f67:	4a 8d 0c 07          	lea    (%rdi,%r8,1),%rcx
  402f6b:	48 f7 d7             	not    %rdi
  402f6e:	48 21 cf             	and    %rcx,%rdi
  402f71:	48 09 fa             	or     %rdi,%rdx
  402f74:	4c 85 d2             	test   %r10,%rdx
  402f77:	74 d7                	je     402f50 <__strchrnul+0xa0>
  402f79:	48 89 c3             	mov    %rax,%rbx
	for (s = (void *)w; *s && *(unsigned char *)s != c; s++);
  402f7c:	0f b6 03             	movzbl (%rbx),%eax
  402f7f:	84 c0                	test   %al,%al
  402f81:	75 10                	jne    402f93 <__strchrnul+0xe3>
  402f83:	eb 12                	jmp    402f97 <__strchrnul+0xe7>
  402f85:	0f 1f 00             	nopl   (%rax)
  402f88:	48 83 c3 01          	add    $0x1,%rbx
  402f8c:	0f b6 03             	movzbl (%rbx),%eax
  402f8f:	84 c0                	test   %al,%al
  402f91:	74 04                	je     402f97 <__strchrnul+0xe7>
  402f93:	39 c6                	cmp    %eax,%esi
  402f95:	75 f1                	jne    402f88 <__strchrnul+0xd8>
  402f97:	48 89 d8             	mov    %rbx,%rax
	return (char *)s;
}
  402f9a:	5b                   	pop    %rbx
  402f9b:	c3                   	retq   
  402f9c:	0f 1f 40 00          	nopl   0x0(%rax)
	if (!c) return (char *)s + strlen(s);
  402fa0:	e8 0b 00 00 00       	callq  402fb0 <strlen>
  402fa5:	48 01 d8             	add    %rbx,%rax
}
  402fa8:	5b                   	pop    %rbx
  402fa9:	c3                   	retq   
  402faa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000402fb0 <strlen>:

size_t strlen(const char *s)
{
	const char *a = s;
	const size_t *w;
	for (; (uintptr_t)s % ALIGN; s++) if (!*s) return s-a;
  402fb0:	40 f6 c7 07          	test   $0x7,%dil
  402fb4:	74 7a                	je     403030 <strlen+0x80>
  402fb6:	80 3f 00             	cmpb   $0x0,(%rdi)
  402fb9:	74 7a                	je     403035 <strlen+0x85>
  402fbb:	48 89 f8             	mov    %rdi,%rax
  402fbe:	eb 05                	jmp    402fc5 <strlen+0x15>
  402fc0:	80 38 00             	cmpb   $0x0,(%rax)
  402fc3:	74 67                	je     40302c <strlen+0x7c>
  402fc5:	48 83 c0 01          	add    $0x1,%rax
  402fc9:	a8 07                	test   $0x7,%al
  402fcb:	75 f3                	jne    402fc0 <strlen+0x10>
	for (w = (const void *)s; !HASZERO(*w); w++);
  402fcd:	48 8b 10             	mov    (%rax),%rdx
  402fd0:	49 b8 ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r8
  402fd7:	fe fe fe 
  402fda:	48 be 80 80 80 80 80 	movabs $0x8080808080808080,%rsi
  402fe1:	80 80 80 
  402fe4:	4a 8d 0c 02          	lea    (%rdx,%r8,1),%rcx
  402fe8:	48 f7 d2             	not    %rdx
  402feb:	48 21 ca             	and    %rcx,%rdx
  402fee:	48 85 f2             	test   %rsi,%rdx
  402ff1:	75 1b                	jne    40300e <strlen+0x5e>
  402ff3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  402ff8:	48 83 c0 08          	add    $0x8,%rax
  402ffc:	48 8b 10             	mov    (%rax),%rdx
  402fff:	4a 8d 0c 02          	lea    (%rdx,%r8,1),%rcx
  403003:	48 f7 d2             	not    %rdx
  403006:	48 21 ca             	and    %rcx,%rdx
  403009:	48 85 f2             	test   %rsi,%rdx
  40300c:	74 ea                	je     402ff8 <strlen+0x48>
	for (s = (const void *)w; *s; s++);
  40300e:	80 38 00             	cmpb   $0x0,(%rax)
	for (w = (const void *)s; !HASZERO(*w); w++);
  403011:	48 89 c2             	mov    %rax,%rdx
	for (s = (const void *)w; *s; s++);
  403014:	74 13                	je     403029 <strlen+0x79>
  403016:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40301d:	00 00 00 
  403020:	48 83 c2 01          	add    $0x1,%rdx
  403024:	80 3a 00             	cmpb   $0x0,(%rdx)
  403027:	75 f7                	jne    403020 <strlen+0x70>
	return s-a;
  403029:	48 89 d0             	mov    %rdx,%rax
  40302c:	48 29 f8             	sub    %rdi,%rax
}
  40302f:	c3                   	retq   
	for (; (uintptr_t)s % ALIGN; s++) if (!*s) return s-a;
  403030:	48 89 f8             	mov    %rdi,%rax
  403033:	eb 98                	jmp    402fcd <strlen+0x1d>
  403035:	31 c0                	xor    %eax,%eax
  403037:	c3                   	retq   
  403038:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40303f:	00 

0000000000403040 <strnlen>:
#include <string.h>

size_t strnlen(const char *s, size_t n)
{
  403040:	55                   	push   %rbp
  403041:	53                   	push   %rbx
	const char *p = memchr(s, 0, n);
  403042:	48 89 f2             	mov    %rsi,%rdx
{
  403045:	48 89 f3             	mov    %rsi,%rbx
	const char *p = memchr(s, 0, n);
  403048:	31 f6                	xor    %esi,%esi
{
  40304a:	48 89 fd             	mov    %rdi,%rbp
  40304d:	48 83 ec 08          	sub    $0x8,%rsp
	const char *p = memchr(s, 0, n);
  403051:	e8 3a 21 00 00       	callq  405190 <memchr>
	return p ? p-s : n;
  403056:	48 89 c2             	mov    %rax,%rdx
  403059:	48 29 ea             	sub    %rbp,%rdx
  40305c:	48 85 c0             	test   %rax,%rax
  40305f:	48 89 d8             	mov    %rbx,%rax
  403062:	48 0f 45 c2          	cmovne %rdx,%rax
}
  403066:	48 83 c4 08          	add    $0x8,%rsp
  40306a:	5b                   	pop    %rbx
  40306b:	5d                   	pop    %rbp
  40306c:	c3                   	retq   

000000000040306d <memset>:
.global memset
.type memset,@function
memset:
	movzbq %sil,%rax
  40306d:	48 0f b6 c6          	movzbq %sil,%rax
	mov $0x101010101010101,%r8
  403071:	49 b8 01 01 01 01 01 	movabs $0x101010101010101,%r8
  403078:	01 01 01 
	imul %r8,%rax
  40307b:	49 0f af c0          	imul   %r8,%rax

	cmp $126,%rdx
  40307f:	48 83 fa 7e          	cmp    $0x7e,%rdx
	ja 2f
  403083:	77 78                	ja     4030fd <memset+0x90>

	test %edx,%edx
  403085:	85 d2                	test   %edx,%edx
	jz 1f
  403087:	74 70                	je     4030f9 <memset+0x8c>

	mov %sil,(%rdi)
  403089:	40 88 37             	mov    %sil,(%rdi)
	mov %sil,-1(%rdi,%rdx)
  40308c:	40 88 74 17 ff       	mov    %sil,-0x1(%rdi,%rdx,1)
	cmp $2,%edx
  403091:	83 fa 02             	cmp    $0x2,%edx
	jbe 1f
  403094:	76 63                	jbe    4030f9 <memset+0x8c>

	mov %ax,1(%rdi)
  403096:	66 89 47 01          	mov    %ax,0x1(%rdi)
	mov %ax,(-1-2)(%rdi,%rdx)
  40309a:	66 89 44 17 fd       	mov    %ax,-0x3(%rdi,%rdx,1)
	cmp $6,%edx
  40309f:	83 fa 06             	cmp    $0x6,%edx
	jbe 1f
  4030a2:	76 55                	jbe    4030f9 <memset+0x8c>

	mov %eax,(1+2)(%rdi)
  4030a4:	89 47 03             	mov    %eax,0x3(%rdi)
	mov %eax,(-1-2-4)(%rdi,%rdx)
  4030a7:	89 44 17 f9          	mov    %eax,-0x7(%rdi,%rdx,1)
	cmp $14,%edx
  4030ab:	83 fa 0e             	cmp    $0xe,%edx
	jbe 1f
  4030ae:	76 49                	jbe    4030f9 <memset+0x8c>

	mov %rax,(1+2+4)(%rdi)
  4030b0:	48 89 47 07          	mov    %rax,0x7(%rdi)
	mov %rax,(-1-2-4-8)(%rdi,%rdx)
  4030b4:	48 89 44 17 f1       	mov    %rax,-0xf(%rdi,%rdx,1)
	cmp $30,%edx
  4030b9:	83 fa 1e             	cmp    $0x1e,%edx
	jbe 1f
  4030bc:	76 3b                	jbe    4030f9 <memset+0x8c>

	mov %rax,(1+2+4+8)(%rdi)
  4030be:	48 89 47 0f          	mov    %rax,0xf(%rdi)
	mov %rax,(1+2+4+8+8)(%rdi)
  4030c2:	48 89 47 17          	mov    %rax,0x17(%rdi)
	mov %rax,(-1-2-4-8-16)(%rdi,%rdx)
  4030c6:	48 89 44 17 e1       	mov    %rax,-0x1f(%rdi,%rdx,1)
	mov %rax,(-1-2-4-8-8)(%rdi,%rdx)
  4030cb:	48 89 44 17 e9       	mov    %rax,-0x17(%rdi,%rdx,1)
	cmp $62,%edx
  4030d0:	83 fa 3e             	cmp    $0x3e,%edx
	jbe 1f
  4030d3:	76 24                	jbe    4030f9 <memset+0x8c>

	mov %rax,(1+2+4+8+16)(%rdi)
  4030d5:	48 89 47 1f          	mov    %rax,0x1f(%rdi)
	mov %rax,(1+2+4+8+16+8)(%rdi)
  4030d9:	48 89 47 27          	mov    %rax,0x27(%rdi)
	mov %rax,(1+2+4+8+16+16)(%rdi)
  4030dd:	48 89 47 2f          	mov    %rax,0x2f(%rdi)
	mov %rax,(1+2+4+8+16+24)(%rdi)
  4030e1:	48 89 47 37          	mov    %rax,0x37(%rdi)
	mov %rax,(-1-2-4-8-16-32)(%rdi,%rdx)
  4030e5:	48 89 44 17 c1       	mov    %rax,-0x3f(%rdi,%rdx,1)
	mov %rax,(-1-2-4-8-16-24)(%rdi,%rdx)
  4030ea:	48 89 44 17 c9       	mov    %rax,-0x37(%rdi,%rdx,1)
	mov %rax,(-1-2-4-8-16-16)(%rdi,%rdx)
  4030ef:	48 89 44 17 d1       	mov    %rax,-0x2f(%rdi,%rdx,1)
	mov %rax,(-1-2-4-8-16-8)(%rdi,%rdx)
  4030f4:	48 89 44 17 d9       	mov    %rax,-0x27(%rdi,%rdx,1)

1:	mov %rdi,%rax
  4030f9:	48 89 f8             	mov    %rdi,%rax
	ret
  4030fc:	c3                   	retq   

2:	test $15,%edi
  4030fd:	f7 c7 0f 00 00 00    	test   $0xf,%edi
	mov %rdi,%r8
  403103:	49 89 f8             	mov    %rdi,%r8
	mov %rax,-8(%rdi,%rdx)
  403106:	48 89 44 17 f8       	mov    %rax,-0x8(%rdi,%rdx,1)
	mov %rdx,%rcx
  40310b:	48 89 d1             	mov    %rdx,%rcx
	jnz 2f
  40310e:	75 0b                	jne    40311b <memset+0xae>

1:	shr $3,%rcx
  403110:	48 c1 e9 03          	shr    $0x3,%rcx
	rep
  403114:	f3 48 ab             	rep stos %rax,%es:(%rdi)
	stosq
	mov %r8,%rax
  403117:	4c 89 c0             	mov    %r8,%rax
	ret
  40311a:	c3                   	retq   

2:	xor %edx,%edx
  40311b:	31 d2                	xor    %edx,%edx
	sub %edi,%edx
  40311d:	29 fa                	sub    %edi,%edx
	and $15,%edx
  40311f:	83 e2 0f             	and    $0xf,%edx
	mov %rax,(%rdi)
  403122:	48 89 07             	mov    %rax,(%rdi)
	mov %rax,8(%rdi)
  403125:	48 89 47 08          	mov    %rax,0x8(%rdi)
	sub %rdx,%rcx
  403129:	48 29 d1             	sub    %rdx,%rcx
	add %rdx,%rdi
  40312c:	48 01 d7             	add    %rdx,%rdi
	jmp 1b
  40312f:	eb df                	jmp    403110 <memset+0xa3>

0000000000403131 <__lock>:
#include "pthread_impl.h"

void __lock(volatile int *l)
{
	if (libc.threads_minus_1)
  403131:	8b 05 15 73 a0 10    	mov    0x10a07315(%rip),%eax        # 10e0a44c <__libc+0xc>
  403137:	85 c0                	test   %eax,%eax
  403139:	75 01                	jne    40313c <__lock+0xb>
  40313b:	c3                   	retq   
{
  40313c:	55                   	push   %rbp
  40313d:	53                   	push   %rbx
  40313e:	48 8d 6f 04          	lea    0x4(%rdi),%rbp
  403142:	48 89 fb             	mov    %rdi,%rbx
  403145:	48 83 ec 08          	sub    $0x8,%rsp
	__asm__ __volatile__(
  403149:	b8 01 00 00 00       	mov    $0x1,%eax
  40314e:	87 03                	xchg   %eax,(%rbx)
		while (a_swap(l, 1)) __wait(l, l+1, 1, 1);
  403150:	85 c0                	test   %eax,%eax
  403152:	74 17                	je     40316b <__lock+0x3a>
  403154:	b9 01 00 00 00       	mov    $0x1,%ecx
  403159:	ba 01 00 00 00       	mov    $0x1,%edx
  40315e:	48 89 ee             	mov    %rbp,%rsi
  403161:	48 89 df             	mov    %rbx,%rdi
  403164:	e8 40 00 00 00       	callq  4031a9 <__wait>
  403169:	eb de                	jmp    403149 <__lock+0x18>
}
  40316b:	58                   	pop    %rax
  40316c:	5b                   	pop    %rbx
  40316d:	5d                   	pop    %rbp
  40316e:	c3                   	retq   

000000000040316f <__unlock>:

void __unlock(volatile int *l)
{
	if (l[0]) {
  40316f:	8b 07                	mov    (%rdi),%eax
  403171:	85 c0                	test   %eax,%eax
  403173:	74 33                	je     4031a8 <__unlock+0x39>
	__asm__ __volatile__(
  403175:	31 c0                	xor    %eax,%eax
  403177:	89 07                	mov    %eax,(%rdi)
  403179:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		a_store(l, 0);
		if (l[1]) __wake(l, 1, 1);
  40317e:	8b 47 04             	mov    0x4(%rdi),%eax
  403181:	85 c0                	test   %eax,%eax
  403183:	74 23                	je     4031a8 <__unlock+0x39>
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403185:	41 b8 ca 00 00 00    	mov    $0xca,%r8d
  40318b:	ba 01 00 00 00       	mov    $0x1,%edx
  403190:	be 81 00 00 00       	mov    $0x81,%esi
  403195:	4c 89 c0             	mov    %r8,%rax
  403198:	0f 05                	syscall 
void __wait(volatile int *, volatile int *, int, int);
static inline void __wake(volatile void *addr, int cnt, int priv)
{
	if (priv) priv = FUTEX_PRIVATE;
	if (cnt<0) cnt = INT_MAX;
	__syscall(SYS_futex, addr, FUTEX_WAKE|priv, cnt) != -ENOSYS ||
  40319a:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  40319e:	75 08                	jne    4031a8 <__unlock+0x39>
  4031a0:	4c 89 c0             	mov    %r8,%rax
  4031a3:	48 89 d6             	mov    %rdx,%rsi
  4031a6:	0f 05                	syscall 
  4031a8:	c3                   	retq   

00000000004031a9 <__wait>:
#include "pthread_impl.h"

void __wait(volatile int *addr, volatile int *waiters, int val, int priv)
{
	int spins=100;
	if (priv) priv = FUTEX_PRIVATE;
  4031a9:	b8 80 00 00 00       	mov    $0x80,%eax
  4031ae:	85 c9                	test   %ecx,%ecx
{
  4031b0:	41 54                	push   %r12
	if (priv) priv = FUTEX_PRIVATE;
  4031b2:	0f 45 c8             	cmovne %eax,%ecx
{
  4031b5:	55                   	push   %rbp
  4031b6:	49 89 f0             	mov    %rsi,%r8
  4031b9:	53                   	push   %rbx
	if (priv) priv = FUTEX_PRIVATE;
  4031ba:	b8 65 00 00 00       	mov    $0x65,%eax
{
  4031bf:	89 d3                	mov    %edx,%ebx
	while (spins-- && (!waiters || !*waiters)) {
  4031c1:	ff c8                	dec    %eax
  4031c3:	74 18                	je     4031dd <__wait+0x34>
  4031c5:	4d 85 c0             	test   %r8,%r8
  4031c8:	75 0a                	jne    4031d4 <__wait+0x2b>
		if (*addr==val) a_spin();
  4031ca:	8b 17                	mov    (%rdi),%edx
  4031cc:	39 da                	cmp    %ebx,%edx
  4031ce:	75 50                	jne    403220 <__wait+0x77>
	__asm__ __volatile__( "pause" : : : "memory" );
  4031d0:	f3 90                	pause  
  4031d2:	eb ed                	jmp    4031c1 <__wait+0x18>
	while (spins-- && (!waiters || !*waiters)) {
  4031d4:	41 8b 10             	mov    (%r8),%edx
  4031d7:	85 d2                	test   %edx,%edx
  4031d9:	74 ef                	je     4031ca <__wait+0x21>
  4031db:	eb 05                	jmp    4031e2 <__wait+0x39>
		else return;
	}
	if (waiters) a_inc(waiters);
  4031dd:	4d 85 c0             	test   %r8,%r8
  4031e0:	74 04                	je     4031e6 <__wait+0x3d>
	__asm__ __volatile__(
  4031e2:	f0 41 ff 00          	lock incl (%r8)
	while (*addr==val) {
		__syscall(SYS_futex, addr, FUTEX_WAIT|priv, val, 0) != -ENOSYS
  4031e6:	48 63 d3             	movslq %ebx,%rdx
  4031e9:	4c 63 c9             	movslq %ecx,%r9

static __inline long __syscall4(long n, long a1, long a2, long a3, long a4)
{
	unsigned long ret;
	register long r10 __asm__("r10") = a4;
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  4031ec:	bd ca 00 00 00       	mov    $0xca,%ebp
  4031f1:	41 bc ca 00 00 00    	mov    $0xca,%r12d
	while (*addr==val) {
  4031f7:	8b 07                	mov    (%rdi),%eax
  4031f9:	39 c3                	cmp    %eax,%ebx
  4031fb:	75 1a                	jne    403217 <__wait+0x6e>
	register long r10 __asm__("r10") = a4;
  4031fd:	45 31 d2             	xor    %r10d,%r10d
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403200:	48 89 e8             	mov    %rbp,%rax
  403203:	4c 89 ce             	mov    %r9,%rsi
  403206:	0f 05                	syscall 
		|| __syscall(SYS_futex, addr, FUTEX_WAIT, val, 0);
  403208:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  40320c:	75 e9                	jne    4031f7 <__wait+0x4e>
  40320e:	31 f6                	xor    %esi,%esi
  403210:	4c 89 e0             	mov    %r12,%rax
  403213:	0f 05                	syscall 
  403215:	eb e0                	jmp    4031f7 <__wait+0x4e>
	}
	if (waiters) a_dec(waiters);
  403217:	4d 85 c0             	test   %r8,%r8
  40321a:	74 04                	je     403220 <__wait+0x77>
	__asm__ __volatile__(
  40321c:	f0 41 ff 08          	lock decl (%r8)
}
  403220:	5b                   	pop    %rbx
  403221:	5d                   	pop    %rbp
  403222:	41 5c                	pop    %r12
  403224:	c3                   	retq   

0000000000403225 <gettimeofday>:
#include "syscall.h"

int gettimeofday(struct timeval *restrict tv, void *restrict tz)
{
	struct timespec ts;
	if (!tv) return 0;
  403225:	48 85 ff             	test   %rdi,%rdi
  403228:	74 33                	je     40325d <gettimeofday+0x38>
{
  40322a:	53                   	push   %rbx
  40322b:	48 89 fb             	mov    %rdi,%rbx
	clock_gettime(CLOCK_REALTIME, &ts);
  40322e:	31 ff                	xor    %edi,%edi
{
  403230:	48 83 ec 10          	sub    $0x10,%rsp
	clock_gettime(CLOCK_REALTIME, &ts);
  403234:	48 89 e6             	mov    %rsp,%rsi
  403237:	e8 eb 20 00 00       	callq  405327 <__clock_gettime>
	tv->tv_sec = ts.tv_sec;
  40323c:	48 8b 04 24          	mov    (%rsp),%rax
	tv->tv_usec = (int)ts.tv_nsec / 1000;
  403240:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
	tv->tv_sec = ts.tv_sec;
  403245:	48 89 03             	mov    %rax,(%rbx)
	tv->tv_usec = (int)ts.tv_nsec / 1000;
  403248:	8b 44 24 08          	mov    0x8(%rsp),%eax
  40324c:	99                   	cltd   
  40324d:	f7 f9                	idiv   %ecx
  40324f:	48 98                	cltq   
  403251:	48 89 43 08          	mov    %rax,0x8(%rbx)
	return 0;
}
  403255:	48 83 c4 10          	add    $0x10,%rsp
  403259:	31 c0                	xor    %eax,%eax
  40325b:	5b                   	pop    %rbx
  40325c:	c3                   	retq   
  40325d:	31 c0                	xor    %eax,%eax
  40325f:	c3                   	retq   

0000000000403260 <__init_tp>:
#include "libc.h"
#include "atomic.h"
#include "syscall.h"

int __init_tp(void *p)
{
  403260:	53                   	push   %rbx
	pthread_t td = p;
	td->self = td;
  403261:	48 89 3f             	mov    %rdi,(%rdi)
{
  403264:	48 89 fb             	mov    %rdi,%rbx
	int r = __set_thread_area(TP_ADJ(p));
  403267:	e8 62 20 00 00       	callq  4052ce <__set_thread_area>
  40326c:	83 ca ff             	or     $0xffffffff,%edx
	if (r < 0) return -1;
  40326f:	85 c0                	test   %eax,%eax
  403271:	78 38                	js     4032ab <__init_tp+0x4b>
	if (!r) libc.can_do_threads = 1;
  403273:	75 0a                	jne    40327f <__init_tp+0x1f>
  403275:	c7 05 c1 71 a0 10 01 	movl   $0x1,0x10a071c1(%rip)        # 10e0a440 <__libc>
  40327c:	00 00 00 
	td->tid = __syscall(SYS_set_tid_address, &td->tid);
  40327f:	48 8d 7b 38          	lea    0x38(%rbx),%rdi
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  403283:	b8 da 00 00 00       	mov    $0xda,%eax
  403288:	0f 05                	syscall 
  40328a:	89 43 38             	mov    %eax,0x38(%rbx)
	td->locale = &libc.global_locale;
  40328d:	48 8d 05 ec 71 a0 10 	lea    0x10a071ec(%rip),%rax        # 10e0a480 <__libc+0x40>
	td->robust_list.head = &td->robust_list.head;
	return 0;
  403294:	31 d2                	xor    %edx,%edx
	td->locale = &libc.global_locale;
  403296:	48 89 83 c8 00 00 00 	mov    %rax,0xc8(%rbx)
	td->robust_list.head = &td->robust_list.head;
  40329d:	48 8d 83 a8 00 00 00 	lea    0xa8(%rbx),%rax
  4032a4:	48 89 83 a8 00 00 00 	mov    %rax,0xa8(%rbx)
}
  4032ab:	89 d0                	mov    %edx,%eax
  4032ad:	5b                   	pop    %rbx
  4032ae:	c3                   	retq   

00000000004032af <__copy_tls>:
#define MIN_TLS_ALIGN offsetof(struct builtin_tls, pt)

static struct tls_module main_tls;

void *__copy_tls(unsigned char *mem)
{
  4032af:	41 55                	push   %r13
  4032b1:	41 54                	push   %r12
  4032b3:	4c 8d 6f 08          	lea    0x8(%rdi),%r13
  4032b7:	55                   	push   %rbp
  4032b8:	53                   	push   %rbx
  4032b9:	49 89 fc             	mov    %rdi,%r12
  4032bc:	48 83 ec 08          	sub    $0x8,%rsp
		memcpy(dtv[i], p->image, p->len);
	}
#else
	dtv = (void **)mem;

	mem += libc.tls_size - sizeof(struct pthread);
  4032c0:	48 8b 05 99 71 a0 10 	mov    0x10a07199(%rip),%rax        # 10e0a460 <__libc+0x20>
	mem -= (uintptr_t)mem & (libc.tls_align-1);
  4032c7:	48 8b 1d 9a 71 a0 10 	mov    0x10a0719a(%rip),%rbx        # 10e0a468 <__libc+0x28>
	td = (pthread_t)mem;

	for (i=1, p=libc.tls_head; p; i++, p=p->next) {
  4032ce:	48 8b 2d 83 71 a0 10 	mov    0x10a07183(%rip),%rbp        # 10e0a458 <__libc+0x18>
	mem += libc.tls_size - sizeof(struct pthread);
  4032d5:	48 8d 84 07 e8 fe ff 	lea    -0x118(%rdi,%rax,1),%rax
  4032dc:	ff 
	mem -= (uintptr_t)mem & (libc.tls_align-1);
  4032dd:	48 f7 db             	neg    %rbx
  4032e0:	48 21 c3             	and    %rax,%rbx
	for (i=1, p=libc.tls_head; p; i++, p=p->next) {
  4032e3:	48 85 ed             	test   %rbp,%rbp
  4032e6:	74 22                	je     40330a <__copy_tls+0x5b>
		dtv[i] = mem - p->offset;
  4032e8:	48 89 df             	mov    %rbx,%rdi
  4032eb:	48 2b 7d 28          	sub    0x28(%rbp),%rdi
		memcpy(dtv[i], p->image, p->len);
  4032ef:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  4032f3:	49 83 c5 08          	add    $0x8,%r13
		dtv[i] = mem - p->offset;
  4032f7:	49 89 7d f8          	mov    %rdi,-0x8(%r13)
		memcpy(dtv[i], p->image, p->len);
  4032fb:	48 8b 75 08          	mov    0x8(%rbp),%rsi
  4032ff:	e8 98 1f 00 00       	callq  40529c <memcpy>
	for (i=1, p=libc.tls_head; p; i++, p=p->next) {
  403304:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
  403308:	eb d9                	jmp    4032e3 <__copy_tls+0x34>
	}
#endif
	dtv[0] = (void *)libc.tls_cnt;
  40330a:	48 8b 05 5f 71 a0 10 	mov    0x10a0715f(%rip),%rax        # 10e0a470 <__libc+0x30>
  403311:	49 89 04 24          	mov    %rax,(%r12)
	td->dtv = td->dtv_copy = dtv;
  403315:	4c 89 a3 10 01 00 00 	mov    %r12,0x110(%rbx)
	return td;
}
  40331c:	48 89 d8             	mov    %rbx,%rax
	td->dtv = td->dtv_copy = dtv;
  40331f:	4c 89 63 08          	mov    %r12,0x8(%rbx)
}
  403323:	5a                   	pop    %rdx
  403324:	5b                   	pop    %rbx
  403325:	5d                   	pop    %rbp
  403326:	41 5c                	pop    %r12
  403328:	41 5d                	pop    %r13
  40332a:	c3                   	retq   

000000000040332b <__init_tls>:

__attribute__((__weak__, __visibility__("hidden")))
extern const size_t _DYNAMIC[];

static void static_init_tls(size_t *aux)
{
  40332b:	48 83 ec 08          	sub    $0x8,%rsp
	size_t n;
	Phdr *phdr, *tls_phdr=0;
	size_t base = 0;
	void *mem;

	for (p=(void *)aux[AT_PHDR],n=aux[AT_PHNUM]; n; n--,p+=aux[AT_PHENT]) {
  40332f:	4c 8b 4f 18          	mov    0x18(%rdi),%r9
  403333:	48 8b 77 28          	mov    0x28(%rdi),%rsi
	size_t base = 0;
  403337:	31 c9                	xor    %ecx,%ecx
	Phdr *phdr, *tls_phdr=0;
  403339:	31 c0                	xor    %eax,%eax
	for (p=(void *)aux[AT_PHDR],n=aux[AT_PHNUM]; n; n--,p+=aux[AT_PHENT]) {
  40333b:	4c 89 ca             	mov    %r9,%rdx
  40333e:	48 85 f6             	test   %rsi,%rsi
  403341:	74 3a                	je     40337d <__init_tls+0x52>
		phdr = (void *)p;
		if (phdr->p_type == PT_PHDR)
  403343:	44 8b 02             	mov    (%rdx),%r8d
  403346:	41 83 f8 06          	cmp    $0x6,%r8d
  40334a:	75 05                	jne    403351 <__init_tls+0x26>
			base = aux[AT_PHDR] - phdr->p_vaddr;
  40334c:	4c 89 c9             	mov    %r9,%rcx
  40334f:	eb 15                	jmp    403366 <__init_tls+0x3b>
		if (phdr->p_type == PT_DYNAMIC && _DYNAMIC)
  403351:	41 83 f8 02          	cmp    $0x2,%r8d
  403355:	75 15                	jne    40336c <__init_tls+0x41>
  403357:	49 c7 c0 00 00 00 00 	mov    $0x0,%r8
  40335e:	4d 85 c0             	test   %r8,%r8
  403361:	74 11                	je     403374 <__init_tls+0x49>
			base = (size_t)_DYNAMIC - phdr->p_vaddr;
  403363:	4c 89 c1             	mov    %r8,%rcx
  403366:	48 2b 4a 10          	sub    0x10(%rdx),%rcx
  40336a:	eb 08                	jmp    403374 <__init_tls+0x49>
		if (phdr->p_type == PT_TLS)
  40336c:	41 83 f8 07          	cmp    $0x7,%r8d
  403370:	48 0f 44 c2          	cmove  %rdx,%rax
	for (p=(void *)aux[AT_PHDR],n=aux[AT_PHNUM]; n; n--,p+=aux[AT_PHENT]) {
  403374:	48 ff ce             	dec    %rsi
  403377:	48 03 57 20          	add    0x20(%rdi),%rdx
  40337b:	eb c1                	jmp    40333e <__init_tls+0x13>
			tls_phdr = phdr;
	}

	if (tls_phdr) {
  40337d:	48 85 c0             	test   %rax,%rax
  403380:	74 45                	je     4033c7 <__init_tls+0x9c>
		main_tls.image = (void *)(base + tls_phdr->p_vaddr);
		main_tls.len = tls_phdr->p_filesz;
  403382:	48 8b 50 20          	mov    0x20(%rax),%rdx
		main_tls.image = (void *)(base + tls_phdr->p_vaddr);
  403386:	48 03 48 10          	add    0x10(%rax),%rcx
		main_tls.len = tls_phdr->p_filesz;
  40338a:	48 89 15 df 47 20 00 	mov    %rdx,0x2047df(%rip)        # 607b70 <main_tls+0x10>
		main_tls.size = tls_phdr->p_memsz;
  403391:	48 8b 50 28          	mov    0x28(%rax),%rdx
		main_tls.align = tls_phdr->p_align;
  403395:	48 8b 40 30          	mov    0x30(%rax),%rax
		main_tls.image = (void *)(base + tls_phdr->p_vaddr);
  403399:	48 89 0d c8 47 20 00 	mov    %rcx,0x2047c8(%rip)        # 607b68 <main_tls+0x8>
		libc.tls_cnt = 1;
  4033a0:	48 c7 05 c5 70 a0 10 	movq   $0x1,0x10a070c5(%rip)        # 10e0a470 <__libc+0x30>
  4033a7:	01 00 00 00 
		main_tls.size = tls_phdr->p_memsz;
  4033ab:	48 89 15 c6 47 20 00 	mov    %rdx,0x2047c6(%rip)        # 607b78 <main_tls+0x18>
		main_tls.align = tls_phdr->p_align;
  4033b2:	48 89 05 c7 47 20 00 	mov    %rax,0x2047c7(%rip)        # 607b80 <main_tls+0x20>
		libc.tls_head = &main_tls;
  4033b9:	48 8d 05 a0 47 20 00 	lea    0x2047a0(%rip),%rax        # 607b60 <main_tls>
  4033c0:	48 89 05 91 70 a0 10 	mov    %rax,0x10a07091(%rip)        # 10e0a458 <__libc+0x18>
	}

	main_tls.size += (-main_tls.size - (uintptr_t)main_tls.image)
  4033c7:	48 8b 0d aa 47 20 00 	mov    0x2047aa(%rip),%rcx        # 607b78 <main_tls+0x18>
		& (main_tls.align-1);
  4033ce:	48 8b 15 ab 47 20 00 	mov    0x2047ab(%rip),%rdx        # 607b80 <main_tls+0x20>
	main_tls.size += (-main_tls.size - (uintptr_t)main_tls.image)
  4033d5:	48 89 c8             	mov    %rcx,%rax
  4033d8:	48 03 05 89 47 20 00 	add    0x204789(%rip),%rax        # 607b68 <main_tls+0x8>
		& (main_tls.align-1);
  4033df:	48 8d 72 ff          	lea    -0x1(%rdx),%rsi
	main_tls.size += (-main_tls.size - (uintptr_t)main_tls.image)
  4033e3:	48 f7 d8             	neg    %rax
		& (main_tls.align-1);
  4033e6:	48 21 f0             	and    %rsi,%rax
	main_tls.size += (-main_tls.size - (uintptr_t)main_tls.image)
  4033e9:	48 01 c8             	add    %rcx,%rax
	if (main_tls.align < MIN_TLS_ALIGN) main_tls.align = MIN_TLS_ALIGN;
  4033ec:	48 83 fa 07          	cmp    $0x7,%rdx
	main_tls.size += (-main_tls.size - (uintptr_t)main_tls.image)
  4033f0:	48 89 05 81 47 20 00 	mov    %rax,0x204781(%rip)        # 607b78 <main_tls+0x18>
	if (main_tls.align < MIN_TLS_ALIGN) main_tls.align = MIN_TLS_ALIGN;
  4033f7:	77 0b                	ja     403404 <__init_tls+0xd9>
  4033f9:	48 c7 05 7c 47 20 00 	movq   $0x8,0x20477c(%rip)        # 607b80 <main_tls+0x20>
  403400:	08 00 00 00 
#ifndef TLS_ABOVE_TP
	main_tls.offset = main_tls.size;
#endif

	libc.tls_align = main_tls.align;
  403404:	48 8b 15 75 47 20 00 	mov    0x204775(%rip),%rdx        # 607b80 <main_tls+0x20>
	main_tls.offset = main_tls.size;
  40340b:	48 89 05 76 47 20 00 	mov    %rax,0x204776(%rip)        # 607b88 <main_tls+0x28>
			MAP_ANONYMOUS|MAP_PRIVATE, -1, 0);
		/* -4095...-1 cast to void * will crash on dereference anyway,
		 * so don't bloat the init code checking for error codes and
		 * explicitly calling a_crash(). */
	} else {
		mem = builtin_tls;
  403412:	48 8d 3d 87 47 20 00 	lea    0x204787(%rip),%rdi        # 607ba0 <builtin_tls>
		+ MIN_TLS_ALIGN-1 & -MIN_TLS_ALIGN;
  403419:	48 8d 84 10 2f 01 00 	lea    0x12f(%rax,%rdx,1),%rax
  403420:	00 
	libc.tls_align = main_tls.align;
  403421:	48 89 15 40 70 a0 10 	mov    %rdx,0x10a07040(%rip)        # 10e0a468 <__libc+0x28>
		+ MIN_TLS_ALIGN-1 & -MIN_TLS_ALIGN;
  403428:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
	if (libc.tls_size > sizeof builtin_tls) {
  40342c:	48 3d a0 01 00 00    	cmp    $0x1a0,%rax
		+ MIN_TLS_ALIGN-1 & -MIN_TLS_ALIGN;
  403432:	48 89 c6             	mov    %rax,%rsi
	libc.tls_size = 2*sizeof(void *) + sizeof(struct pthread)
  403435:	48 89 05 24 70 a0 10 	mov    %rax,0x10a07024(%rip)        # 10e0a460 <__libc+0x20>
	if (libc.tls_size > sizeof builtin_tls) {
  40343c:	76 1e                	jbe    40345c <__init_tls+0x131>
}

static __inline long __syscall6(long n, long a1, long a2, long a3, long a4, long a5, long a6)
{
	unsigned long ret;
	register long r10 __asm__("r10") = a4;
  40343e:	41 ba 22 00 00 00    	mov    $0x22,%r10d
	register long r8 __asm__("r8") = a5;
  403444:	49 83 c8 ff          	or     $0xffffffffffffffff,%r8
	register long r9 __asm__("r9") = a6;
  403448:	45 31 c9             	xor    %r9d,%r9d
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  40344b:	ba 03 00 00 00       	mov    $0x3,%edx
  403450:	31 ff                	xor    %edi,%edi
  403452:	b8 09 00 00 00       	mov    $0x9,%eax
  403457:	0f 05                	syscall 
		mem = (void *)__syscall(
  403459:	48 89 c7             	mov    %rax,%rdi
	}

	/* Failure to initialize thread pointer is always fatal. */
	if (__init_tp(__copy_tls(mem)) < 0)
  40345c:	e8 4e fe ff ff       	callq  4032af <__copy_tls>
  403461:	48 89 c7             	mov    %rax,%rdi
  403464:	e8 f7 fd ff ff       	callq  403260 <__init_tp>
  403469:	85 c0                	test   %eax,%eax
  40346b:	79 01                	jns    40346e <__init_tls+0x143>
	__asm__ __volatile__( "hlt" : : : "memory" );
  40346d:	f4                   	hlt    
		a_crash();
}
  40346e:	58                   	pop    %rax
  40346f:	c3                   	retq   

0000000000403470 <__errno_location>:
static inline struct pthread *__pthread_self()
{
	struct pthread *self;
	__asm__ __volatile__ ("mov %%fs:0,%0" : "=r" (self) );
  403470:	64 48 8b 04 25 00 00 	mov    %fs:0x0,%rax
  403477:	00 00 
#include "pthread_impl.h"

int *__errno_location(void)
{
	return &__pthread_self()->errno_val;
  403479:	48 83 c0 44          	add    $0x44,%rax
}
  40347d:	c3                   	retq   

000000000040347e <__strerror_l>:
	 * historical typo, so we just remap it. */
	if (EDQUOT==1133) {
		if (e==109) e=-1;
		else if (e==EDQUOT) e=109;
	}
	for (i=0; errid[i] && errid[i] != e; i++);
  40347e:	4c 8d 05 7b 35 00 00 	lea    0x357b(%rip),%r8        # 406a00 <errid>
  403485:	31 d2                	xor    %edx,%edx
  403487:	41 0f b6 04 10       	movzbl (%r8,%rdx,1),%eax
  40348c:	89 d1                	mov    %edx,%ecx
  40348e:	84 c0                	test   %al,%al
  403490:	74 07                	je     403499 <__strerror_l+0x1b>
  403492:	48 ff c2             	inc    %rdx
  403495:	39 f8                	cmp    %edi,%eax
  403497:	75 ee                	jne    403487 <__strerror_l+0x9>
  403499:	48 8d 3d 40 2e 00 00 	lea    0x2e40(%rip),%rdi        # 4062e0 <errmsg>
	for (s=errmsg; i; s++, i--) for (; *s; s++);
  4034a0:	85 c9                	test   %ecx,%ecx
  4034a2:	74 0d                	je     4034b1 <__strerror_l+0x33>
  4034a4:	80 3f 00             	cmpb   $0x0,(%rdi)
  4034a7:	48 8d 7f 01          	lea    0x1(%rdi),%rdi
  4034ab:	75 f7                	jne    4034a4 <__strerror_l+0x26>
  4034ad:	ff c9                	dec    %ecx
  4034af:	eb ef                	jmp    4034a0 <__strerror_l+0x22>
	return (char *)LCTRANS(s, LC_MESSAGES, loc);
  4034b1:	48 8b 76 28          	mov    0x28(%rsi),%rsi
  4034b5:	e9 62 00 00 00       	jmpq   40351c <__lctrans>

00000000004034ba <strerror>:
  4034ba:	64 48 8b 04 25 00 00 	mov    %fs:0x0,%rax
  4034c1:	00 00 
}

char *strerror(int e)
{
	return __strerror_l(e, CURRENT_LOCALE);
  4034c3:	48 8b b0 c8 00 00 00 	mov    0xc8(%rax),%rsi
  4034ca:	e9 af ff ff ff       	jmpq   40347e <__strerror_l>

00000000004034cf <_Exit>:
#include <stdlib.h>
#include "syscall.h"

_Noreturn void _Exit(int ec)
{
	__syscall(SYS_exit_group, ec);
  4034cf:	48 63 ff             	movslq %edi,%rdi
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  4034d2:	b8 e7 00 00 00       	mov    $0xe7,%eax
  4034d7:	0f 05                	syscall 
  4034d9:	ba 3c 00 00 00       	mov    $0x3c,%edx
  4034de:	48 89 d0             	mov    %rdx,%rax
  4034e1:	0f 05                	syscall 
  4034e3:	eb f9                	jmp    4034de <_Exit+0xf>
  4034e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4034ec:	00 00 00 
  4034ef:	90                   	nop

00000000004034f0 <__syscall_ret>:
#include <errno.h>
#include "syscall.h"

long __syscall_ret(unsigned long r)
{
	if (r > -4096UL) {
  4034f0:	48 81 ff 00 f0 ff ff 	cmp    $0xfffffffffffff000,%rdi
  4034f7:	77 07                	ja     403500 <__syscall_ret+0x10>
		errno = -r;
		return -1;
	}
	return r;
  4034f9:	48 89 f8             	mov    %rdi,%rax
  4034fc:	c3                   	retq   
  4034fd:	0f 1f 00             	nopl   (%rax)
{
  403500:	53                   	push   %rbx
  403501:	48 89 fb             	mov    %rdi,%rbx
		errno = -r;
  403504:	e8 67 ff ff ff       	callq  403470 <__errno_location>
  403509:	89 df                	mov    %ebx,%edi
  40350b:	f7 df                	neg    %edi
  40350d:	89 38                	mov    %edi,(%rax)
		return -1;
  40350f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
}
  403516:	5b                   	pop    %rbx
  403517:	c3                   	retq   

0000000000403518 <__lctrans_impl>:
#include <locale.h>
#include "locale_impl.h"
#include "libc.h"

static const char *dummy(const char *msg, const struct __locale_map *lm)
{
  403518:	48 89 f8             	mov    %rdi,%rax
	return msg;
}
  40351b:	c3                   	retq   

000000000040351c <__lctrans>:

weak_alias(dummy, __lctrans_impl);

const char *__lctrans(const char *msg, const struct __locale_map *lm)
{
	return __lctrans_impl(msg, lm);
  40351c:	e9 f7 ff ff ff       	jmpq   403518 <__lctrans_impl>

0000000000403521 <__lctrans_cur>:
  403521:	64 48 8b 04 25 00 00 	mov    %fs:0x0,%rax
  403528:	00 00 
}

const char *__lctrans_cur(const char *msg)
{
	return __lctrans_impl(msg, CURRENT_LOCALE->cat[LC_MESSAGES]);
  40352a:	48 8b 80 c8 00 00 00 	mov    0xc8(%rax),%rax
  403531:	48 8b 70 28          	mov    0x28(%rax),%rsi
  403535:	e9 de ff ff ff       	jmpq   403518 <__lctrans_impl>
  40353a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000403540 <alloc_fwd>:
	c->csize |= C_INUSE;
	NEXT_CHUNK(c)->psize |= C_INUSE;
}

static int alloc_fwd(struct chunk *c)
{
  403540:	41 57                	push   %r15
  403542:	41 56                	push   %r14
  403544:	41 55                	push   %r13
  403546:	41 54                	push   %r12
  403548:	55                   	push   %rbp
  403549:	53                   	push   %rbx
  40354a:	48 83 ec 18          	sub    $0x18,%rsp
  40354e:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  403553:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	lock(mal.bins[i].lock);
  403558:	4c 8d 35 01 48 20 00 	lea    0x204801(%rip),%r14        # 607d60 <mal>
  40355f:	48 8b 68 08          	mov    0x8(%rax),%rbp
	int i;
	size_t k;
	while (!((k=c->csize) & C_INUSE)) {
  403563:	40 f6 c5 01          	test   $0x1,%bpl
  403567:	0f 85 af 00 00 00    	jne    40361c <alloc_fwd+0xdc>
  40356d:	0f 1f 00             	nopl   (%rax)
	x = x / SIZE_ALIGN - 1;
  403570:	48 89 e8             	mov    %rbp,%rax
  403573:	48 c1 e8 05          	shr    $0x5,%rax
  403577:	48 83 e8 01          	sub    $0x1,%rax
	if (x <= 32) return x;
  40357b:	48 83 f8 20          	cmp    $0x20,%rax
  40357f:	0f 87 db 00 00 00    	ja     403660 <alloc_fwd+0x120>
  403585:	4c 8d 24 40          	lea    (%rax,%rax,2),%r12
  403589:	89 44 24 04          	mov    %eax,0x4(%rsp)
  40358d:	4c 63 e8             	movslq %eax,%r13
  403590:	49 c1 e4 03          	shl    $0x3,%r12
  403594:	4d 8d 44 24 08       	lea    0x8(%r12),%r8
	if (libc.threads_minus_1)
  403599:	8b 05 ad 6e a0 10    	mov    0x10a06ead(%rip),%eax        # 10e0a44c <__libc+0xc>
	lock(mal.bins[i].lock);
  40359f:	4f 8d 3c 06          	lea    (%r14,%r8,1),%r15
	if (libc.threads_minus_1)
  4035a3:	85 c0                	test   %eax,%eax
  4035a5:	0f 84 85 00 00 00    	je     403630 <alloc_fwd+0xf0>
	__asm__ __volatile__(
  4035ab:	b8 01 00 00 00       	mov    $0x1,%eax
  4035b0:	41 87 07             	xchg   %eax,(%r15)
		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  4035b3:	85 c0                	test   %eax,%eax
  4035b5:	49 8d 5f 04          	lea    0x4(%r15),%rbx
  4035b9:	74 26                	je     4035e1 <alloc_fwd+0xa1>
  4035bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4035c0:	b9 01 00 00 00       	mov    $0x1,%ecx
  4035c5:	ba 01 00 00 00       	mov    $0x1,%edx
  4035ca:	48 89 de             	mov    %rbx,%rsi
  4035cd:	4c 89 ff             	mov    %r15,%rdi
  4035d0:	e8 d4 fb ff ff       	callq  4031a9 <__wait>
  4035d5:	ba 01 00 00 00       	mov    $0x1,%edx
  4035da:	41 87 17             	xchg   %edx,(%r15)
  4035dd:	85 d2                	test   %edx,%edx
  4035df:	75 df                	jne    4035c0 <alloc_fwd+0x80>
	if (!mal.bins[i].head)
  4035e1:	4b 8d 44 6d 00       	lea    0x0(%r13,%r13,2),%rax
  4035e6:	49 83 7c c6 10 00    	cmpq   $0x0,0x10(%r14,%rax,8)
  4035ec:	0f 84 03 02 00 00    	je     4037f5 <alloc_fwd+0x2b5>
  4035f2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4035f7:	48 8b 40 08          	mov    0x8(%rax),%rax
		i = bin_index(k);
		lock_bin(i);
		if (c->csize == k) {
  4035fb:	48 39 c5             	cmp    %rax,%rbp
  4035fe:	0f 84 eb 00 00 00    	je     4036ef <alloc_fwd+0x1af>
	if (lk[0]) {
  403604:	41 8b 17             	mov    (%r15),%edx
  403607:	85 d2                	test   %edx,%edx
  403609:	0f 85 6e 01 00 00    	jne    40377d <alloc_fwd+0x23d>
  40360f:	48 89 c5             	mov    %rax,%rbp
	while (!((k=c->csize) & C_INUSE)) {
  403612:	40 f6 c5 01          	test   $0x1,%bpl
  403616:	0f 84 54 ff ff ff    	je     403570 <alloc_fwd+0x30>
			return 1;
		}
		unlock_bin(i);
	}
	return 0;
}
  40361c:	48 83 c4 18          	add    $0x18,%rsp
	return 0;
  403620:	31 c0                	xor    %eax,%eax
}
  403622:	5b                   	pop    %rbx
  403623:	5d                   	pop    %rbp
  403624:	41 5c                	pop    %r12
  403626:	41 5d                	pop    %r13
  403628:	41 5e                	pop    %r14
  40362a:	41 5f                	pop    %r15
  40362c:	c3                   	retq   
  40362d:	0f 1f 00             	nopl   (%rax)
	if (!mal.bins[i].head)
  403630:	4b 8d 44 6d 00       	lea    0x0(%r13,%r13,2),%rax
  403635:	49 83 7c c6 10 00    	cmpq   $0x0,0x10(%r14,%rax,8)
  40363b:	0f 85 ae 00 00 00    	jne    4036ef <alloc_fwd+0x1af>
  403641:	48 89 e8             	mov    %rbp,%rax
		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  403644:	4b 8d 54 6d 00       	lea    0x0(%r13,%r13,2),%rdx
  403649:	4d 01 f4             	add    %r14,%r12
  40364c:	49 8d 14 d6          	lea    (%r14,%rdx,8),%rdx
  403650:	4c 89 62 18          	mov    %r12,0x18(%rdx)
  403654:	4c 89 62 10          	mov    %r12,0x10(%rdx)
  403658:	eb a1                	jmp    4035fb <alloc_fwd+0xbb>
  40365a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	if (x < 512) return bin_tab[x/8-4];
  403660:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  403666:	77 30                	ja     403698 <alloc_fwd+0x158>
  403668:	48 8d 3d f1 33 00 00 	lea    0x33f1(%rip),%rdi        # 406a60 <bin_tab>
  40366f:	48 c1 e8 03          	shr    $0x3,%rax
  403673:	0f b6 74 07 fc       	movzbl -0x4(%rdi,%rax,1),%esi
  403678:	4c 8d 24 76          	lea    (%rsi,%rsi,2),%r12
  40367c:	89 74 24 04          	mov    %esi,0x4(%rsp)
  403680:	4c 63 ee             	movslq %esi,%r13
  403683:	49 c1 e4 03          	shl    $0x3,%r12
  403687:	4d 8d 44 24 08       	lea    0x8(%r12),%r8
  40368c:	e9 08 ff ff ff       	jmpq   403599 <alloc_fwd+0x59>
  403691:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	if (x > 0x1c00) return 63;
  403698:	48 3d 00 1c 00 00    	cmp    $0x1c00,%rax
  40369e:	77 30                	ja     4036d0 <alloc_fwd+0x190>
	return bin_tab[x/128-4] + 16;
  4036a0:	48 8d 1d b9 33 00 00 	lea    0x33b9(%rip),%rbx        # 406a60 <bin_tab>
  4036a7:	48 c1 e8 07          	shr    $0x7,%rax
  4036ab:	44 0f b6 7c 03 fc    	movzbl -0x4(%rbx,%rax,1),%r15d
  4036b1:	41 8d 47 10          	lea    0x10(%r15),%eax
  4036b5:	4c 63 e8             	movslq %eax,%r13
  4036b8:	89 44 24 04          	mov    %eax,0x4(%rsp)
  4036bc:	4f 8d 64 6d 00       	lea    0x0(%r13,%r13,2),%r12
  4036c1:	49 c1 e4 03          	shl    $0x3,%r12
  4036c5:	4d 8d 44 24 08       	lea    0x8(%r12),%r8
  4036ca:	e9 ca fe ff ff       	jmpq   403599 <alloc_fwd+0x59>
  4036cf:	90                   	nop
	if (x > 0x1c00) return 63;
  4036d0:	41 bc e8 05 00 00    	mov    $0x5e8,%r12d
  4036d6:	41 b8 f0 05 00 00    	mov    $0x5f0,%r8d
  4036dc:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%rsp)
  4036e3:	00 
  4036e4:	41 bd 3f 00 00 00    	mov    $0x3f,%r13d
  4036ea:	e9 aa fe ff ff       	jmpq   403599 <alloc_fwd+0x59>
	if (c->prev == c->next)
  4036ef:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  4036f4:	48 8b 43 18          	mov    0x18(%rbx),%rax
  4036f8:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  4036fc:	48 39 d0             	cmp    %rdx,%rax
  4036ff:	0f 84 c3 00 00 00    	je     4037c8 <alloc_fwd+0x288>
	c->next->prev = c->prev;
  403705:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
	c->prev->next = c->next;
  40370a:	48 89 50 10          	mov    %rdx,0x10(%rax)
	c->next->prev = c->prev;
  40370e:	48 8b 57 10          	mov    0x10(%rdi),%rdx
  403712:	48 89 42 18          	mov    %rax,0x18(%rdx)
	c->csize |= C_INUSE;
  403716:	48 89 e8             	mov    %rbp,%rax
	NEXT_CHUNK(c)->psize |= C_INUSE;
  403719:	48 83 e5 fe          	and    $0xfffffffffffffffe,%rbp
	c->csize |= C_INUSE;
  40371d:	48 83 c8 01          	or     $0x1,%rax
  403721:	48 89 47 08          	mov    %rax,0x8(%rdi)
	if (lk[0]) {
  403725:	41 8b 07             	mov    (%r15),%eax
	NEXT_CHUNK(c)->psize |= C_INUSE;
  403728:	48 83 0c 2f 01       	orq    $0x1,(%rdi,%rbp,1)
	if (lk[0]) {
  40372d:	85 c0                	test   %eax,%eax
  40372f:	74 38                	je     403769 <alloc_fwd+0x229>
	__asm__ __volatile__(
  403731:	31 c0                	xor    %eax,%eax
  403733:	41 89 07             	mov    %eax,(%r15)
  403736:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		if (lk[1]) __wake(lk, 1, 1);
  40373b:	41 8b 47 04          	mov    0x4(%r15),%eax
  40373f:	85 c0                	test   %eax,%eax
  403741:	74 26                	je     403769 <alloc_fwd+0x229>
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  403743:	41 b9 ca 00 00 00    	mov    $0xca,%r9d
  403749:	ba 01 00 00 00       	mov    $0x1,%edx
  40374e:	be 81 00 00 00       	mov    $0x81,%esi
  403753:	4c 89 c8             	mov    %r9,%rax
  403756:	4c 89 ff             	mov    %r15,%rdi
  403759:	0f 05                	syscall 
  40375b:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  40375f:	75 08                	jne    403769 <alloc_fwd+0x229>
  403761:	4c 89 c8             	mov    %r9,%rax
  403764:	48 89 d6             	mov    %rdx,%rsi
  403767:	0f 05                	syscall 
}
  403769:	48 83 c4 18          	add    $0x18,%rsp
			return 1;
  40376d:	b8 01 00 00 00       	mov    $0x1,%eax
}
  403772:	5b                   	pop    %rbx
  403773:	5d                   	pop    %rbp
  403774:	41 5c                	pop    %r12
  403776:	41 5d                	pop    %r13
  403778:	41 5e                	pop    %r14
  40377a:	41 5f                	pop    %r15
  40377c:	c3                   	retq   
  40377d:	31 c0                	xor    %eax,%eax
  40377f:	41 89 07             	mov    %eax,(%r15)
  403782:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		if (lk[1]) __wake(lk, 1, 1);
  403787:	41 8b 47 04          	mov    0x4(%r15),%eax
  40378b:	85 c0                	test   %eax,%eax
  40378d:	0f 84 c0 fd ff ff    	je     403553 <alloc_fwd+0x13>
  403793:	41 b9 ca 00 00 00    	mov    $0xca,%r9d
  403799:	ba 01 00 00 00       	mov    $0x1,%edx
  40379e:	be 81 00 00 00       	mov    $0x81,%esi
  4037a3:	4c 89 c8             	mov    %r9,%rax
  4037a6:	4c 89 ff             	mov    %r15,%rdi
  4037a9:	0f 05                	syscall 
  4037ab:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  4037af:	0f 85 9e fd ff ff    	jne    403553 <alloc_fwd+0x13>
  4037b5:	4c 89 c8             	mov    %r9,%rax
  4037b8:	48 89 d6             	mov    %rdx,%rsi
  4037bb:	0f 05                	syscall 
  4037bd:	e9 91 fd ff ff       	jmpq   403553 <alloc_fwd+0x13>
  4037c2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
		a_and_64(&mal.binmap, ~(1ULL<<i));
  4037c8:	0f b6 4c 24 04       	movzbl 0x4(%rsp),%ecx
  4037cd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
  4037d4:	48 d3 c0             	rol    %cl,%rax
	__asm__ __volatile(
  4037d7:	f0 48 21 05 81 45 20 	lock and %rax,0x204581(%rip)        # 607d60 <mal>
  4037de:	00 
  4037df:	48 8b 5c 24 08       	mov    0x8(%rsp),%rbx
  4037e4:	48 8b 43 18          	mov    0x18(%rbx),%rax
  4037e8:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  4037ec:	48 8b 6b 08          	mov    0x8(%rbx),%rbp
  4037f0:	e9 10 ff ff ff       	jmpq   403705 <alloc_fwd+0x1c5>
  4037f5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4037fa:	48 8b 40 08          	mov    0x8(%rax),%rax
  4037fe:	e9 41 fe ff ff       	jmpq   403644 <alloc_fwd+0x104>
  403803:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40380a:	00 00 00 
  40380d:	0f 1f 00             	nopl   (%rax)

0000000000403810 <alloc_rev>:

static int alloc_rev(struct chunk *c)
{
  403810:	41 57                	push   %r15
  403812:	41 56                	push   %r14
  403814:	41 55                	push   %r13
  403816:	41 54                	push   %r12
  403818:	55                   	push   %rbp
  403819:	53                   	push   %rbx
  40381a:	48 83 ec 18          	sub    $0x18,%rsp
  40381e:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  403823:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	lock(mal.bins[i].lock);
  403828:	4c 8d 35 31 45 20 00 	lea    0x204531(%rip),%r14        # 607d60 <mal>
  40382f:	48 8b 28             	mov    (%rax),%rbp
	int i;
	size_t k;
	while (!((k=c->psize) & C_INUSE)) {
  403832:	40 f6 c5 01          	test   $0x1,%bpl
  403836:	0f 85 af 00 00 00    	jne    4038eb <alloc_rev+0xdb>
  40383c:	0f 1f 40 00          	nopl   0x0(%rax)
	x = x / SIZE_ALIGN - 1;
  403840:	48 89 e8             	mov    %rbp,%rax
  403843:	48 c1 e8 05          	shr    $0x5,%rax
  403847:	48 83 e8 01          	sub    $0x1,%rax
	if (x <= 32) return x;
  40384b:	48 83 f8 20          	cmp    $0x20,%rax
  40384f:	0f 87 db 00 00 00    	ja     403930 <alloc_rev+0x120>
  403855:	4c 8d 24 40          	lea    (%rax,%rax,2),%r12
  403859:	89 44 24 04          	mov    %eax,0x4(%rsp)
  40385d:	4c 63 e8             	movslq %eax,%r13
  403860:	49 c1 e4 03          	shl    $0x3,%r12
  403864:	4d 8d 44 24 08       	lea    0x8(%r12),%r8
	if (libc.threads_minus_1)
  403869:	8b 05 dd 6b a0 10    	mov    0x10a06bdd(%rip),%eax        # 10e0a44c <__libc+0xc>
	lock(mal.bins[i].lock);
  40386f:	4f 8d 3c 06          	lea    (%r14,%r8,1),%r15
	if (libc.threads_minus_1)
  403873:	85 c0                	test   %eax,%eax
  403875:	0f 84 85 00 00 00    	je     403900 <alloc_rev+0xf0>
	__asm__ __volatile__(
  40387b:	b8 01 00 00 00       	mov    $0x1,%eax
  403880:	41 87 07             	xchg   %eax,(%r15)
		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  403883:	85 c0                	test   %eax,%eax
  403885:	49 8d 5f 04          	lea    0x4(%r15),%rbx
  403889:	74 26                	je     4038b1 <alloc_rev+0xa1>
  40388b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  403890:	b9 01 00 00 00       	mov    $0x1,%ecx
  403895:	ba 01 00 00 00       	mov    $0x1,%edx
  40389a:	48 89 de             	mov    %rbx,%rsi
  40389d:	4c 89 ff             	mov    %r15,%rdi
  4038a0:	e8 04 f9 ff ff       	callq  4031a9 <__wait>
  4038a5:	ba 01 00 00 00       	mov    $0x1,%edx
  4038aa:	41 87 17             	xchg   %edx,(%r15)
  4038ad:	85 d2                	test   %edx,%edx
  4038af:	75 df                	jne    403890 <alloc_rev+0x80>
	if (!mal.bins[i].head)
  4038b1:	4b 8d 44 6d 00       	lea    0x0(%r13,%r13,2),%rax
  4038b6:	49 83 7c c6 10 00    	cmpq   $0x0,0x10(%r14,%rax,8)
  4038bc:	0f 84 02 02 00 00    	je     403ac4 <alloc_rev+0x2b4>
  4038c2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4038c7:	48 8b 00             	mov    (%rax),%rax
		i = bin_index(k);
		lock_bin(i);
		if (c->psize == k) {
  4038ca:	48 39 c5             	cmp    %rax,%rbp
  4038cd:	0f 84 ec 00 00 00    	je     4039bf <alloc_rev+0x1af>
	if (lk[0]) {
  4038d3:	41 8b 17             	mov    (%r15),%edx
  4038d6:	85 d2                	test   %edx,%edx
  4038d8:	0f 85 75 01 00 00    	jne    403a53 <alloc_rev+0x243>
  4038de:	48 89 c5             	mov    %rax,%rbp
	while (!((k=c->psize) & C_INUSE)) {
  4038e1:	40 f6 c5 01          	test   $0x1,%bpl
  4038e5:	0f 84 55 ff ff ff    	je     403840 <alloc_rev+0x30>
			return 1;
		}
		unlock_bin(i);
	}
	return 0;
}
  4038eb:	48 83 c4 18          	add    $0x18,%rsp
	return 0;
  4038ef:	31 c0                	xor    %eax,%eax
}
  4038f1:	5b                   	pop    %rbx
  4038f2:	5d                   	pop    %rbp
  4038f3:	41 5c                	pop    %r12
  4038f5:	41 5d                	pop    %r13
  4038f7:	41 5e                	pop    %r14
  4038f9:	41 5f                	pop    %r15
  4038fb:	c3                   	retq   
  4038fc:	0f 1f 40 00          	nopl   0x0(%rax)
	if (!mal.bins[i].head)
  403900:	4b 8d 44 6d 00       	lea    0x0(%r13,%r13,2),%rax
  403905:	49 83 7c c6 10 00    	cmpq   $0x0,0x10(%r14,%rax,8)
  40390b:	0f 85 ae 00 00 00    	jne    4039bf <alloc_rev+0x1af>
  403911:	48 89 e8             	mov    %rbp,%rax
		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  403914:	4b 8d 54 6d 00       	lea    0x0(%r13,%r13,2),%rdx
  403919:	4d 01 f4             	add    %r14,%r12
  40391c:	49 8d 14 d6          	lea    (%r14,%rdx,8),%rdx
  403920:	4c 89 62 18          	mov    %r12,0x18(%rdx)
  403924:	4c 89 62 10          	mov    %r12,0x10(%rdx)
  403928:	eb a0                	jmp    4038ca <alloc_rev+0xba>
  40392a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	if (x < 512) return bin_tab[x/8-4];
  403930:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  403936:	77 30                	ja     403968 <alloc_rev+0x158>
  403938:	48 8d 0d 21 31 00 00 	lea    0x3121(%rip),%rcx        # 406a60 <bin_tab>
  40393f:	48 c1 e8 03          	shr    $0x3,%rax
  403943:	0f b6 7c 01 fc       	movzbl -0x4(%rcx,%rax,1),%edi
  403948:	4c 8d 24 7f          	lea    (%rdi,%rdi,2),%r12
  40394c:	89 7c 24 04          	mov    %edi,0x4(%rsp)
  403950:	4c 63 ef             	movslq %edi,%r13
  403953:	49 c1 e4 03          	shl    $0x3,%r12
  403957:	4d 8d 44 24 08       	lea    0x8(%r12),%r8
  40395c:	e9 08 ff ff ff       	jmpq   403869 <alloc_rev+0x59>
  403961:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	if (x > 0x1c00) return 63;
  403968:	48 3d 00 1c 00 00    	cmp    $0x1c00,%rax
  40396e:	77 30                	ja     4039a0 <alloc_rev+0x190>
	return bin_tab[x/128-4] + 16;
  403970:	48 8d 1d e9 30 00 00 	lea    0x30e9(%rip),%rbx        # 406a60 <bin_tab>
  403977:	48 c1 e8 07          	shr    $0x7,%rax
  40397b:	44 0f b6 7c 03 fc    	movzbl -0x4(%rbx,%rax,1),%r15d
  403981:	41 8d 47 10          	lea    0x10(%r15),%eax
  403985:	4c 63 e8             	movslq %eax,%r13
  403988:	89 44 24 04          	mov    %eax,0x4(%rsp)
  40398c:	4f 8d 64 6d 00       	lea    0x0(%r13,%r13,2),%r12
  403991:	49 c1 e4 03          	shl    $0x3,%r12
  403995:	4d 8d 44 24 08       	lea    0x8(%r12),%r8
  40399a:	e9 ca fe ff ff       	jmpq   403869 <alloc_rev+0x59>
  40399f:	90                   	nop
	if (x > 0x1c00) return 63;
  4039a0:	41 bc e8 05 00 00    	mov    $0x5e8,%r12d
  4039a6:	41 b8 f0 05 00 00    	mov    $0x5f0,%r8d
  4039ac:	c7 44 24 04 3f 00 00 	movl   $0x3f,0x4(%rsp)
  4039b3:	00 
  4039b4:	41 bd 3f 00 00 00    	mov    $0x3f,%r13d
  4039ba:	e9 aa fe ff ff       	jmpq   403869 <alloc_rev+0x59>
			unbin(PREV_CHUNK(c), i);
  4039bf:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  4039c4:	48 83 e5 fe          	and    $0xfffffffffffffffe,%rbp
  4039c8:	48 29 e8             	sub    %rbp,%rax
	if (c->prev == c->next)
  4039cb:	48 8b 50 18          	mov    0x18(%rax),%rdx
  4039cf:	48 8b 48 10          	mov    0x10(%rax),%rcx
  4039d3:	48 39 ca             	cmp    %rcx,%rdx
  4039d6:	0f 84 c4 00 00 00    	je     403aa0 <alloc_rev+0x290>
	c->prev->next = c->next;
  4039dc:	48 89 4a 10          	mov    %rcx,0x10(%rdx)
	c->next->prev = c->prev;
  4039e0:	48 8b 48 10          	mov    0x10(%rax),%rcx
  4039e4:	48 89 51 18          	mov    %rdx,0x18(%rcx)
	c->csize |= C_INUSE;
  4039e8:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4039ec:	48 89 d1             	mov    %rdx,%rcx
	NEXT_CHUNK(c)->psize |= C_INUSE;
  4039ef:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
	c->csize |= C_INUSE;
  4039f3:	48 83 c9 01          	or     $0x1,%rcx
  4039f7:	48 89 48 08          	mov    %rcx,0x8(%rax)
	NEXT_CHUNK(c)->psize |= C_INUSE;
  4039fb:	48 83 0c 10 01       	orq    $0x1,(%rax,%rdx,1)
	if (lk[0]) {
  403a00:	41 8b 07             	mov    (%r15),%eax
  403a03:	85 c0                	test   %eax,%eax
  403a05:	74 38                	je     403a3f <alloc_rev+0x22f>
	__asm__ __volatile__(
  403a07:	31 c0                	xor    %eax,%eax
  403a09:	41 89 07             	mov    %eax,(%r15)
  403a0c:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		if (lk[1]) __wake(lk, 1, 1);
  403a11:	41 8b 47 04          	mov    0x4(%r15),%eax
  403a15:	85 c0                	test   %eax,%eax
  403a17:	74 26                	je     403a3f <alloc_rev+0x22f>
  403a19:	41 b9 ca 00 00 00    	mov    $0xca,%r9d
  403a1f:	ba 01 00 00 00       	mov    $0x1,%edx
  403a24:	be 81 00 00 00       	mov    $0x81,%esi
  403a29:	4c 89 c8             	mov    %r9,%rax
  403a2c:	4c 89 ff             	mov    %r15,%rdi
  403a2f:	0f 05                	syscall 
  403a31:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  403a35:	75 08                	jne    403a3f <alloc_rev+0x22f>
  403a37:	4c 89 c8             	mov    %r9,%rax
  403a3a:	48 89 d6             	mov    %rdx,%rsi
  403a3d:	0f 05                	syscall 
}
  403a3f:	48 83 c4 18          	add    $0x18,%rsp
			return 1;
  403a43:	b8 01 00 00 00       	mov    $0x1,%eax
}
  403a48:	5b                   	pop    %rbx
  403a49:	5d                   	pop    %rbp
  403a4a:	41 5c                	pop    %r12
  403a4c:	41 5d                	pop    %r13
  403a4e:	41 5e                	pop    %r14
  403a50:	41 5f                	pop    %r15
  403a52:	c3                   	retq   
  403a53:	31 c0                	xor    %eax,%eax
  403a55:	41 89 07             	mov    %eax,(%r15)
  403a58:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		if (lk[1]) __wake(lk, 1, 1);
  403a5d:	41 8b 47 04          	mov    0x4(%r15),%eax
  403a61:	85 c0                	test   %eax,%eax
  403a63:	0f 84 ba fd ff ff    	je     403823 <alloc_rev+0x13>
  403a69:	41 b9 ca 00 00 00    	mov    $0xca,%r9d
  403a6f:	ba 01 00 00 00       	mov    $0x1,%edx
  403a74:	be 81 00 00 00       	mov    $0x81,%esi
  403a79:	4c 89 c8             	mov    %r9,%rax
  403a7c:	4c 89 ff             	mov    %r15,%rdi
  403a7f:	0f 05                	syscall 
  403a81:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  403a85:	0f 85 98 fd ff ff    	jne    403823 <alloc_rev+0x13>
  403a8b:	4c 89 c8             	mov    %r9,%rax
  403a8e:	48 89 d6             	mov    %rdx,%rsi
  403a91:	0f 05                	syscall 
  403a93:	e9 8b fd ff ff       	jmpq   403823 <alloc_rev+0x13>
  403a98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  403a9f:	00 
		a_and_64(&mal.binmap, ~(1ULL<<i));
  403aa0:	0f b6 4c 24 04       	movzbl 0x4(%rsp),%ecx
  403aa5:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
  403aac:	48 d3 c2             	rol    %cl,%rdx
	__asm__ __volatile(
  403aaf:	f0 48 21 15 a9 42 20 	lock and %rdx,0x2042a9(%rip)        # 607d60 <mal>
  403ab6:	00 
  403ab7:	48 8b 50 18          	mov    0x18(%rax),%rdx
  403abb:	48 8b 48 10          	mov    0x10(%rax),%rcx
  403abf:	e9 18 ff ff ff       	jmpq   4039dc <alloc_rev+0x1cc>
  403ac4:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  403ac9:	48 8b 00             	mov    (%rax),%rax
  403acc:	e9 43 fe ff ff       	jmpq   403914 <alloc_rev+0x104>
  403ad1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  403ad8:	00 00 00 
  403adb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000403ae0 <free>:
	struct chunk *self, *next;
	size_t final_size, new_size, size;
	int reclaim=0;
	int i;

	if (!p) return;
  403ae0:	48 85 ff             	test   %rdi,%rdi
  403ae3:	0f 84 65 04 00 00    	je     403f4e <free+0x46e>
{
  403ae9:	41 57                	push   %r15
  403aeb:	41 56                	push   %r14
  403aed:	41 55                	push   %r13
  403aef:	41 54                	push   %r12

	self = MEM_TO_CHUNK(p);
  403af1:	4c 8d 67 f0          	lea    -0x10(%rdi),%r12
{
  403af5:	55                   	push   %rbp
  403af6:	53                   	push   %rbx
  403af7:	48 83 ec 38          	sub    $0x38,%rsp

	if (IS_MMAPPED(self)) {
  403afb:	48 8b 77 f8          	mov    -0x8(%rdi),%rsi
  403aff:	40 f6 c6 01          	test   $0x1,%sil
  403b03:	0f 84 77 02 00 00    	je     403d80 <free+0x2a0>
		if (extra & 1) a_crash();
		__munmap(base, len);
		return;
	}

	final_size = new_size = CHUNK_SIZE(self);
  403b09:	48 89 f0             	mov    %rsi,%rax
  403b0c:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
	next = NEXT_CHUNK(self);
  403b10:	4d 8d 2c 04          	lea    (%r12,%rax,1),%r13
	final_size = new_size = CHUNK_SIZE(self);
  403b14:	48 89 44 24 18       	mov    %rax,0x18(%rsp)

	/* Crash on corrupted footer (likely from buffer overflow) */
	if (next->psize != self->csize) a_crash();
  403b19:	49 3b 75 00          	cmp    0x0(%r13),%rsi
  403b1d:	74 06                	je     403b25 <free+0x45>
	__asm__ __volatile__( "hlt" : : : "memory" );
  403b1f:	f4                   	hlt    
  403b20:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  403b25:	4c 8d 3d 40 48 20 00 	lea    0x204840(%rip),%r15        # 60836c <mal+0x60c>
{
  403b2c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  403b31:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%rsp)
  403b38:	00 
	__asm__ __volatile__(
  403b39:	bd 01 00 00 00       	mov    $0x1,%ebp
  403b3e:	66 90                	xchg   %ax,%ax

	for (;;) {
		if (self->psize & next->csize & C_INUSE) {
  403b40:	49 8b 04 24          	mov    (%r12),%rax
  403b44:	49 23 45 08          	and    0x8(%r13),%rax
  403b48:	a8 01                	test   $0x1,%al
  403b4a:	0f 84 a0 01 00 00    	je     403cf0 <free+0x210>
			self->csize = final_size | C_INUSE;
  403b50:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  403b55:	48 89 c8             	mov    %rcx,%rax
  403b58:	48 83 c8 01          	or     $0x1,%rax
  403b5c:	49 89 44 24 08       	mov    %rax,0x8(%r12)
			next->psize = final_size | C_INUSE;
  403b61:	49 89 45 00          	mov    %rax,0x0(%r13)
	x = x / SIZE_ALIGN - 1;
  403b65:	48 89 c8             	mov    %rcx,%rax
  403b68:	48 c1 e8 05          	shr    $0x5,%rax
  403b6c:	48 83 e8 01          	sub    $0x1,%rax
	if (x <= 32) return x;
  403b70:	48 83 f8 20          	cmp    $0x20,%rax
  403b74:	89 c1                	mov    %eax,%ecx
  403b76:	76 1f                	jbe    403b97 <free+0xb7>
	if (x < 512) return bin_tab[x/8-4];
  403b78:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  403b7e:	0f 87 2c 02 00 00    	ja     403db0 <free+0x2d0>
  403b84:	48 8d 3d d5 2e 00 00 	lea    0x2ed5(%rip),%rdi        # 406a60 <bin_tab>
  403b8b:	48 c1 e8 03          	shr    $0x3,%rax
  403b8f:	0f b6 4c 07 fc       	movzbl -0x4(%rdi,%rax,1),%ecx
  403b94:	48 89 c8             	mov    %rcx,%rax
  403b97:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
  403b9b:	89 4c 24 2c          	mov    %ecx,0x2c(%rsp)
  403b9f:	48 c1 e0 03          	shl    $0x3,%rax
  403ba3:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  403ba8:	48 8d 58 08          	lea    0x8(%rax),%rbx
  403bac:	48 63 c1             	movslq %ecx,%rax
  403baf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
	lock(mal.bins[i].lock);
  403bb4:	48 8d 05 a5 41 20 00 	lea    0x2041a5(%rip),%rax        # 607d60 <mal>
  403bbb:	48 01 c3             	add    %rax,%rbx
	if (libc.threads_minus_1)
  403bbe:	8b 05 88 68 a0 10    	mov    0x10a06888(%rip),%eax        # 10e0a44c <__libc+0xc>
  403bc4:	85 c0                	test   %eax,%eax
  403bc6:	74 2d                	je     403bf5 <free+0x115>
  403bc8:	89 e8                	mov    %ebp,%eax
  403bca:	87 03                	xchg   %eax,(%rbx)
		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  403bcc:	85 c0                	test   %eax,%eax
  403bce:	74 25                	je     403bf5 <free+0x115>
  403bd0:	4c 8d 73 04          	lea    0x4(%rbx),%r14
  403bd4:	0f 1f 40 00          	nopl   0x0(%rax)
  403bd8:	b9 01 00 00 00       	mov    $0x1,%ecx
  403bdd:	ba 01 00 00 00       	mov    $0x1,%edx
  403be2:	4c 89 f6             	mov    %r14,%rsi
  403be5:	48 89 df             	mov    %rbx,%rdi
  403be8:	e8 bc f5 ff ff       	callq  4031a9 <__wait>
  403bed:	89 e8                	mov    %ebp,%eax
  403bef:	87 03                	xchg   %eax,(%rbx)
  403bf1:	85 c0                	test   %eax,%eax
  403bf3:	75 e3                	jne    403bd8 <free+0xf8>
	if (!mal.bins[i].head)
  403bf5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  403bfa:	48 8d 35 5f 41 20 00 	lea    0x20415f(%rip),%rsi        # 607d60 <mal>
  403c01:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
  403c05:	48 8d 04 c6          	lea    (%rsi,%rax,8),%rax
  403c09:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
  403c0e:	0f 84 dc 01 00 00    	je     403df0 <free+0x310>
	if (libc.threads_minus_1)
  403c14:	8b 05 32 68 a0 10    	mov    0x10a06832(%rip),%eax        # 10e0a44c <__libc+0xc>
  403c1a:	85 c0                	test   %eax,%eax
  403c1c:	74 37                	je     403c55 <free+0x175>
  403c1e:	89 e8                	mov    %ebp,%eax
  403c20:	87 05 42 47 20 00    	xchg   %eax,0x204742(%rip)        # 608368 <mal+0x608>
		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  403c26:	85 c0                	test   %eax,%eax
  403c28:	74 2b                	je     403c55 <free+0x175>
  403c2a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
  403c30:	48 8d 3d 31 47 20 00 	lea    0x204731(%rip),%rdi        # 608368 <mal+0x608>
  403c37:	b9 01 00 00 00       	mov    $0x1,%ecx
  403c3c:	ba 01 00 00 00       	mov    $0x1,%edx
  403c41:	4c 89 fe             	mov    %r15,%rsi
  403c44:	e8 60 f5 ff ff       	callq  4031a9 <__wait>
  403c49:	89 e8                	mov    %ebp,%eax
  403c4b:	87 05 17 47 20 00    	xchg   %eax,0x204717(%rip)        # 608368 <mal+0x608>
  403c51:	85 c0                	test   %eax,%eax
  403c53:	75 db                	jne    403c30 <free+0x150>
			i = bin_index(final_size);
			lock_bin(i);
			lock(mal.free_lock);
			if (self->psize & next->csize & C_INUSE)
  403c55:	49 8b 04 24          	mov    (%r12),%rax
  403c59:	49 23 45 08          	and    0x8(%r13),%rax
  403c5d:	a8 01                	test   $0x1,%al
  403c5f:	0f 85 d3 01 00 00    	jne    403e38 <free+0x358>
	if (lk[0]) {
  403c65:	8b 05 fd 46 20 00    	mov    0x2046fd(%rip),%eax        # 608368 <mal+0x608>
  403c6b:	85 c0                	test   %eax,%eax
  403c6d:	74 41                	je     403cb0 <free+0x1d0>
	__asm__ __volatile__(
  403c6f:	31 c0                	xor    %eax,%eax
  403c71:	89 05 f1 46 20 00    	mov    %eax,0x2046f1(%rip)        # 608368 <mal+0x608>
  403c77:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		if (lk[1]) __wake(lk, 1, 1);
  403c7c:	8b 05 ea 46 20 00    	mov    0x2046ea(%rip),%eax        # 60836c <mal+0x60c>
  403c82:	85 c0                	test   %eax,%eax
  403c84:	74 2a                	je     403cb0 <free+0x1d0>
  403c86:	41 b8 ca 00 00 00    	mov    $0xca,%r8d
  403c8c:	48 8d 3d d5 46 20 00 	lea    0x2046d5(%rip),%rdi        # 608368 <mal+0x608>
  403c93:	ba 01 00 00 00       	mov    $0x1,%edx
  403c98:	be 81 00 00 00       	mov    $0x81,%esi
  403c9d:	4c 89 c0             	mov    %r8,%rax
  403ca0:	0f 05                	syscall 
  403ca2:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  403ca6:	0f 84 b4 02 00 00    	je     403f60 <free+0x480>
  403cac:	0f 1f 40 00          	nopl   0x0(%rax)
	if (lk[0]) {
  403cb0:	8b 03                	mov    (%rbx),%eax
  403cb2:	85 c0                	test   %eax,%eax
  403cb4:	74 3a                	je     403cf0 <free+0x210>
  403cb6:	31 c0                	xor    %eax,%eax
  403cb8:	89 03                	mov    %eax,(%rbx)
  403cba:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		if (lk[1]) __wake(lk, 1, 1);
  403cbf:	8b 43 04             	mov    0x4(%rbx),%eax
  403cc2:	85 c0                	test   %eax,%eax
  403cc4:	74 2a                	je     403cf0 <free+0x210>
  403cc6:	41 b8 ca 00 00 00    	mov    $0xca,%r8d
  403ccc:	ba 01 00 00 00       	mov    $0x1,%edx
  403cd1:	be 81 00 00 00       	mov    $0x81,%esi
  403cd6:	4c 89 c0             	mov    %r8,%rax
  403cd9:	48 89 df             	mov    %rbx,%rdi
  403cdc:	0f 05                	syscall 
  403cde:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  403ce2:	0f 84 68 02 00 00    	je     403f50 <free+0x470>
  403ce8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  403cef:	00 
				break;
			unlock(mal.free_lock);
			unlock_bin(i);
		}

		if (alloc_rev(self)) {
  403cf0:	4c 89 e7             	mov    %r12,%rdi
  403cf3:	e8 18 fb ff ff       	callq  403810 <alloc_rev>
  403cf8:	85 c0                	test   %eax,%eax
  403cfa:	74 3c                	je     403d38 <free+0x258>
			self = PREV_CHUNK(self);
  403cfc:	49 8b 04 24          	mov    (%r12),%rax
			size = CHUNK_SIZE(self);
			final_size += size;
			if (new_size+size > RECLAIM && (new_size+size^size) > size)
  403d00:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
			self = PREV_CHUNK(self);
  403d05:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  403d09:	49 29 c4             	sub    %rax,%r12
			size = CHUNK_SIZE(self);
  403d0c:	49 8b 44 24 08       	mov    0x8(%r12),%rax
  403d11:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
			final_size += size;
  403d15:	48 01 44 24 08       	add    %rax,0x8(%rsp)
			if (new_size+size > RECLAIM && (new_size+size^size) > size)
  403d1a:	48 8d 14 07          	lea    (%rdi,%rax,1),%rdx
  403d1e:	48 81 fa 00 80 02 00 	cmp    $0x28000,%rdx
  403d25:	76 11                	jbe    403d38 <free+0x258>
  403d27:	48 31 c2             	xor    %rax,%rdx
				reclaim = 1;
  403d2a:	48 39 d0             	cmp    %rdx,%rax
  403d2d:	8b 44 24 28          	mov    0x28(%rsp),%eax
  403d31:	0f 42 c5             	cmovb  %ebp,%eax
  403d34:	89 44 24 28          	mov    %eax,0x28(%rsp)
		}

		if (alloc_fwd(next)) {
  403d38:	4c 89 ef             	mov    %r13,%rdi
  403d3b:	e8 00 f8 ff ff       	callq  403540 <alloc_fwd>
  403d40:	85 c0                	test   %eax,%eax
  403d42:	0f 84 f8 fd ff ff    	je     403b40 <free+0x60>
			size = CHUNK_SIZE(next);
  403d48:	49 8b 45 08          	mov    0x8(%r13),%rax
			final_size += size;
			if (new_size+size > RECLAIM && (new_size+size^size) > size)
  403d4c:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
			size = CHUNK_SIZE(next);
  403d51:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
			final_size += size;
  403d55:	48 01 44 24 08       	add    %rax,0x8(%rsp)
			if (new_size+size > RECLAIM && (new_size+size^size) > size)
  403d5a:	48 01 c2             	add    %rax,%rdx
  403d5d:	48 81 fa 00 80 02 00 	cmp    $0x28000,%rdx
  403d64:	76 11                	jbe    403d77 <free+0x297>
				reclaim = 1;
  403d66:	8b 74 24 28          	mov    0x28(%rsp),%esi
			if (new_size+size > RECLAIM && (new_size+size^size) > size)
  403d6a:	48 31 c2             	xor    %rax,%rdx
				reclaim = 1;
  403d6d:	48 39 d0             	cmp    %rdx,%rax
  403d70:	0f 42 f5             	cmovb  %ebp,%esi
  403d73:	89 74 24 28          	mov    %esi,0x28(%rsp)
			next = NEXT_CHUNK(next);
  403d77:	49 01 c5             	add    %rax,%r13
  403d7a:	e9 c1 fd ff ff       	jmpq   403b40 <free+0x60>
  403d7f:	90                   	nop
		size_t extra = self->psize;
  403d80:	48 8b 47 f0          	mov    -0x10(%rdi),%rax
		size_t len = CHUNK_SIZE(self) + extra;
  403d84:	48 83 e6 fe          	and    $0xfffffffffffffffe,%rsi
		char *base = (char *)self - extra;
  403d88:	4c 89 e7             	mov    %r12,%rdi
  403d8b:	48 29 c7             	sub    %rax,%rdi
		size_t len = CHUNK_SIZE(self) + extra;
  403d8e:	48 01 c6             	add    %rax,%rsi
		if (extra & 1) a_crash();
  403d91:	a8 01                	test   $0x1,%al
  403d93:	74 01                	je     403d96 <free+0x2b6>
	__asm__ __volatile__( "hlt" : : : "memory" );
  403d95:	f4                   	hlt    
			MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, -1, 0);
#endif
	}

	unlock_bin(i);
}
  403d96:	48 83 c4 38          	add    $0x38,%rsp
  403d9a:	5b                   	pop    %rbx
  403d9b:	5d                   	pop    %rbp
  403d9c:	41 5c                	pop    %r12
  403d9e:	41 5d                	pop    %r13
  403da0:	41 5e                	pop    %r14
  403da2:	41 5f                	pop    %r15
		__munmap(base, len);
  403da4:	e9 b7 0c 00 00       	jmpq   404a60 <__munmap>
  403da9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	if (x > 0x1c00) return 63;
  403db0:	48 3d 00 1c 00 00    	cmp    $0x1c00,%rax
  403db6:	77 58                	ja     403e10 <free+0x330>
	return bin_tab[x/128-4] + 16;
  403db8:	48 8d 3d a1 2c 00 00 	lea    0x2ca1(%rip),%rdi        # 406a60 <bin_tab>
  403dbf:	48 c1 e8 07          	shr    $0x7,%rax
  403dc3:	0f b6 44 07 fc       	movzbl -0x4(%rdi,%rax,1),%eax
  403dc8:	83 c0 10             	add    $0x10,%eax
  403dcb:	89 44 24 2c          	mov    %eax,0x2c(%rsp)
  403dcf:	48 98                	cltq   
  403dd1:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
  403dd6:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
  403dda:	48 c1 e0 03          	shl    $0x3,%rax
  403dde:	48 89 44 24 20       	mov    %rax,0x20(%rsp)
  403de3:	48 8d 58 08          	lea    0x8(%rax),%rbx
  403de7:	e9 c8 fd ff ff       	jmpq   403bb4 <free+0xd4>
  403dec:	0f 1f 40 00          	nopl   0x0(%rax)
		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  403df0:	48 8d 15 69 3f 20 00 	lea    0x203f69(%rip),%rdx        # 607d60 <mal>
  403df7:	48 03 54 24 20       	add    0x20(%rsp),%rdx
  403dfc:	48 89 50 18          	mov    %rdx,0x18(%rax)
  403e00:	48 89 50 10          	mov    %rdx,0x10(%rax)
  403e04:	e9 0b fe ff ff       	jmpq   403c14 <free+0x134>
  403e09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
	if (x > 0x1c00) return 63;
  403e10:	48 c7 44 24 20 e8 05 	movq   $0x5e8,0x20(%rsp)
  403e17:	00 00 
  403e19:	bb f0 05 00 00       	mov    $0x5f0,%ebx
  403e1e:	c7 44 24 2c 3f 00 00 	movl   $0x3f,0x2c(%rsp)
  403e25:	00 
  403e26:	48 c7 44 24 10 3f 00 	movq   $0x3f,0x10(%rsp)
  403e2d:	00 00 
  403e2f:	e9 80 fd ff ff       	jmpq   403bb4 <free+0xd4>
  403e34:	0f 1f 40 00          	nopl   0x0(%rax)
	if (!(mal.binmap & 1ULL<<i))
  403e38:	48 8b 05 21 3f 20 00 	mov    0x203f21(%rip),%rax        # 607d60 <mal>
  403e3f:	8b 7c 24 2c          	mov    0x2c(%rsp),%edi
  403e43:	48 0f a3 f8          	bt     %rdi,%rax
  403e47:	72 12                	jb     403e5b <free+0x37b>
		a_or_64(&mal.binmap, 1ULL<<i);
  403e49:	89 f9                	mov    %edi,%ecx
  403e4b:	b8 01 00 00 00       	mov    $0x1,%eax
  403e50:	48 d3 e0             	shl    %cl,%rax
	__asm__ __volatile__(
  403e53:	f0 48 09 05 05 3f 20 	lock or %rax,0x203f05(%rip)        # 607d60 <mal>
  403e5a:	00 
	self->csize = final_size;
  403e5b:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
  403e60:	49 89 44 24 08       	mov    %rax,0x8(%r12)
	next->psize = final_size;
  403e65:	49 89 45 00          	mov    %rax,0x0(%r13)
	if (lk[0]) {
  403e69:	8b 05 f9 44 20 00    	mov    0x2044f9(%rip),%eax        # 608368 <mal+0x608>
  403e6f:	85 c0                	test   %eax,%eax
  403e71:	74 45                	je     403eb8 <free+0x3d8>
	__asm__ __volatile__(
  403e73:	31 c0                	xor    %eax,%eax
  403e75:	89 05 ed 44 20 00    	mov    %eax,0x2044ed(%rip)        # 608368 <mal+0x608>
  403e7b:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		if (lk[1]) __wake(lk, 1, 1);
  403e80:	8b 05 e6 44 20 00    	mov    0x2044e6(%rip),%eax        # 60836c <mal+0x60c>
  403e86:	85 c0                	test   %eax,%eax
  403e88:	74 2e                	je     403eb8 <free+0x3d8>
  403e8a:	41 b8 ca 00 00 00    	mov    $0xca,%r8d
  403e90:	48 8d 3d d1 44 20 00 	lea    0x2044d1(%rip),%rdi        # 608368 <mal+0x608>
  403e97:	ba 01 00 00 00       	mov    $0x1,%edx
  403e9c:	be 81 00 00 00       	mov    $0x81,%esi
  403ea1:	4c 89 c0             	mov    %r8,%rax
  403ea4:	0f 05                	syscall 
  403ea6:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  403eaa:	75 0c                	jne    403eb8 <free+0x3d8>
  403eac:	4c 89 c0             	mov    %r8,%rax
  403eaf:	48 89 d6             	mov    %rdx,%rsi
  403eb2:	0f 05                	syscall 
  403eb4:	0f 1f 40 00          	nopl   0x0(%rax)
	self->next = BIN_TO_CHUNK(i);
  403eb8:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
  403ebd:	48 8d 05 9c 3e 20 00 	lea    0x203e9c(%rip),%rax        # 607d60 <mal>
	self->prev = mal.bins[i].tail;
  403ec4:	48 8d 15 95 3e 20 00 	lea    0x203e95(%rip),%rdx        # 607d60 <mal>
	self->next = BIN_TO_CHUNK(i);
  403ecb:	48 01 f0             	add    %rsi,%rax
  403ece:	49 89 44 24 10       	mov    %rax,0x10(%r12)
	self->prev = mal.bins[i].tail;
  403ed3:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  403ed8:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
  403edc:	48 8b 44 c2 18       	mov    0x18(%rdx,%rax,8),%rax
  403ee1:	49 89 44 24 18       	mov    %rax,0x18(%r12)
	self->next->prev = self;
  403ee6:	48 8d 05 83 3e 20 00 	lea    0x203e83(%rip),%rax        # 607d70 <mal+0x10>
  403eed:	4c 89 64 30 08       	mov    %r12,0x8(%rax,%rsi,1)
	self->prev->next = self;
  403ef2:	49 8b 44 24 18       	mov    0x18(%r12),%rax
  403ef7:	4c 89 60 10          	mov    %r12,0x10(%rax)
	if (reclaim) {
  403efb:	8b 44 24 28          	mov    0x28(%rsp),%eax
  403eff:	85 c0                	test   %eax,%eax
  403f01:	75 6a                	jne    403f6d <free+0x48d>
	if (lk[0]) {
  403f03:	8b 03                	mov    (%rbx),%eax
  403f05:	85 c0                	test   %eax,%eax
  403f07:	74 37                	je     403f40 <free+0x460>
  403f09:	31 c0                	xor    %eax,%eax
  403f0b:	89 03                	mov    %eax,(%rbx)
  403f0d:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		if (lk[1]) __wake(lk, 1, 1);
  403f12:	8b 43 04             	mov    0x4(%rbx),%eax
  403f15:	85 c0                	test   %eax,%eax
  403f17:	74 27                	je     403f40 <free+0x460>
  403f19:	41 b8 ca 00 00 00    	mov    $0xca,%r8d
  403f1f:	ba 01 00 00 00       	mov    $0x1,%edx
  403f24:	be 81 00 00 00       	mov    $0x81,%esi
  403f29:	4c 89 c0             	mov    %r8,%rax
  403f2c:	48 89 df             	mov    %rbx,%rdi
  403f2f:	0f 05                	syscall 
  403f31:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  403f35:	75 09                	jne    403f40 <free+0x460>
  403f37:	4c 89 c0             	mov    %r8,%rax
  403f3a:	48 89 d6             	mov    %rdx,%rsi
  403f3d:	0f 05                	syscall 
  403f3f:	90                   	nop
}
  403f40:	48 83 c4 38          	add    $0x38,%rsp
  403f44:	5b                   	pop    %rbx
  403f45:	5d                   	pop    %rbp
  403f46:	41 5c                	pop    %r12
  403f48:	41 5d                	pop    %r13
  403f4a:	41 5e                	pop    %r14
  403f4c:	41 5f                	pop    %r15
  403f4e:	f3 c3                	repz retq 
  403f50:	4c 89 c0             	mov    %r8,%rax
  403f53:	48 89 d6             	mov    %rdx,%rsi
  403f56:	0f 05                	syscall 
  403f58:	e9 93 fd ff ff       	jmpq   403cf0 <free+0x210>
  403f5d:	0f 1f 00             	nopl   (%rax)
  403f60:	4c 89 c0             	mov    %r8,%rax
  403f63:	48 89 d6             	mov    %rdx,%rsi
  403f66:	0f 05                	syscall 
  403f68:	e9 43 fd ff ff       	jmpq   403cb0 <free+0x1d0>
		uintptr_t a = (uintptr_t)self + SIZE_ALIGN+PAGE_SIZE-1 & -PAGE_SIZE;
  403f6d:	49 8d bc 24 1f 10 00 	lea    0x101f(%r12),%rdi
  403f74:	00 
		uintptr_t b = (uintptr_t)next - SIZE_ALIGN & -PAGE_SIZE;
  403f75:	49 8d 75 e0          	lea    -0x20(%r13),%rsi
		__madvise((void *)a, b-a, MADV_DONTNEED);
  403f79:	ba 04 00 00 00       	mov    $0x4,%edx
		uintptr_t a = (uintptr_t)self + SIZE_ALIGN+PAGE_SIZE-1 & -PAGE_SIZE;
  403f7e:	48 81 e7 00 f0 ff ff 	and    $0xfffffffffffff000,%rdi
		uintptr_t b = (uintptr_t)next - SIZE_ALIGN & -PAGE_SIZE;
  403f85:	48 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%rsi
		__madvise((void *)a, b-a, MADV_DONTNEED);
  403f8c:	48 29 fe             	sub    %rdi,%rsi
  403f8f:	e8 6e 09 00 00       	callq  404902 <__madvise>
  403f94:	e9 6a ff ff ff       	jmpq   403f03 <free+0x423>
  403f99:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000403fa0 <malloc>:
{
  403fa0:	41 57                	push   %r15
	if (*n-1 > PTRDIFF_MAX - SIZE_ALIGN - PAGE_SIZE) {
  403fa2:	48 8d 57 ff          	lea    -0x1(%rdi),%rdx
{
  403fa6:	41 56                	push   %r14
  403fa8:	41 55                	push   %r13
  403faa:	41 54                	push   %r12
	if (*n-1 > PTRDIFF_MAX - SIZE_ALIGN - PAGE_SIZE) {
  403fac:	48 b8 df ef ff ff ff 	movabs $0x7fffffffffffefdf,%rax
  403fb3:	ff ff 7f 
{
  403fb6:	55                   	push   %rbp
  403fb7:	53                   	push   %rbx
  403fb8:	48 83 ec 38          	sub    $0x38,%rsp
	if (*n-1 > PTRDIFF_MAX - SIZE_ALIGN - PAGE_SIZE) {
  403fbc:	48 39 c2             	cmp    %rax,%rdx
  403fbf:	0f 86 0b 01 00 00    	jbe    4040d0 <malloc+0x130>
		if (*n) {
  403fc5:	48 85 ff             	test   %rdi,%rdi
  403fc8:	0f 85 86 05 00 00    	jne    404554 <malloc+0x5b4>
  403fce:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  403fd5:	ff ff 
  403fd7:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%rsp)
  403fde:	00 
			*n = SIZE_ALIGN;
  403fdf:	48 c7 44 24 10 20 00 	movq   $0x20,0x10(%rsp)
  403fe6:	00 00 
  403fe8:	4c 8d 35 71 3d 20 00 	lea    0x203d71(%rip),%r14        # 607d60 <mal>
	__asm__ __volatile__(
  403fef:	41 bc 01 00 00 00    	mov    $0x1,%r12d
  403ff5:	0f 1f 00             	nopl   (%rax)
		uint64_t mask = mal.binmap & -(1ULL<<i);
  403ff8:	49 8b 1e             	mov    (%r14),%rbx
		if (!mask) {
  403ffb:	48 23 5c 24 08       	and    0x8(%rsp),%rbx
  404000:	0f 84 5a 01 00 00    	je     404160 <malloc+0x1c0>
}

#define a_ctz_64 a_ctz_64
static inline int a_ctz_64(uint64_t x)
{
	__asm__( "bsf %1,%0" : "=r"(x) : "r"(x) );
  404006:	48 0f bc db          	bsf    %rbx,%rbx
	if (libc.threads_minus_1)
  40400a:	8b 05 3c 64 a0 10    	mov    0x10a0643c(%rip),%eax        # 10e0a44c <__libc+0xc>
	return x;
  404010:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
  404014:	48 63 db             	movslq %ebx,%rbx
  404017:	48 8d 2c 5b          	lea    (%rbx,%rbx,2),%rbp
  40401b:	48 c1 e5 03          	shl    $0x3,%rbp
  40401f:	85 c0                	test   %eax,%eax
	lock(mal.bins[i].lock);
  404021:	4d 8d 7c 2e 08       	lea    0x8(%r14,%rbp,1),%r15
	if (libc.threads_minus_1)
  404026:	74 37                	je     40405f <malloc+0xbf>
	__asm__ __volatile__(
  404028:	44 89 e0             	mov    %r12d,%eax
  40402b:	41 87 07             	xchg   %eax,(%r15)
		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  40402e:	85 c0                	test   %eax,%eax
  404030:	74 2d                	je     40405f <malloc+0xbf>
  404032:	4d 8d 6f 04          	lea    0x4(%r15),%r13
  404036:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40403d:	00 00 00 
  404040:	b9 01 00 00 00       	mov    $0x1,%ecx
  404045:	ba 01 00 00 00       	mov    $0x1,%edx
  40404a:	4c 89 ee             	mov    %r13,%rsi
  40404d:	4c 89 ff             	mov    %r15,%rdi
  404050:	e8 54 f1 ff ff       	callq  4031a9 <__wait>
  404055:	44 89 e2             	mov    %r12d,%edx
  404058:	41 87 17             	xchg   %edx,(%r15)
  40405b:	85 d2                	test   %edx,%edx
  40405d:	75 e1                	jne    404040 <malloc+0xa0>
	if (!mal.bins[i].head)
  40405f:	48 8d 04 5b          	lea    (%rbx,%rbx,2),%rax
  404063:	49 8d 04 c6          	lea    (%r14,%rax,8),%rax
  404067:	48 8b 58 10          	mov    0x10(%rax),%rbx
  40406b:	48 85 db             	test   %rbx,%rbx
  40406e:	0f 84 dc 00 00 00    	je     404150 <malloc+0x1b0>
		if (c != BIN_TO_CHUNK(j)) {
  404074:	4c 01 f5             	add    %r14,%rbp
  404077:	48 39 eb             	cmp    %rbp,%rbx
  40407a:	0f 85 2f 02 00 00    	jne    4042af <malloc+0x30f>
	if (lk[0]) {
  404080:	41 8b 07             	mov    (%r15),%eax
  404083:	85 c0                	test   %eax,%eax
  404085:	0f 84 6d ff ff ff    	je     403ff8 <malloc+0x58>
	__asm__ __volatile__(
  40408b:	31 c0                	xor    %eax,%eax
  40408d:	41 89 07             	mov    %eax,(%r15)
  404090:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		if (lk[1]) __wake(lk, 1, 1);
  404095:	41 8b 47 04          	mov    0x4(%r15),%eax
  404099:	85 c0                	test   %eax,%eax
  40409b:	0f 84 57 ff ff ff    	je     403ff8 <malloc+0x58>
  4040a1:	41 b9 ca 00 00 00    	mov    $0xca,%r9d
  4040a7:	ba 01 00 00 00       	mov    $0x1,%edx
  4040ac:	be 81 00 00 00       	mov    $0x81,%esi
  4040b1:	4c 89 c8             	mov    %r9,%rax
  4040b4:	4c 89 ff             	mov    %r15,%rdi
  4040b7:	0f 05                	syscall 
  4040b9:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  4040bd:	0f 85 35 ff ff ff    	jne    403ff8 <malloc+0x58>
  4040c3:	4c 89 c8             	mov    %r9,%rax
  4040c6:	48 89 d6             	mov    %rdx,%rsi
  4040c9:	0f 05                	syscall 
  4040cb:	e9 28 ff ff ff       	jmpq   403ff8 <malloc+0x58>
	*n = (*n + OVERHEAD + SIZE_ALIGN - 1) & SIZE_MASK;
  4040d0:	48 83 c7 2f          	add    $0x2f,%rdi
  4040d4:	48 83 e7 e0          	and    $0xffffffffffffffe0,%rdi
	if (n > MMAP_THRESHOLD) {
  4040d8:	48 81 ff 00 80 03 00 	cmp    $0x38000,%rdi
	*n = (*n + OVERHEAD + SIZE_ALIGN - 1) & SIZE_MASK;
  4040df:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
	if (n > MMAP_THRESHOLD) {
  4040e4:	0f 86 0d 03 00 00    	jbe    4043f7 <malloc+0x457>
		size_t len = n + OVERHEAD + PAGE_SIZE - 1 & -PAGE_SIZE;
  4040ea:	48 89 fd             	mov    %rdi,%rbp
		char *base = __mmap(0, len, PROT_READ|PROT_WRITE,
  4040ed:	45 31 c9             	xor    %r9d,%r9d
  4040f0:	31 ff                	xor    %edi,%edi
		size_t len = n + OVERHEAD + PAGE_SIZE - 1 & -PAGE_SIZE;
  4040f2:	48 81 c5 0f 10 00 00 	add    $0x100f,%rbp
		char *base = __mmap(0, len, PROT_READ|PROT_WRITE,
  4040f9:	41 b8 ff ff ff ff    	mov    $0xffffffff,%r8d
  4040ff:	b9 22 00 00 00       	mov    $0x22,%ecx
		size_t len = n + OVERHEAD + PAGE_SIZE - 1 & -PAGE_SIZE;
  404104:	48 81 e5 00 f0 ff ff 	and    $0xfffffffffffff000,%rbp
		char *base = __mmap(0, len, PROT_READ|PROT_WRITE,
  40410b:	ba 03 00 00 00       	mov    $0x3,%edx
  404110:	48 89 ee             	mov    %rbp,%rsi
  404113:	e8 03 08 00 00       	callq  40491b <__mmap>
		if (base == (void *)-1) return 0;
  404118:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  40411c:	0f 84 e7 03 00 00    	je     404509 <malloc+0x569>
		c->csize = len - (SIZE_ALIGN - OVERHEAD);
  404122:	48 83 ed 10          	sub    $0x10,%rbp
		return CHUNK_TO_MEM(c);
  404126:	48 8d 58 20          	lea    0x20(%rax),%rbx
		c->psize = SIZE_ALIGN - OVERHEAD;
  40412a:	48 c7 40 10 10 00 00 	movq   $0x10,0x10(%rax)
  404131:	00 
		c->csize = len - (SIZE_ALIGN - OVERHEAD);
  404132:	48 89 68 18          	mov    %rbp,0x18(%rax)
}
  404136:	48 83 c4 38          	add    $0x38,%rsp
  40413a:	48 89 d8             	mov    %rbx,%rax
  40413d:	5b                   	pop    %rbx
  40413e:	5d                   	pop    %rbp
  40413f:	41 5c                	pop    %r12
  404141:	41 5d                	pop    %r13
  404143:	41 5e                	pop    %r14
  404145:	41 5f                	pop    %r15
  404147:	c3                   	retq   
  404148:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40414f:	00 
		mal.bins[i].head = mal.bins[i].tail = BIN_TO_CHUNK(i);
  404150:	4c 01 f5             	add    %r14,%rbp
  404153:	48 89 68 18          	mov    %rbp,0x18(%rax)
  404157:	48 89 68 10          	mov    %rbp,0x10(%rax)
  40415b:	e9 20 ff ff ff       	jmpq   404080 <malloc+0xe0>
	n += SIZE_ALIGN;
  404160:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
  404165:	48 83 c0 20          	add    $0x20,%rax
  404169:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
	if (libc.threads_minus_1)
  40416e:	8b 05 d8 62 a0 10    	mov    0x10a062d8(%rip),%eax        # 10e0a44c <__libc+0xc>
  404174:	85 c0                	test   %eax,%eax
  404176:	0f 85 cf 02 00 00    	jne    40444b <malloc+0x4ab>
	p = __expand_heap(&n);
  40417c:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
  404181:	e8 ca 14 00 00       	callq  405650 <__expand_heap>
	if (!p) {
  404186:	48 85 c0             	test   %rax,%rax
	p = __expand_heap(&n);
  404189:	48 89 c3             	mov    %rax,%rbx
	if (!p) {
  40418c:	0f 84 27 03 00 00    	je     4044b9 <malloc+0x519>
	if (p != end) {
  404192:	48 3b 1d a7 3b 20 00 	cmp    0x203ba7(%rip),%rbx        # 607d40 <end.3350>
		n -= SIZE_ALIGN;
  404199:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
	if (p != end) {
  40419e:	48 89 dd             	mov    %rbx,%rbp
  4041a1:	74 15                	je     4041b8 <malloc+0x218>
		n -= SIZE_ALIGN;
  4041a3:	48 83 e8 20          	sub    $0x20,%rax
		p = (char *)p + SIZE_ALIGN;
  4041a7:	48 8d 6b 20          	lea    0x20(%rbx),%rbp
		w->psize = 0 | C_INUSE;
  4041ab:	48 c7 43 10 01 00 00 	movq   $0x1,0x10(%rbx)
  4041b2:	00 
		n -= SIZE_ALIGN;
  4041b3:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
	end = (char *)p + n;
  4041b8:	48 8d 54 05 00       	lea    0x0(%rbp,%rax,1),%rdx
	w->psize = n | C_INUSE;
  4041bd:	48 83 c8 01          	or     $0x1,%rax
	w = MEM_TO_CHUNK(p);
  4041c1:	4c 8d 65 f0          	lea    -0x10(%rbp),%r12
	if (lk[0]) {
  4041c5:	48 8d 3d 7c 3b 20 00 	lea    0x203b7c(%rip),%rdi        # 607d48 <heap_lock.3349>
	w->psize = n | C_INUSE;
  4041cc:	48 89 42 f0          	mov    %rax,-0x10(%rdx)
	w->csize = 0 | C_INUSE;
  4041d0:	48 c7 42 f8 01 00 00 	movq   $0x1,-0x8(%rdx)
  4041d7:	00 
	end = (char *)p + n;
  4041d8:	48 89 15 61 3b 20 00 	mov    %rdx,0x203b61(%rip)        # 607d40 <end.3350>
	if (lk[0]) {
  4041df:	8b 15 63 3b 20 00    	mov    0x203b63(%rip),%edx        # 607d48 <heap_lock.3349>
	w->csize = n | C_INUSE;
  4041e5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (lk[0]) {
  4041e9:	85 d2                	test   %edx,%edx
  4041eb:	74 36                	je     404223 <malloc+0x283>
  4041ed:	31 c0                	xor    %eax,%eax
  4041ef:	89 05 53 3b 20 00    	mov    %eax,0x203b53(%rip)        # 607d48 <heap_lock.3349>
  4041f5:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		if (lk[1]) __wake(lk, 1, 1);
  4041fa:	8b 05 4c 3b 20 00    	mov    0x203b4c(%rip),%eax        # 607d4c <heap_lock.3349+0x4>
  404200:	85 c0                	test   %eax,%eax
  404202:	74 1f                	je     404223 <malloc+0x283>
  404204:	41 b8 ca 00 00 00    	mov    $0xca,%r8d
  40420a:	ba 01 00 00 00       	mov    $0x1,%edx
  40420f:	be 81 00 00 00       	mov    $0x81,%esi
  404214:	4c 89 c0             	mov    %r8,%rax
  404217:	0f 05                	syscall 
  404219:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  40421d:	0f 84 ed 02 00 00    	je     404510 <malloc+0x570>
			if (!c) return 0;
  404223:	4d 85 e4             	test   %r12,%r12
  404226:	0f 84 dd 02 00 00    	je     404509 <malloc+0x569>
			if (alloc_rev(c)) {
  40422c:	4c 89 e7             	mov    %r12,%rdi
  40422f:	e8 dc f5 ff ff       	callq  403810 <alloc_rev>
  404234:	85 c0                	test   %eax,%eax
  404236:	0f 84 59 02 00 00    	je     404495 <malloc+0x4f5>
				c = PREV_CHUNK(c);
  40423c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  404240:	4c 89 e3             	mov    %r12,%rbx
				NEXT_CHUNK(x)->psize = c->csize =
  404243:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
				c = PREV_CHUNK(c);
  404247:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  40424b:	48 29 c3             	sub    %rax,%rbx
					x->csize + CHUNK_SIZE(c);
  40424e:	48 8b 43 08          	mov    0x8(%rbx),%rax
  404252:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
  404256:	48 01 d0             	add    %rdx,%rax
				NEXT_CHUNK(x)->psize = c->csize =
  404259:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
  40425d:	48 89 43 08          	mov    %rax,0x8(%rbx)
  404261:	49 89 04 14          	mov    %rax,(%r12,%rdx,1)
	size_t n1 = CHUNK_SIZE(self);
  404265:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
	if (n >= n1 - DONTCARE) return;
  404269:	48 8d 50 f0          	lea    -0x10(%rax),%rdx
  40426d:	48 3b 54 24 10       	cmp    0x10(%rsp),%rdx
  404272:	76 32                	jbe    4042a6 <malloc+0x306>
	split = (void *)((char *)self + n);
  404274:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
	split->csize = n1-n | C_INUSE;
  404279:	48 89 c1             	mov    %rax,%rcx
	split = (void *)((char *)self + n);
  40427c:	48 8d 14 3b          	lea    (%rbx,%rdi,1),%rdx
  404280:	48 89 fe             	mov    %rdi,%rsi
	split->csize = n1-n | C_INUSE;
  404283:	48 29 f9             	sub    %rdi,%rcx
	split->psize = n | C_INUSE;
  404286:	48 83 ce 01          	or     $0x1,%rsi
	split->csize = n1-n | C_INUSE;
  40428a:	48 83 c9 01          	or     $0x1,%rcx
	free(CHUNK_TO_MEM(split));
  40428e:	48 8d 7a 10          	lea    0x10(%rdx),%rdi
	split->psize = n | C_INUSE;
  404292:	48 89 32             	mov    %rsi,(%rdx)
	split->csize = n1-n | C_INUSE;
  404295:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
	next->psize = n1-n | C_INUSE;
  404299:	48 89 0c 03          	mov    %rcx,(%rbx,%rax,1)
	self->csize = n | C_INUSE;
  40429d:	48 89 73 08          	mov    %rsi,0x8(%rbx)
	free(CHUNK_TO_MEM(split));
  4042a1:	e8 3a f8 ff ff       	callq  403ae0 <free>
	return CHUNK_TO_MEM(c);
  4042a6:	48 83 c3 10          	add    $0x10,%rbx
  4042aa:	e9 87 fe ff ff       	jmpq   404136 <malloc+0x196>
	if (j < 40) return 0;
  4042af:	8b 4c 24 18          	mov    0x18(%rsp),%ecx
  4042b3:	83 f9 27             	cmp    $0x27,%ecx
  4042b6:	0f 8e f6 00 00 00    	jle    4043b2 <malloc+0x412>
	if (j < i+3) {
  4042bc:	8b 44 24 1c          	mov    0x1c(%rsp),%eax
  4042c0:	83 c0 02             	add    $0x2,%eax
  4042c3:	39 c1                	cmp    %eax,%ecx
  4042c5:	0f 8e de 00 00 00    	jle    4043a9 <malloc+0x409>
		n1 = CHUNK_SIZE(self);
  4042cb:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  4042cf:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
  4042d3:	48 89 d6             	mov    %rdx,%rsi
  4042d6:	48 2b 74 24 10       	sub    0x10(%rsp),%rsi
	x = x / SIZE_ALIGN - 1;
  4042db:	48 89 f0             	mov    %rsi,%rax
  4042de:	48 c1 e8 05          	shr    $0x5,%rax
  4042e2:	48 83 e8 01          	sub    $0x1,%rax
	if (x <= 32) return x;
  4042e6:	48 83 f8 20          	cmp    $0x20,%rax
  4042ea:	0f 86 c2 00 00 00    	jbe    4043b2 <malloc+0x412>
	if (x < 512) return bin_tab[x/8-4];
  4042f0:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  4042f6:	0f 86 43 02 00 00    	jbe    40453f <malloc+0x59f>
	if (x > 0x1c00) return 63;
  4042fc:	48 3d 00 1c 00 00    	cmp    $0x1c00,%rax
  404302:	b9 3f 00 00 00       	mov    $0x3f,%ecx
  404307:	77 13                	ja     40431c <malloc+0x37c>
	return bin_tab[x/128-4] + 16;
  404309:	48 8d 0d 50 27 00 00 	lea    0x2750(%rip),%rcx        # 406a60 <bin_tab>
  404310:	48 c1 e8 07          	shr    $0x7,%rax
  404314:	0f b6 4c 01 fc       	movzbl -0x4(%rcx,%rax,1),%ecx
  404319:	83 c1 10             	add    $0x10,%ecx
	if (bin_index(n1-n) != j) return 0;
  40431c:	39 4c 24 18          	cmp    %ecx,0x18(%rsp)
  404320:	0f 85 8c 00 00 00    	jne    4043b2 <malloc+0x412>
	split = (void *)((char *)self + n);
  404326:	4c 8b 54 24 10       	mov    0x10(%rsp),%r10
	split->prev = self->prev;
  40432b:	48 8b 43 18          	mov    0x18(%rbx),%rax
	split->next = self->next;
  40432f:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
	split = (void *)((char *)self + n);
  404333:	4a 8d 0c 13          	lea    (%rbx,%r10,1),%rcx
	split->prev = self->prev;
  404337:	48 89 41 18          	mov    %rax,0x18(%rcx)
	split->next = self->next;
  40433b:	48 89 79 10          	mov    %rdi,0x10(%rcx)
	split->prev->next = split;
  40433f:	48 89 48 10          	mov    %rcx,0x10(%rax)
	split->next->prev = split;
  404343:	48 8b 41 10          	mov    0x10(%rcx),%rax
  404347:	48 89 48 18          	mov    %rcx,0x18(%rax)
	split->psize = n | C_INUSE;
  40434b:	4c 89 d0             	mov    %r10,%rax
	split->csize = n1-n;
  40434e:	48 89 71 08          	mov    %rsi,0x8(%rcx)
	split->psize = n | C_INUSE;
  404352:	48 83 c8 01          	or     $0x1,%rax
  404356:	48 89 01             	mov    %rax,(%rcx)
	next->psize = n1-n;
  404359:	48 89 34 13          	mov    %rsi,(%rbx,%rdx,1)
	if (lk[0]) {
  40435d:	41 8b 17             	mov    (%r15),%edx
	self->csize = n | C_INUSE;
  404360:	48 89 43 08          	mov    %rax,0x8(%rbx)
	if (lk[0]) {
  404364:	85 d2                	test   %edx,%edx
  404366:	0f 84 f9 fe ff ff    	je     404265 <malloc+0x2c5>
  40436c:	31 c0                	xor    %eax,%eax
  40436e:	41 89 07             	mov    %eax,(%r15)
  404371:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		if (lk[1]) __wake(lk, 1, 1);
  404376:	41 8b 47 04          	mov    0x4(%r15),%eax
  40437a:	85 c0                	test   %eax,%eax
  40437c:	74 22                	je     4043a0 <malloc+0x400>
  40437e:	41 b9 ca 00 00 00    	mov    $0xca,%r9d
  404384:	ba 01 00 00 00       	mov    $0x1,%edx
  404389:	be 81 00 00 00       	mov    $0x81,%esi
  40438e:	4c 89 c8             	mov    %r9,%rax
  404391:	4c 89 ff             	mov    %r15,%rdi
  404394:	0f 05                	syscall 
  404396:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  40439a:	0f 84 c6 01 00 00    	je     404566 <malloc+0x5c6>
  4043a0:	48 8b 43 08          	mov    0x8(%rbx),%rax
  4043a4:	e9 bc fe ff ff       	jmpq   404265 <malloc+0x2c5>
		if (j != 63) return 0;
  4043a9:	83 f9 3f             	cmp    $0x3f,%ecx
  4043ac:	0f 84 6b 01 00 00    	je     40451d <malloc+0x57d>
	if (c->prev == c->next)
  4043b2:	48 8b 43 18          	mov    0x18(%rbx),%rax
  4043b6:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  4043ba:	48 39 d0             	cmp    %rdx,%rax
  4043bd:	0f 84 b3 01 00 00    	je     404576 <malloc+0x5d6>
	c->prev->next = c->next;
  4043c3:	48 89 50 10          	mov    %rdx,0x10(%rax)
	c->next->prev = c->prev;
  4043c7:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  4043cb:	48 89 42 18          	mov    %rax,0x18(%rdx)
	c->csize |= C_INUSE;
  4043cf:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  4043d3:	48 89 d0             	mov    %rdx,%rax
	NEXT_CHUNK(c)->psize |= C_INUSE;
  4043d6:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
	c->csize |= C_INUSE;
  4043da:	48 83 c8 01          	or     $0x1,%rax
  4043de:	48 89 43 08          	mov    %rax,0x8(%rbx)
	NEXT_CHUNK(c)->psize |= C_INUSE;
  4043e2:	48 83 0c 13 01       	orq    $0x1,(%rbx,%rdx,1)
	if (lk[0]) {
  4043e7:	41 8b 17             	mov    (%r15),%edx
  4043ea:	85 d2                	test   %edx,%edx
  4043ec:	0f 84 73 fe ff ff    	je     404265 <malloc+0x2c5>
  4043f2:	e9 75 ff ff ff       	jmpq   40436c <malloc+0x3cc>
  4043f7:	48 89 f8             	mov    %rdi,%rax
	x = x / SIZE_ALIGN - 1;
  4043fa:	48 c1 e8 05          	shr    $0x5,%rax
  4043fe:	48 8d 48 ff          	lea    -0x1(%rax),%rcx
	if (x <= 32) return x;
  404402:	48 83 f9 20          	cmp    $0x20,%rcx
  404406:	0f 86 8e 01 00 00    	jbe    40459a <malloc+0x5fa>
	x--;
  40440c:	48 83 e8 02          	sub    $0x2,%rax
	if (x < 512) return bin_tab[x/8-4] + 1;
  404410:	48 3d ff 01 00 00    	cmp    $0x1ff,%rax
  404416:	0f 87 85 00 00 00    	ja     4044a1 <malloc+0x501>
  40441c:	48 8d 15 3d 26 00 00 	lea    0x263d(%rip),%rdx        # 406a60 <bin_tab>
  404423:	48 c1 e8 03          	shr    $0x3,%rax
  404427:	0f b6 44 02 fc       	movzbl -0x4(%rdx,%rax,1),%eax
  40442c:	83 c0 01             	add    $0x1,%eax
	return bin_tab[x/128-4] + 17;
  40442f:	89 c6                	mov    %eax,%esi
  404431:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
  404435:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  40443c:	89 f1                	mov    %esi,%ecx
  40443e:	48 d3 e0             	shl    %cl,%rax
  404441:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  404446:	e9 9d fb ff ff       	jmpq   403fe8 <malloc+0x48>
	__asm__ __volatile__(
  40444b:	b8 01 00 00 00       	mov    $0x1,%eax
  404450:	87 05 f2 38 20 00    	xchg   %eax,0x2038f2(%rip)        # 607d48 <heap_lock.3349>
		while(a_swap(lk, 1)) __wait(lk, lk+1, 1, 1);
  404456:	85 c0                	test   %eax,%eax
  404458:	0f 84 1e fd ff ff    	je     40417c <malloc+0x1dc>
  40445e:	48 8d 1d e7 38 20 00 	lea    0x2038e7(%rip),%rbx        # 607d4c <heap_lock.3349+0x4>
  404465:	0f 1f 00             	nopl   (%rax)
  404468:	48 8d 3d d9 38 20 00 	lea    0x2038d9(%rip),%rdi        # 607d48 <heap_lock.3349>
  40446f:	b9 01 00 00 00       	mov    $0x1,%ecx
  404474:	ba 01 00 00 00       	mov    $0x1,%edx
  404479:	48 89 de             	mov    %rbx,%rsi
  40447c:	e8 28 ed ff ff       	callq  4031a9 <__wait>
  404481:	b8 01 00 00 00       	mov    $0x1,%eax
  404486:	87 05 bc 38 20 00    	xchg   %eax,0x2038bc(%rip)        # 607d48 <heap_lock.3349>
  40448c:	85 c0                	test   %eax,%eax
  40448e:	75 d8                	jne    404468 <malloc+0x4c8>
  404490:	e9 e7 fc ff ff       	jmpq   40417c <malloc+0x1dc>
  404495:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
			if (alloc_rev(c)) {
  404499:	4c 89 e3             	mov    %r12,%rbx
  40449c:	e9 c4 fd ff ff       	jmpq   404265 <malloc+0x2c5>
	return bin_tab[x/128-4] + 17;
  4044a1:	48 8d 15 b8 25 00 00 	lea    0x25b8(%rip),%rdx        # 406a60 <bin_tab>
  4044a8:	48 c1 e8 07          	shr    $0x7,%rax
  4044ac:	0f b6 44 02 fc       	movzbl -0x4(%rdx,%rax,1),%eax
  4044b1:	83 c0 11             	add    $0x11,%eax
  4044b4:	e9 76 ff ff ff       	jmpq   40442f <malloc+0x48f>
	if (lk[0]) {
  4044b9:	8b 05 89 38 20 00    	mov    0x203889(%rip),%eax        # 607d48 <heap_lock.3349>
  4044bf:	48 8d 3d 82 38 20 00 	lea    0x203882(%rip),%rdi        # 607d48 <heap_lock.3349>
  4044c6:	85 c0                	test   %eax,%eax
  4044c8:	74 3f                	je     404509 <malloc+0x569>
	__asm__ __volatile__(
  4044ca:	31 c0                	xor    %eax,%eax
  4044cc:	89 05 76 38 20 00    	mov    %eax,0x203876(%rip)        # 607d48 <heap_lock.3349>
  4044d2:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
		if (lk[1]) __wake(lk, 1, 1);
  4044d7:	8b 05 6f 38 20 00    	mov    0x20386f(%rip),%eax        # 607d4c <heap_lock.3349+0x4>
  4044dd:	85 c0                	test   %eax,%eax
  4044df:	74 28                	je     404509 <malloc+0x569>
  4044e1:	41 b8 ca 00 00 00    	mov    $0xca,%r8d
  4044e7:	ba 01 00 00 00       	mov    $0x1,%edx
  4044ec:	be 81 00 00 00       	mov    $0x81,%esi
  4044f1:	4c 89 c0             	mov    %r8,%rax
  4044f4:	0f 05                	syscall 
  4044f6:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  4044fa:	75 0d                	jne    404509 <malloc+0x569>
  4044fc:	4c 89 c0             	mov    %r8,%rax
  4044ff:	48 89 d6             	mov    %rdx,%rsi
  404502:	0f 05                	syscall 
  404504:	e9 2d fc ff ff       	jmpq   404136 <malloc+0x196>
		if (base == (void *)-1) return 0;
  404509:	31 db                	xor    %ebx,%ebx
  40450b:	e9 26 fc ff ff       	jmpq   404136 <malloc+0x196>
  404510:	4c 89 c0             	mov    %r8,%rax
  404513:	48 89 d6             	mov    %rdx,%rsi
  404516:	0f 05                	syscall 
  404518:	e9 06 fd ff ff       	jmpq   404223 <malloc+0x283>
		n1 = CHUNK_SIZE(self);
  40451d:	48 8b 53 08          	mov    0x8(%rbx),%rdx
  404521:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
		if (n1-n <= MMAP_THRESHOLD) return 0;
  404525:	48 89 d6             	mov    %rdx,%rsi
  404528:	48 2b 74 24 10       	sub    0x10(%rsp),%rsi
  40452d:	48 81 fe 00 80 03 00 	cmp    $0x38000,%rsi
  404534:	0f 87 a1 fd ff ff    	ja     4042db <malloc+0x33b>
  40453a:	e9 73 fe ff ff       	jmpq   4043b2 <malloc+0x412>
	if (x < 512) return bin_tab[x/8-4];
  40453f:	48 8d 0d 1a 25 00 00 	lea    0x251a(%rip),%rcx        # 406a60 <bin_tab>
  404546:	48 c1 e8 03          	shr    $0x3,%rax
  40454a:	0f b6 4c 01 fc       	movzbl -0x4(%rcx,%rax,1),%ecx
  40454f:	e9 c8 fd ff ff       	jmpq   40431c <malloc+0x37c>
			errno = ENOMEM;
  404554:	e8 17 ef ff ff       	callq  403470 <__errno_location>
	if (adjust_size(&n) < 0) return 0;
  404559:	31 db                	xor    %ebx,%ebx
			errno = ENOMEM;
  40455b:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
  404561:	e9 d0 fb ff ff       	jmpq   404136 <malloc+0x196>
  404566:	4c 89 c8             	mov    %r9,%rax
  404569:	4c 89 ff             	mov    %r15,%rdi
  40456c:	48 89 d6             	mov    %rdx,%rsi
  40456f:	0f 05                	syscall 
  404571:	e9 2a fe ff ff       	jmpq   4043a0 <malloc+0x400>
		a_and_64(&mal.binmap, ~(1ULL<<i));
  404576:	0f b6 4c 24 18       	movzbl 0x18(%rsp),%ecx
  40457b:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
  404582:	48 d3 c0             	rol    %cl,%rax
	__asm__ __volatile(
  404585:	f0 48 21 05 d3 37 20 	lock and %rax,0x2037d3(%rip)        # 607d60 <mal>
  40458c:	00 
  40458d:	48 8b 43 18          	mov    0x18(%rbx),%rax
  404591:	48 8b 53 10          	mov    0x10(%rbx),%rdx
  404595:	e9 29 fe ff ff       	jmpq   4043c3 <malloc+0x423>
  40459a:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  4045a1:	89 4c 24 1c          	mov    %ecx,0x1c(%rsp)
  4045a5:	48 d3 e0             	shl    %cl,%rax
  4045a8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  4045ad:	e9 36 fa ff ff       	jmpq   403fe8 <malloc+0x48>
  4045b2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  4045b9:	00 00 00 
  4045bc:	0f 1f 40 00          	nopl   0x0(%rax)

00000000004045c0 <__malloc0>:
{
  4045c0:	53                   	push   %rbx
  4045c1:	48 89 fb             	mov    %rdi,%rbx
	void *p = malloc(n);
  4045c4:	e8 d7 f9 ff ff       	callq  403fa0 <malloc>
	if (p && !IS_MMAPPED(MEM_TO_CHUNK(p))) {
  4045c9:	48 85 c0             	test   %rax,%rax
  4045cc:	74 38                	je     404606 <__malloc0+0x46>
  4045ce:	f6 40 f8 01          	testb  $0x1,-0x8(%rax)
  4045d2:	74 32                	je     404606 <__malloc0+0x46>
		n = (n + sizeof *z - 1)/sizeof *z;
  4045d4:	48 83 c3 07          	add    $0x7,%rbx
  4045d8:	48 c1 eb 03          	shr    $0x3,%rbx
		for (z=p; n; n--, z++) if (*z) *z=0;
  4045dc:	48 85 db             	test   %rbx,%rbx
  4045df:	74 25                	je     404606 <__malloc0+0x46>
  4045e1:	48 8d 0c d8          	lea    (%rax,%rbx,8),%rcx
  4045e5:	48 89 c2             	mov    %rax,%rdx
  4045e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4045ef:	00 
  4045f0:	48 83 3a 00          	cmpq   $0x0,(%rdx)
  4045f4:	74 07                	je     4045fd <__malloc0+0x3d>
  4045f6:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
  4045fd:	48 83 c2 08          	add    $0x8,%rdx
  404601:	48 39 d1             	cmp    %rdx,%rcx
  404604:	75 ea                	jne    4045f0 <__malloc0+0x30>
}
  404606:	5b                   	pop    %rbx
  404607:	c3                   	retq   
  404608:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40460f:	00 

0000000000404610 <realloc>:
	if (!p) return malloc(n);
  404610:	48 85 ff             	test   %rdi,%rdi
  404613:	0f 84 a7 01 00 00    	je     4047c0 <realloc+0x1b0>
{
  404619:	41 57                	push   %r15
	if (*n-1 > PTRDIFF_MAX - SIZE_ALIGN - PAGE_SIZE) {
  40461b:	48 8d 56 ff          	lea    -0x1(%rsi),%rdx
{
  40461f:	41 56                	push   %r14
  404621:	41 55                	push   %r13
  404623:	41 54                	push   %r12
	if (*n-1 > PTRDIFF_MAX - SIZE_ALIGN - PAGE_SIZE) {
  404625:	48 b8 df ef ff ff ff 	movabs $0x7fffffffffffefdf,%rax
  40462c:	ff ff 7f 
{
  40462f:	55                   	push   %rbp
  404630:	53                   	push   %rbx
  404631:	48 89 fd             	mov    %rdi,%rbp
  404634:	48 83 ec 18          	sub    $0x18,%rsp
	if (*n-1 > PTRDIFF_MAX - SIZE_ALIGN - PAGE_SIZE) {
  404638:	48 39 c2             	cmp    %rax,%rdx
  40463b:	0f 87 87 00 00 00    	ja     4046c8 <realloc+0xb8>
	*n = (*n + OVERHEAD + SIZE_ALIGN - 1) & SIZE_MASK;
  404641:	48 8d 5e 2f          	lea    0x2f(%rsi),%rbx
  404645:	48 83 e3 e0          	and    $0xffffffffffffffe0,%rbx
	n1 = n0 = CHUNK_SIZE(self);
  404649:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
	self = MEM_TO_CHUNK(p);
  40464d:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
	n1 = n0 = CHUNK_SIZE(self);
  404651:	49 89 c5             	mov    %rax,%r13
  404654:	49 83 e5 fe          	and    $0xfffffffffffffffe,%r13
	if (IS_MMAPPED(self)) {
  404658:	a8 01                	test   $0x1,%al
  40465a:	0f 85 f8 00 00 00    	jne    404758 <realloc+0x148>
		size_t extra = self->psize;
  404660:	4c 8b 7d f0          	mov    -0x10(%rbp),%r15
		if (extra & 1) a_crash();
  404664:	41 f6 c7 01          	test   $0x1,%r15b
		size_t oldlen = n0 + extra;
  404668:	4b 8d 74 3d 00       	lea    0x0(%r13,%r15,1),%rsi
		size_t newlen = n + extra;
  40466d:	4d 8d 34 1f          	lea    (%r15,%rbx,1),%r14
		if (extra & 1) a_crash();
  404671:	74 01                	je     404674 <realloc+0x64>
	__asm__ __volatile__( "hlt" : : : "memory" );
  404673:	f4                   	hlt    
		if (newlen < PAGE_SIZE && (new = malloc(n))) {
  404674:	49 81 fe ff 0f 00 00 	cmp    $0xfff,%r14
  40467b:	0f 86 0f 01 00 00    	jbe    404790 <realloc+0x180>
		newlen = (newlen + PAGE_SIZE-1) & -PAGE_SIZE;
  404681:	49 81 c6 ff 0f 00 00 	add    $0xfff,%r14
  404688:	49 81 e6 00 f0 ff ff 	and    $0xfffffffffffff000,%r14
		if (oldlen == newlen) return p;
  40468f:	4c 39 f6             	cmp    %r14,%rsi
  404692:	0f 84 f0 00 00 00    	je     404788 <realloc+0x178>
		char *base = (char *)self - extra;
  404698:	4c 29 fa             	sub    %r15,%rdx
		base = __mremap(base, oldlen, newlen, MREMAP_MAYMOVE);
  40469b:	31 c0                	xor    %eax,%eax
  40469d:	b9 01 00 00 00       	mov    $0x1,%ecx
		char *base = (char *)self - extra;
  4046a2:	48 89 d7             	mov    %rdx,%rdi
		base = __mremap(base, oldlen, newlen, MREMAP_MAYMOVE);
  4046a5:	4c 89 f2             	mov    %r14,%rdx
  4046a8:	e8 1f 03 00 00       	callq  4049cc <__mremap>
		if (base == (void *)-1)
  4046ad:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  4046b1:	74 67                	je     40471a <realloc+0x10a>
		self = (void *)(base + extra);
  4046b3:	4c 01 f8             	add    %r15,%rax
		self->csize = newlen - extra;
  4046b6:	4d 29 fe             	sub    %r15,%r14
  4046b9:	4c 89 70 08          	mov    %r14,0x8(%rax)
		return CHUNK_TO_MEM(self);
  4046bd:	4c 8d 60 10          	lea    0x10(%rax),%r12
  4046c1:	eb 7f                	jmp    404742 <realloc+0x132>
  4046c3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		if (*n) {
  4046c8:	48 85 f6             	test   %rsi,%rsi
  4046cb:	0f 85 49 01 00 00    	jne    40481a <realloc+0x20a>
			*n = SIZE_ALIGN;
  4046d1:	bb 20 00 00 00       	mov    $0x20,%ebx
  4046d6:	e9 6e ff ff ff       	jmpq   404649 <realloc+0x39>
  4046db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
	if (n > n1 && alloc_fwd(next)) {
  4046e0:	4c 89 e7             	mov    %r12,%rdi
  4046e3:	48 89 14 24          	mov    %rdx,(%rsp)
  4046e7:	e8 54 ee ff ff       	callq  403540 <alloc_fwd>
  4046ec:	85 c0                	test   %eax,%eax
  4046ee:	0f 84 dc 00 00 00    	je     4047d0 <realloc+0x1c0>
		n1 += CHUNK_SIZE(next);
  4046f4:	49 8b 4c 24 08       	mov    0x8(%r12),%rcx
	if (n <= n1) {
  4046f9:	48 8b 14 24          	mov    (%rsp),%rdx
		n1 += CHUNK_SIZE(next);
  4046fd:	48 83 e1 fe          	and    $0xfffffffffffffffe,%rcx
  404701:	49 8d 74 0d 00       	lea    0x0(%r13,%rcx,1),%rsi
	self->csize = n1 | C_INUSE;
  404706:	48 89 f0             	mov    %rsi,%rax
  404709:	48 83 c8 01          	or     $0x1,%rax
	if (n <= n1) {
  40470d:	48 39 de             	cmp    %rbx,%rsi
	self->csize = n1 | C_INUSE;
  404710:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	next->psize = n1 | C_INUSE;
  404714:	49 89 04 0c          	mov    %rax,(%r12,%rcx,1)
	if (n <= n1) {
  404718:	73 61                	jae    40477b <realloc+0x16b>
	new = malloc(n-OVERHEAD);
  40471a:	48 8d 7b f0          	lea    -0x10(%rbx),%rdi
  40471e:	e8 7d f8 ff ff       	callq  403fa0 <malloc>
	if (!new) return 0;
  404723:	48 85 c0             	test   %rax,%rax
	new = malloc(n-OVERHEAD);
  404726:	49 89 c4             	mov    %rax,%r12
	if (!new) return 0;
  404729:	74 17                	je     404742 <realloc+0x132>
	memcpy(new, p, n0-OVERHEAD);
  40472b:	49 8d 55 f0          	lea    -0x10(%r13),%rdx
  40472f:	4c 89 e7             	mov    %r12,%rdi
  404732:	48 89 ee             	mov    %rbp,%rsi
  404735:	e8 62 0b 00 00       	callq  40529c <memcpy>
	free(CHUNK_TO_MEM(self));
  40473a:	48 89 ef             	mov    %rbp,%rdi
  40473d:	e8 9e f3 ff ff       	callq  403ae0 <free>
}
  404742:	48 83 c4 18          	add    $0x18,%rsp
  404746:	4c 89 e0             	mov    %r12,%rax
  404749:	5b                   	pop    %rbx
  40474a:	5d                   	pop    %rbp
  40474b:	41 5c                	pop    %r12
  40474d:	41 5d                	pop    %r13
  40474f:	41 5e                	pop    %r14
  404751:	41 5f                	pop    %r15
  404753:	c3                   	retq   
  404754:	0f 1f 40 00          	nopl   0x0(%rax)
	next = NEXT_CHUNK(self);
  404758:	4e 8d 24 2a          	lea    (%rdx,%r13,1),%r12
	if (next->psize != self->csize) a_crash();
  40475c:	49 3b 04 24          	cmp    (%r12),%rax
  404760:	74 01                	je     404763 <realloc+0x153>
  404762:	f4                   	hlt    
	if (n > n1 && alloc_fwd(next)) {
  404763:	49 39 dd             	cmp    %rbx,%r13
  404766:	0f 82 74 ff ff ff    	jb     4046e0 <realloc+0xd0>
	self->csize = n1 | C_INUSE;
  40476c:	4c 89 e8             	mov    %r13,%rax
  40476f:	48 83 c8 01          	or     $0x1,%rax
  404773:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	next->psize = n1 | C_INUSE;
  404777:	49 89 04 24          	mov    %rax,(%r12)
	size_t n1 = CHUNK_SIZE(self);
  40477b:	48 83 e0 fe          	and    $0xfffffffffffffffe,%rax
	if (n >= n1 - DONTCARE) return;
  40477f:	48 8d 48 f0          	lea    -0x10(%rax),%rcx
  404783:	48 39 d9             	cmp    %rbx,%rcx
  404786:	77 60                	ja     4047e8 <realloc+0x1d8>
	free(CHUNK_TO_MEM(split));
  404788:	49 89 ec             	mov    %rbp,%r12
  40478b:	eb b5                	jmp    404742 <realloc+0x132>
  40478d:	0f 1f 00             	nopl   (%rax)
		if (newlen < PAGE_SIZE && (new = malloc(n))) {
  404790:	48 89 df             	mov    %rbx,%rdi
  404793:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  404798:	48 89 14 24          	mov    %rdx,(%rsp)
  40479c:	e8 ff f7 ff ff       	callq  403fa0 <malloc>
  4047a1:	48 85 c0             	test   %rax,%rax
  4047a4:	49 89 c4             	mov    %rax,%r12
  4047a7:	48 8b 14 24          	mov    (%rsp),%rdx
  4047ab:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  4047b0:	0f 84 cb fe ff ff    	je     404681 <realloc+0x71>
			memcpy(new, p, n-OVERHEAD);
  4047b6:	48 8d 53 f0          	lea    -0x10(%rbx),%rdx
  4047ba:	e9 70 ff ff ff       	jmpq   40472f <realloc+0x11f>
  4047bf:	90                   	nop
	if (!p) return malloc(n);
  4047c0:	48 89 f7             	mov    %rsi,%rdi
  4047c3:	e9 d8 f7 ff ff       	jmpq   403fa0 <malloc>
  4047c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  4047cf:	00 
	self->csize = n1 | C_INUSE;
  4047d0:	4c 89 e8             	mov    %r13,%rax
  4047d3:	48 83 c8 01          	or     $0x1,%rax
  4047d7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	next->psize = n1 | C_INUSE;
  4047db:	49 89 04 24          	mov    %rax,(%r12)
  4047df:	e9 36 ff ff ff       	jmpq   40471a <realloc+0x10a>
  4047e4:	0f 1f 40 00          	nopl   0x0(%rax)
	split->csize = n1-n | C_INUSE;
  4047e8:	48 89 c1             	mov    %rax,%rcx
	split = (void *)((char *)self + n);
  4047eb:	48 01 da             	add    %rbx,%rdx
	split->psize = n | C_INUSE;
  4047ee:	48 89 de             	mov    %rbx,%rsi
	split->csize = n1-n | C_INUSE;
  4047f1:	48 29 d9             	sub    %rbx,%rcx
	split->psize = n | C_INUSE;
  4047f4:	48 83 ce 01          	or     $0x1,%rsi
	free(CHUNK_TO_MEM(split));
  4047f8:	48 8d 7a 10          	lea    0x10(%rdx),%rdi
	split->csize = n1-n | C_INUSE;
  4047fc:	48 83 c9 01          	or     $0x1,%rcx
	split->psize = n | C_INUSE;
  404800:	48 89 32             	mov    %rsi,(%rdx)
	split->csize = n1-n | C_INUSE;
  404803:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
	next->psize = n1-n | C_INUSE;
  404807:	48 89 4c 05 f0       	mov    %rcx,-0x10(%rbp,%rax,1)
	self->csize = n | C_INUSE;
  40480c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
	free(CHUNK_TO_MEM(split));
  404810:	e8 cb f2 ff ff       	callq  403ae0 <free>
  404815:	e9 6e ff ff ff       	jmpq   404788 <realloc+0x178>
			errno = ENOMEM;
  40481a:	e8 51 ec ff ff       	callq  403470 <__errno_location>
	if (adjust_size(&n) < 0) return 0;
  40481f:	45 31 e4             	xor    %r12d,%r12d
			errno = ENOMEM;
  404822:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
  404828:	e9 15 ff ff ff       	jmpq   404742 <realloc+0x132>

000000000040482d <__fpclassifyl>:
	return __fpclassify(x);
}
#elif LDBL_MANT_DIG == 64 && LDBL_MAX_EXP == 16384
int __fpclassifyl(long double x)
{
	union ldshape u = {x};
  40482d:	db 6c 24 08          	fldt   0x8(%rsp)
  404831:	db 7c 24 e8          	fstpt  -0x18(%rsp)
  404835:	8b 54 24 f0          	mov    -0x10(%rsp),%edx
	int e = u.i.se & 0x7fff;
	int msb = u.i.m>>63;
  404839:	48 8b 4c 24 e8       	mov    -0x18(%rsp),%rcx
  40483e:	66 81 e2 ff 7f       	and    $0x7fff,%dx
  404843:	48 89 ce             	mov    %rcx,%rsi
  404846:	48 c1 ee 3f          	shr    $0x3f,%rsi
	int e = u.i.se & 0x7fff;
  40484a:	0f b7 c2             	movzwl %dx,%eax
	if (!e && !msb)
  40484d:	09 f0                	or     %esi,%eax
  40484f:	75 0c                	jne    40485d <__fpclassifyl+0x30>
		return u.i.m ? FP_SUBNORMAL : FP_ZERO;
  404851:	31 c0                	xor    %eax,%eax
  404853:	48 85 c9             	test   %rcx,%rcx
  404856:	0f 95 c0             	setne  %al
  404859:	83 c0 02             	add    $0x2,%eax
  40485c:	c3                   	retq   
	if (!msb)
		return FP_NAN;
  40485d:	31 c0                	xor    %eax,%eax
	if (!msb)
  40485f:	48 85 f6             	test   %rsi,%rsi
  404862:	74 14                	je     404878 <__fpclassifyl+0x4b>
	if (e == 0x7fff)
  404864:	66 81 fa ff 7f       	cmp    $0x7fff,%dx
		return u.i.m << 1 ? FP_NAN : FP_INFINITE;
	return FP_NORMAL;
  404869:	b8 04 00 00 00       	mov    $0x4,%eax
	if (e == 0x7fff)
  40486e:	75 08                	jne    404878 <__fpclassifyl+0x4b>
		return u.i.m << 1 ? FP_NAN : FP_INFINITE;
  404870:	31 c0                	xor    %eax,%eax
  404872:	48 01 c9             	add    %rcx,%rcx
  404875:	0f 94 c0             	sete   %al
}
  404878:	c3                   	retq   

0000000000404879 <__signbitl>:
#include "libm.h"

#if (LDBL_MANT_DIG == 64 || LDBL_MANT_DIG == 113) && LDBL_MAX_EXP == 16384
int __signbitl(long double x)
{
	union ldshape u = {x};
  404879:	db 6c 24 08          	fldt   0x8(%rsp)
  40487d:	db 7c 24 e8          	fstpt  -0x18(%rsp)
	return u.i.se >> 15;
  404881:	8b 44 24 f0          	mov    -0x10(%rsp),%eax
  404885:	66 c1 e8 0f          	shr    $0xf,%ax
  404889:	0f b7 c0             	movzwl %ax,%eax
}
  40488c:	c3                   	retq   

000000000040488d <frexpl>:
{
	return frexp(x, e);
}
#elif (LDBL_MANT_DIG == 64 || LDBL_MANT_DIG == 113) && LDBL_MAX_EXP == 16384
long double frexpl(long double x, int *e)
{
  40488d:	53                   	push   %rbx
  40488e:	48 83 ec 10          	sub    $0x10,%rsp
  404892:	db 6c 24 20          	fldt   0x20(%rsp)
	union ldshape u = {x};
  404896:	d9 c0                	fld    %st(0)
  404898:	db 3c 24             	fstpt  (%rsp)
	int ee = u.i.se & 0x7fff;
  40489b:	8b 44 24 08          	mov    0x8(%rsp),%eax

	if (!ee) {
  40489f:	89 c1                	mov    %eax,%ecx
  4048a1:	66 81 e1 ff 7f       	and    $0x7fff,%cx
  4048a6:	75 30                	jne    4048d8 <frexpl+0x4b>
		if (x) {
  4048a8:	d9 ee                	fldz   
  4048aa:	d9 c9                	fxch   %st(1)
  4048ac:	db e9                	fucomi %st(1),%st
  4048ae:	dd d9                	fstp   %st(1)
  4048b0:	7a 02                	jp     4048b4 <frexpl+0x27>
  4048b2:	74 1c                	je     4048d0 <frexpl+0x43>
			x = frexpl(x*0x1p120, e);
  4048b4:	d8 0d e2 21 00 00    	fmuls  0x21e2(%rip)        # 406a9c <bin_tab+0x3c>
  4048ba:	48 83 ec 10          	sub    $0x10,%rsp
  4048be:	48 89 fb             	mov    %rdi,%rbx
  4048c1:	db 3c 24             	fstpt  (%rsp)
  4048c4:	e8 c4 ff ff ff       	callq  40488d <frexpl>
			*e -= 120;
  4048c9:	83 2b 78             	subl   $0x78,(%rbx)
  4048cc:	59                   	pop    %rcx
  4048cd:	5e                   	pop    %rsi
  4048ce:	eb 2c                	jmp    4048fc <frexpl+0x6f>
		} else *e = 0;
  4048d0:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
  4048d6:	eb 24                	jmp    4048fc <frexpl+0x6f>
		return x;
	} else if (ee == 0x7fff) {
  4048d8:	66 81 f9 ff 7f       	cmp    $0x7fff,%cx
	int ee = u.i.se & 0x7fff;
  4048dd:	0f b7 d1             	movzwl %cx,%edx
	} else if (ee == 0x7fff) {
  4048e0:	74 1a                	je     4048fc <frexpl+0x6f>
  4048e2:	dd d8                	fstp   %st(0)
		return x;
	}

	*e = ee - 0x3ffe;
	u.i.se &= 0x8000;
  4048e4:	66 25 00 80          	and    $0x8000,%ax
	*e = ee - 0x3ffe;
  4048e8:	81 ea fe 3f 00 00    	sub    $0x3ffe,%edx
	u.i.se |= 0x3ffe;
  4048ee:	66 0d fe 3f          	or     $0x3ffe,%ax
	*e = ee - 0x3ffe;
  4048f2:	89 17                	mov    %edx,(%rdi)
	u.i.se |= 0x3ffe;
  4048f4:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
	return u.f;
  4048f9:	db 2c 24             	fldt   (%rsp)
}
  4048fc:	48 83 c4 10          	add    $0x10,%rsp
  404900:	5b                   	pop    %rbx
  404901:	c3                   	retq   

0000000000404902 <__madvise>:
#include <sys/mman.h>
#include "syscall.h"
#include "libc.h"

int __madvise(void *addr, size_t len, int advice)
{
  404902:	48 83 ec 08          	sub    $0x8,%rsp
	return syscall(SYS_madvise, addr, len, advice);
  404906:	48 63 d2             	movslq %edx,%rdx
  404909:	b8 1c 00 00 00       	mov    $0x1c,%eax
  40490e:	0f 05                	syscall 
  404910:	48 89 c7             	mov    %rax,%rdi
  404913:	e8 d8 eb ff ff       	callq  4034f0 <__syscall_ret>
}
  404918:	5a                   	pop    %rdx
  404919:	c3                   	retq   

000000000040491a <__vm_wait>:
#include <stdint.h>
#include <limits.h>
#include "syscall.h"
#include "libc.h"

static void dummy(void) { }
  40491a:	c3                   	retq   

000000000040491b <__mmap>:

#define UNIT SYSCALL_MMAP2_UNIT
#define OFF_MASK ((-0x2000ULL << (8*sizeof(syscall_arg_t)-1)) | (UNIT-1))

void *__mmap(void *start, size_t len, int prot, int flags, int fd, off_t off)
{
  40491b:	55                   	push   %rbp
  40491c:	53                   	push   %rbx
  40491d:	48 83 ec 28          	sub    $0x28,%rsp
	long ret;
	if (off & OFF_MASK) {
  404921:	41 f7 c1 ff 0f 00 00 	test   $0xfff,%r9d
  404928:	74 0d                	je     404937 <__mmap+0x1c>
		errno = EINVAL;
  40492a:	e8 41 eb ff ff       	callq  403470 <__errno_location>
  40492f:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
  404935:	eb 1a                	jmp    404951 <__mmap+0x36>
		return MAP_FAILED;
	}
	if (len >= PTRDIFF_MAX) {
  404937:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
  40493e:	ff ff 7f 
  404941:	48 39 c6             	cmp    %rax,%rsi
  404944:	76 16                	jbe    40495c <__mmap+0x41>
		errno = ENOMEM;
  404946:	e8 25 eb ff ff       	callq  403470 <__errno_location>
  40494b:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
#endif
	/* Fixup incorrect EPERM from kernel. */
	if (ret == -EPERM && !start && (flags&MAP_ANON) && !(flags&MAP_FIXED))
		ret = -ENOMEM;
	return (void *)__syscall_ret(ret);
}
  404951:	48 83 c4 28          	add    $0x28,%rsp
		errno = ENOMEM;
  404955:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
}
  404959:	5b                   	pop    %rbx
  40495a:	5d                   	pop    %rbp
  40495b:	c3                   	retq   
	if (flags & MAP_FIXED) {
  40495c:	f6 c1 10             	test   $0x10,%cl
  40495f:	89 d5                	mov    %edx,%ebp
  404961:	89 cb                	mov    %ecx,%ebx
  404963:	74 2b                	je     404990 <__mmap+0x75>
  404965:	4c 89 4c 24 18       	mov    %r9,0x18(%rsp)
  40496a:	44 89 44 24 14       	mov    %r8d,0x14(%rsp)
  40496f:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  404974:	48 89 3c 24          	mov    %rdi,(%rsp)
		__vm_wait();
  404978:	e8 9d ff ff ff       	callq  40491a <__vm_wait>
  40497d:	4c 8b 4c 24 18       	mov    0x18(%rsp),%r9
  404982:	44 8b 44 24 14       	mov    0x14(%rsp),%r8d
  404987:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
  40498c:	48 8b 3c 24          	mov    (%rsp),%rdi
	ret = __syscall(SYS_mmap, start, len, prot, flags, fd, off);
  404990:	48 63 d5             	movslq %ebp,%rdx
  404993:	4c 63 d3             	movslq %ebx,%r10
	register long r8 __asm__("r8") = a5;
  404996:	4d 63 c0             	movslq %r8d,%r8
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404999:	b8 09 00 00 00       	mov    $0x9,%eax
  40499e:	0f 05                	syscall 
	if (ret == -EPERM && !start && (flags&MAP_ANON) && !(flags&MAP_FIXED))
  4049a0:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  4049a4:	75 17                	jne    4049bd <__mmap+0xa2>
  4049a6:	48 85 ff             	test   %rdi,%rdi
  4049a9:	75 12                	jne    4049bd <__mmap+0xa2>
  4049ab:	83 e3 30             	and    $0x30,%ebx
		ret = -ENOMEM;
  4049ae:	31 c0                	xor    %eax,%eax
  4049b0:	83 fb 20             	cmp    $0x20,%ebx
  4049b3:	0f 95 c0             	setne  %al
  4049b6:	48 f7 d8             	neg    %rax
  4049b9:	48 83 c8 f4          	or     $0xfffffffffffffff4,%rax
}
  4049bd:	48 83 c4 28          	add    $0x28,%rsp
	return (void *)__syscall_ret(ret);
  4049c1:	48 89 c7             	mov    %rax,%rdi
}
  4049c4:	5b                   	pop    %rbx
  4049c5:	5d                   	pop    %rbp
	return (void *)__syscall_ret(ret);
  4049c6:	e9 25 eb ff ff       	jmpq   4034f0 <__syscall_ret>

00000000004049cb <dummy>:
#include <stdint.h>
#include <stdarg.h>
#include "syscall.h"
#include "libc.h"

static void dummy(void) { }
  4049cb:	c3                   	retq   

00000000004049cc <__mremap>:
weak_alias(dummy, __vm_wait);

void *__mremap(void *old_addr, size_t old_len, size_t new_len, int flags, ...)
{
  4049cc:	53                   	push   %rbx
	va_list ap;
	void *new_addr = 0;

	if (new_len >= PTRDIFF_MAX) {
  4049cd:	48 b8 fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rax
  4049d4:	ff ff 7f 
{
  4049d7:	48 83 ec 70          	sub    $0x70,%rsp
	if (new_len >= PTRDIFF_MAX) {
  4049db:	48 39 c2             	cmp    %rax,%rdx
{
  4049de:	4c 89 44 24 60       	mov    %r8,0x60(%rsp)
	if (new_len >= PTRDIFF_MAX) {
  4049e3:	76 11                	jbe    4049f6 <__mremap+0x2a>
		errno = ENOMEM;
  4049e5:	e8 86 ea ff ff       	callq  403470 <__errno_location>
  4049ea:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
		return MAP_FAILED;
  4049f0:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
  4049f4:	eb 63                	jmp    404a59 <__mremap+0x8d>
	void *new_addr = 0;
  4049f6:	45 31 c0             	xor    %r8d,%r8d
	}

	if (flags & MREMAP_FIXED) {
  4049f9:	f6 c1 02             	test   $0x2,%cl
  4049fc:	89 cb                	mov    %ecx,%ebx
  4049fe:	74 47                	je     404a47 <__mremap+0x7b>
  404a00:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
  404a05:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  404a0a:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
		__vm_wait();
  404a0f:	e8 06 ff ff ff       	callq  40491a <__vm_wait>
		va_start(ap, flags);
  404a14:	48 8d 84 24 80 00 00 	lea    0x80(%rsp),%rax
  404a1b:	00 
		new_addr = va_arg(ap, void *);
  404a1c:	4c 8b 44 24 60       	mov    0x60(%rsp),%r8
  404a21:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
  404a26:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
  404a2b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
		va_start(ap, flags);
  404a30:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  404a35:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
  404a3a:	c7 44 24 28 20 00 00 	movl   $0x20,0x28(%rsp)
  404a41:	00 
  404a42:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
		va_end(ap);
	}

	return (void *)syscall(SYS_mremap, old_addr, old_len, new_len, flags, new_addr);
  404a47:	4c 63 d3             	movslq %ebx,%r10
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404a4a:	b8 19 00 00 00       	mov    $0x19,%eax
  404a4f:	0f 05                	syscall 
  404a51:	48 89 c7             	mov    %rax,%rdi
  404a54:	e8 97 ea ff ff       	callq  4034f0 <__syscall_ret>
}
  404a59:	48 83 c4 70          	add    $0x70,%rsp
  404a5d:	5b                   	pop    %rbx
  404a5e:	c3                   	retq   

0000000000404a5f <dummy>:
#include <sys/mman.h>
#include "syscall.h"
#include "libc.h"

static void dummy(void) { }
  404a5f:	c3                   	retq   

0000000000404a60 <__munmap>:
weak_alias(dummy, __vm_wait);

int __munmap(void *start, size_t len)
{
  404a60:	48 83 ec 18          	sub    $0x18,%rsp
  404a64:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  404a69:	48 89 34 24          	mov    %rsi,(%rsp)
	__vm_wait();
  404a6d:	e8 a8 fe ff ff       	callq  40491a <__vm_wait>
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  404a72:	b8 0b 00 00 00       	mov    $0xb,%eax
  404a77:	48 8b 34 24          	mov    (%rsp),%rsi
  404a7b:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
  404a80:	0f 05                	syscall 
  404a82:	48 89 c7             	mov    %rax,%rdi
	return syscall(SYS_munmap, start, len);
  404a85:	e8 66 ea ff ff       	callq  4034f0 <__syscall_ret>
}
  404a8a:	48 83 c4 18          	add    $0x18,%rsp
  404a8e:	c3                   	retq   

0000000000404a8f <wctomb>:
#include <stdlib.h>
#include <wchar.h>

int wctomb(char *s, wchar_t wc)
{
	if (!s) return 0;
  404a8f:	48 85 ff             	test   %rdi,%rdi
  404a92:	74 0d                	je     404aa1 <wctomb+0x12>
{
  404a94:	48 83 ec 08          	sub    $0x8,%rsp
	return wcrtomb(s, wc, 0);
  404a98:	31 d2                	xor    %edx,%edx
  404a9a:	e8 20 0d 00 00       	callq  4057bf <wcrtomb>
}
  404a9f:	5a                   	pop    %rdx
  404aa0:	c3                   	retq   
  404aa1:	31 c0                	xor    %eax,%eax
  404aa3:	c3                   	retq   

0000000000404aa4 <__fdopen>:
#include <fcntl.h>
#include <errno.h>
#include <string.h>

FILE *__fdopen(int fd, const char *mode)
{
  404aa4:	41 54                	push   %r12
  404aa6:	55                   	push   %rbp
  404aa7:	49 89 f4             	mov    %rsi,%r12
  404aaa:	53                   	push   %rbx
  404aab:	89 fd                	mov    %edi,%ebp
	FILE *f;
	struct winsize wsz;

	/* Check for valid initial mode character */
	if (!strchr("rwa", *mode)) {
  404aad:	48 8d 3d 86 14 00 00 	lea    0x1486(%rip),%rdi        # 405f3a <_fini+0x5a7>
{
  404ab4:	48 83 ec 10          	sub    $0x10,%rsp
	if (!strchr("rwa", *mode)) {
  404ab8:	0f be 36             	movsbl (%rsi),%esi
  404abb:	e8 d0 e3 ff ff       	callq  402e90 <strchr>
  404ac0:	48 85 c0             	test   %rax,%rax
  404ac3:	75 12                	jne    404ad7 <__fdopen+0x33>
		errno = EINVAL;
  404ac5:	e8 a6 e9 ff ff       	callq  403470 <__errno_location>
		return 0;
  404aca:	31 db                	xor    %ebx,%ebx
		errno = EINVAL;
  404acc:	c7 00 16 00 00 00    	movl   $0x16,(%rax)
		return 0;
  404ad2:	e9 32 01 00 00       	jmpq   404c09 <__fdopen+0x165>
	}

	/* Allocate FILE+buffer or fail */
	if (!(f=malloc(sizeof *f + UNGET + BUFSIZ))) return 0;
  404ad7:	bf f0 04 00 00       	mov    $0x4f0,%edi
  404adc:	e8 bf f4 ff ff       	callq  403fa0 <malloc>
  404ae1:	48 85 c0             	test   %rax,%rax
  404ae4:	48 89 c3             	mov    %rax,%rbx
  404ae7:	0f 84 1c 01 00 00    	je     404c09 <__fdopen+0x165>

	/* Zero-fill only the struct, not the buffer */
	memset(f, 0, sizeof *f);
  404aed:	31 f6                	xor    %esi,%esi
  404aef:	ba e8 00 00 00       	mov    $0xe8,%edx
  404af4:	48 89 c7             	mov    %rax,%rdi
  404af7:	e8 71 e5 ff ff       	callq  40306d <memset>

	/* Impose mode restrictions */
	if (!strchr(mode, '+')) f->flags = (*mode == 'r') ? F_NOWR : F_NORD;
  404afc:	be 2b 00 00 00       	mov    $0x2b,%esi
  404b01:	4c 89 e7             	mov    %r12,%rdi
  404b04:	e8 87 e3 ff ff       	callq  402e90 <strchr>
  404b09:	48 85 c0             	test   %rax,%rax
  404b0c:	75 13                	jne    404b21 <__fdopen+0x7d>
  404b0e:	31 c0                	xor    %eax,%eax
  404b10:	41 80 3c 24 72       	cmpb   $0x72,(%r12)
  404b15:	0f 94 c0             	sete   %al
  404b18:	8d 04 85 04 00 00 00 	lea    0x4(,%rax,4),%eax
  404b1f:	89 03                	mov    %eax,(%rbx)

	/* Apply close-on-exec flag */
	if (strchr(mode, 'e')) __syscall(SYS_fcntl, fd, F_SETFD, FD_CLOEXEC);
  404b21:	be 65 00 00 00       	mov    $0x65,%esi
  404b26:	4c 89 e7             	mov    %r12,%rdi
  404b29:	e8 62 e3 ff ff       	callq  402e90 <strchr>
  404b2e:	48 85 c0             	test   %rax,%rax
  404b31:	74 14                	je     404b47 <__fdopen+0xa3>
  404b33:	48 63 fd             	movslq %ebp,%rdi
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404b36:	ba 01 00 00 00       	mov    $0x1,%edx
  404b3b:	be 02 00 00 00       	mov    $0x2,%esi
  404b40:	b8 48 00 00 00       	mov    $0x48,%eax
  404b45:	0f 05                	syscall 

	/* Set append mode on fd if opened for append */
	if (*mode == 'a') {
  404b47:	41 80 3c 24 61       	cmpb   $0x61,(%r12)
  404b4c:	75 2f                	jne    404b7d <__fdopen+0xd9>
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  404b4e:	41 b8 48 00 00 00    	mov    $0x48,%r8d
		int flags = __syscall(SYS_fcntl, fd, F_GETFL);
  404b54:	48 63 fd             	movslq %ebp,%rdi
  404b57:	be 03 00 00 00       	mov    $0x3,%esi
  404b5c:	4c 89 c0             	mov    %r8,%rax
  404b5f:	0f 05                	syscall 
		if (!(flags & O_APPEND))
  404b61:	0f ba e0 0a          	bt     $0xa,%eax
  404b65:	72 10                	jb     404b77 <__fdopen+0xd3>
			__syscall(SYS_fcntl, fd, F_SETFL, flags | O_APPEND);
  404b67:	80 cc 04             	or     $0x4,%ah
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404b6a:	be 04 00 00 00       	mov    $0x4,%esi
  404b6f:	48 63 d0             	movslq %eax,%rdx
  404b72:	4c 89 c0             	mov    %r8,%rax
  404b75:	0f 05                	syscall 
		f->flags |= F_APP;
  404b77:	81 0b 80 00 00 00    	orl    $0x80,(%rbx)
	f->buf = (unsigned char *)f + sizeof *f + UNGET;
	f->buf_size = BUFSIZ;

	/* Activate line buffered mode for terminals */
	f->lbf = EOF;
	if (!(f->flags & F_NOWR) && !__syscall(SYS_ioctl, fd, TIOCGWINSZ, &wsz))
  404b7d:	f6 03 08             	testb  $0x8,(%rbx)
	f->buf = (unsigned char *)f + sizeof *f + UNGET;
  404b80:	48 8d 83 f0 00 00 00 	lea    0xf0(%rbx),%rax
	f->fd = fd;
  404b87:	89 6b 78             	mov    %ebp,0x78(%rbx)
	f->buf_size = BUFSIZ;
  404b8a:	48 c7 43 60 00 04 00 	movq   $0x400,0x60(%rbx)
  404b91:	00 
	f->lbf = EOF;
  404b92:	c6 83 8b 00 00 00 ff 	movb   $0xff,0x8b(%rbx)
	f->buf = (unsigned char *)f + sizeof *f + UNGET;
  404b99:	48 89 43 58          	mov    %rax,0x58(%rbx)
	if (!(f->flags & F_NOWR) && !__syscall(SYS_ioctl, fd, TIOCGWINSZ, &wsz))
  404b9d:	75 20                	jne    404bbf <__fdopen+0x11b>
  404b9f:	48 63 fd             	movslq %ebp,%rdi
  404ba2:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  404ba7:	be 13 54 00 00       	mov    $0x5413,%esi
  404bac:	b8 10 00 00 00       	mov    $0x10,%eax
  404bb1:	0f 05                	syscall 
  404bb3:	48 85 c0             	test   %rax,%rax
  404bb6:	75 07                	jne    404bbf <__fdopen+0x11b>
		f->lbf = '\n';
  404bb8:	c6 83 8b 00 00 00 0a 	movb   $0xa,0x8b(%rbx)

	/* Initialize op ptrs. No problem if some are unneeded. */
	f->read = __stdio_read;
  404bbf:	48 c7 c0 bd 4d 40 00 	mov    $0x404dbd,%rax
	f->write = __stdio_write;
	f->seek = __stdio_seek;
	f->close = __stdio_close;

	if (!libc.threaded) f->lock = -1;
  404bc6:	83 3d 77 58 a0 10 00 	cmpl   $0x0,0x10a05877(%rip)        # 10e0a444 <__libc+0x4>
	f->read = __stdio_read;
  404bcd:	48 89 43 40          	mov    %rax,0x40(%rbx)
	f->write = __stdio_write;
  404bd1:	48 c7 c0 7c 4e 40 00 	mov    $0x404e7c,%rax
  404bd8:	48 89 43 48          	mov    %rax,0x48(%rbx)
	f->seek = __stdio_seek;
  404bdc:	48 c7 c0 66 4e 40 00 	mov    $0x404e66,%rax
  404be3:	48 89 43 50          	mov    %rax,0x50(%rbx)
	f->close = __stdio_close;
  404be7:	48 c7 c0 9d 4d 40 00 	mov    $0x404d9d,%rax
  404bee:	48 89 43 18          	mov    %rax,0x18(%rbx)
	if (!libc.threaded) f->lock = -1;
  404bf2:	75 0a                	jne    404bfe <__fdopen+0x15a>
  404bf4:	c7 83 8c 00 00 00 ff 	movl   $0xffffffff,0x8c(%rbx)
  404bfb:	ff ff ff 

	/* Add new FILE to open file list */
	return __ofl_add(f);
  404bfe:	48 89 df             	mov    %rbx,%rdi
  404c01:	e8 5a 05 00 00       	callq  405160 <__ofl_add>
  404c06:	48 89 c3             	mov    %rax,%rbx
}
  404c09:	48 83 c4 10          	add    $0x10,%rsp
  404c0d:	48 89 d8             	mov    %rbx,%rax
  404c10:	5b                   	pop    %rbx
  404c11:	5d                   	pop    %rbp
  404c12:	41 5c                	pop    %r12
  404c14:	c3                   	retq   

0000000000404c15 <__fmodeflags>:
#include <fcntl.h>
#include <string.h>

int __fmodeflags(const char *mode)
{
  404c15:	55                   	push   %rbp
  404c16:	53                   	push   %rbx
	int flags;
	if (strchr(mode, '+')) flags = O_RDWR;
  404c17:	be 2b 00 00 00       	mov    $0x2b,%esi
{
  404c1c:	48 89 fd             	mov    %rdi,%rbp
  404c1f:	bb 02 00 00 00       	mov    $0x2,%ebx
  404c24:	48 83 ec 08          	sub    $0x8,%rsp
	if (strchr(mode, '+')) flags = O_RDWR;
  404c28:	e8 63 e2 ff ff       	callq  402e90 <strchr>
  404c2d:	48 85 c0             	test   %rax,%rax
  404c30:	75 09                	jne    404c3b <__fmodeflags+0x26>
	else if (*mode == 'r') flags = O_RDONLY;
  404c32:	31 db                	xor    %ebx,%ebx
  404c34:	80 7d 00 72          	cmpb   $0x72,0x0(%rbp)
  404c38:	0f 95 c3             	setne  %bl
	else flags = O_WRONLY;
	if (strchr(mode, 'x')) flags |= O_EXCL;
  404c3b:	be 78 00 00 00       	mov    $0x78,%esi
  404c40:	48 89 ef             	mov    %rbp,%rdi
  404c43:	e8 48 e2 ff ff       	callq  402e90 <strchr>
  404c48:	89 da                	mov    %ebx,%edx
	if (strchr(mode, 'e')) flags |= O_CLOEXEC;
  404c4a:	be 65 00 00 00       	mov    $0x65,%esi
  404c4f:	48 89 ef             	mov    %rbp,%rdi
	if (strchr(mode, 'x')) flags |= O_EXCL;
  404c52:	80 ca 80             	or     $0x80,%dl
  404c55:	48 85 c0             	test   %rax,%rax
  404c58:	0f 45 da             	cmovne %edx,%ebx
	if (strchr(mode, 'e')) flags |= O_CLOEXEC;
  404c5b:	e8 30 e2 ff ff       	callq  402e90 <strchr>
  404c60:	89 da                	mov    %ebx,%edx
  404c62:	81 ca 00 00 08 00    	or     $0x80000,%edx
  404c68:	48 85 c0             	test   %rax,%rax
	if (*mode != 'r') flags |= O_CREAT;
  404c6b:	8a 45 00             	mov    0x0(%rbp),%al
	if (strchr(mode, 'e')) flags |= O_CLOEXEC;
  404c6e:	0f 45 da             	cmovne %edx,%ebx
	if (*mode != 'r') flags |= O_CREAT;
  404c71:	3c 72                	cmp    $0x72,%al
  404c73:	74 1c                	je     404c91 <__fmodeflags+0x7c>
	if (*mode == 'w') flags |= O_TRUNC;
  404c75:	3c 77                	cmp    $0x77,%al
  404c77:	75 08                	jne    404c81 <__fmodeflags+0x6c>
  404c79:	81 cb 40 02 00 00    	or     $0x240,%ebx
  404c7f:	eb 10                	jmp    404c91 <__fmodeflags+0x7c>
	if (*mode != 'r') flags |= O_CREAT;
  404c81:	89 da                	mov    %ebx,%edx
  404c83:	81 cb 40 04 00 00    	or     $0x440,%ebx
  404c89:	83 ca 40             	or     $0x40,%edx
  404c8c:	3c 61                	cmp    $0x61,%al
  404c8e:	0f 45 da             	cmovne %edx,%ebx
	if (*mode == 'a') flags |= O_APPEND;
	return flags;
}
  404c91:	89 d8                	mov    %ebx,%eax
  404c93:	5a                   	pop    %rdx
  404c94:	5b                   	pop    %rbx
  404c95:	5d                   	pop    %rbp
  404c96:	c3                   	retq   

0000000000404c97 <__lockfile>:
#include "stdio_impl.h"
#include "pthread_impl.h"

int __lockfile(FILE *f)
{
  404c97:	41 54                	push   %r12
  404c99:	55                   	push   %rbp
  404c9a:	53                   	push   %rbx
  404c9b:	64 48 8b 04 25 00 00 	mov    %fs:0x0,%rax
  404ca2:	00 00 
	int owner, tid = __pthread_self()->tid;
  404ca4:	8b 68 38             	mov    0x38(%rax),%ebp
	if (f->lock == tid)
  404ca7:	8b 97 8c 00 00 00    	mov    0x8c(%rdi),%edx
  404cad:	31 c0                	xor    %eax,%eax
  404caf:	39 d5                	cmp    %edx,%ebp
  404cb1:	74 33                	je     404ce6 <__lockfile+0x4f>
		return 0;
	while ((owner = a_cas(&f->lock, 0, tid)))
  404cb3:	4c 8d a7 8c 00 00 00 	lea    0x8c(%rdi),%r12
  404cba:	48 89 fb             	mov    %rdi,%rbx
	__asm__ __volatile__ (
  404cbd:	31 c0                	xor    %eax,%eax
  404cbf:	f0 41 0f b1 2c 24    	lock cmpxchg %ebp,(%r12)
  404cc5:	85 c0                	test   %eax,%eax
  404cc7:	89 c2                	mov    %eax,%edx
  404cc9:	74 16                	je     404ce1 <__lockfile+0x4a>
		__wait(&f->lock, &f->waiters, owner, 1);
  404ccb:	48 8d b3 90 00 00 00 	lea    0x90(%rbx),%rsi
  404cd2:	b9 01 00 00 00       	mov    $0x1,%ecx
  404cd7:	4c 89 e7             	mov    %r12,%rdi
  404cda:	e8 ca e4 ff ff       	callq  4031a9 <__wait>
  404cdf:	eb dc                	jmp    404cbd <__lockfile+0x26>
	return 1;
  404ce1:	b8 01 00 00 00       	mov    $0x1,%eax
}
  404ce6:	5b                   	pop    %rbx
  404ce7:	5d                   	pop    %rbp
  404ce8:	41 5c                	pop    %r12
  404cea:	c3                   	retq   

0000000000404ceb <__unlockfile>:

void __unlockfile(FILE *f)
{
  404ceb:	48 89 f8             	mov    %rdi,%rax
	__asm__ __volatile__(
  404cee:	31 d2                	xor    %edx,%edx
	a_store(&f->lock, 0);
  404cf0:	48 8d bf 8c 00 00 00 	lea    0x8c(%rdi),%rdi
  404cf7:	89 90 8c 00 00 00    	mov    %edx,0x8c(%rax)
  404cfd:	f0 83 0c 24 00       	lock orl $0x0,(%rsp)
	 * obtained by malloc from the heap, it's safe to assume
	 * the dereferences below will not fault. In the worst case,
	 * a spurious syscall will be made. If the implementation of
	 * malloc changes, this assumption needs revisiting. */

	if (f->waiters) __wake(&f->lock, 1, 1);
  404d02:	8b 80 90 00 00 00    	mov    0x90(%rax),%eax
  404d08:	85 c0                	test   %eax,%eax
  404d0a:	74 23                	je     404d2f <__unlockfile+0x44>
  404d0c:	41 b8 ca 00 00 00    	mov    $0xca,%r8d
  404d12:	ba 01 00 00 00       	mov    $0x1,%edx
  404d17:	be 81 00 00 00       	mov    $0x81,%esi
  404d1c:	4c 89 c0             	mov    %r8,%rax
  404d1f:	0f 05                	syscall 
  404d21:	48 83 f8 da          	cmp    $0xffffffffffffffda,%rax
  404d25:	75 08                	jne    404d2f <__unlockfile+0x44>
  404d27:	4c 89 c0             	mov    %r8,%rax
  404d2a:	48 89 d6             	mov    %rdx,%rsi
  404d2d:	0f 05                	syscall 
  404d2f:	c3                   	retq   

0000000000404d30 <__overflow>:
#include "stdio_impl.h"

int __overflow(FILE *f, int _c)
{
  404d30:	53                   	push   %rbx
  404d31:	48 89 fb             	mov    %rdi,%rbx
  404d34:	48 83 ec 10          	sub    $0x10,%rsp
	unsigned char c = _c;
	if (!f->wend && __towrite(f)) return EOF;
  404d38:	48 83 7f 20 00       	cmpq   $0x0,0x20(%rdi)
	unsigned char c = _c;
  404d3d:	40 88 74 24 0f       	mov    %sil,0xf(%rsp)
	if (!f->wend && __towrite(f)) return EOF;
  404d42:	74 0c                	je     404d50 <__overflow+0x20>
	if (f->wpos < f->wend && c != f->lbf) return *f->wpos++ = c;
  404d44:	48 8b 53 28          	mov    0x28(%rbx),%rdx
  404d48:	48 3b 53 20          	cmp    0x20(%rbx),%rdx
  404d4c:	72 10                	jb     404d5e <__overflow+0x2e>
  404d4e:	eb 2a                	jmp    404d7a <__overflow+0x4a>
	if (!f->wend && __towrite(f)) return EOF;
  404d50:	e8 56 02 00 00       	callq  404fab <__towrite>
  404d55:	85 c0                	test   %eax,%eax
  404d57:	74 eb                	je     404d44 <__overflow+0x14>
  404d59:	83 c8 ff             	or     $0xffffffff,%eax
  404d5c:	eb 36                	jmp    404d94 <__overflow+0x64>
	if (f->wpos < f->wend && c != f->lbf) return *f->wpos++ = c;
  404d5e:	0f b6 44 24 0f       	movzbl 0xf(%rsp),%eax
  404d63:	0f be b3 8b 00 00 00 	movsbl 0x8b(%rbx),%esi
  404d6a:	39 f0                	cmp    %esi,%eax
  404d6c:	74 0c                	je     404d7a <__overflow+0x4a>
  404d6e:	48 8d 72 01          	lea    0x1(%rdx),%rsi
  404d72:	48 89 73 28          	mov    %rsi,0x28(%rbx)
  404d76:	88 02                	mov    %al,(%rdx)
  404d78:	eb 1a                	jmp    404d94 <__overflow+0x64>
	if (f->write(f, &c, 1)!=1) return EOF;
  404d7a:	48 8d 74 24 0f       	lea    0xf(%rsp),%rsi
  404d7f:	ba 01 00 00 00       	mov    $0x1,%edx
  404d84:	48 89 df             	mov    %rbx,%rdi
  404d87:	ff 53 48             	callq  *0x48(%rbx)
  404d8a:	48 ff c8             	dec    %rax
  404d8d:	75 ca                	jne    404d59 <__overflow+0x29>
	return c;
  404d8f:	0f b6 44 24 0f       	movzbl 0xf(%rsp),%eax
}
  404d94:	48 83 c4 10          	add    $0x10,%rsp
  404d98:	5b                   	pop    %rbx
  404d99:	c3                   	retq   

0000000000404d9a <__aio_close>:
#include "stdio_impl.h"

static int dummy(int fd)
{
  404d9a:	89 f8                	mov    %edi,%eax
	return fd;
}
  404d9c:	c3                   	retq   

0000000000404d9d <__stdio_close>:

weak_alias(dummy, __aio_close);

int __stdio_close(FILE *f)
{
  404d9d:	48 83 ec 08          	sub    $0x8,%rsp
	return syscall(SYS_close, __aio_close(f->fd));
  404da1:	8b 7f 78             	mov    0x78(%rdi),%edi
  404da4:	e8 f1 ff ff ff       	callq  404d9a <__aio_close>
  404da9:	48 63 f8             	movslq %eax,%rdi
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  404dac:	b8 03 00 00 00       	mov    $0x3,%eax
  404db1:	0f 05                	syscall 
  404db3:	48 89 c7             	mov    %rax,%rdi
  404db6:	e8 35 e7 ff ff       	callq  4034f0 <__syscall_ret>
}
  404dbb:	5a                   	pop    %rdx
  404dbc:	c3                   	retq   

0000000000404dbd <__stdio_read>:
#include "stdio_impl.h"
#include <sys/uio.h>

size_t __stdio_read(FILE *f, unsigned char *buf, size_t len)
{
  404dbd:	41 54                	push   %r12
  404dbf:	55                   	push   %rbp
  404dc0:	48 89 d5             	mov    %rdx,%rbp
  404dc3:	53                   	push   %rbx
	struct iovec iov[2] = {
		{ .iov_base = buf, .iov_len = len - !!f->buf_size },
  404dc4:	31 d2                	xor    %edx,%edx
  404dc6:	48 89 e9             	mov    %rbp,%rcx
{
  404dc9:	48 89 fb             	mov    %rdi,%rbx
  404dcc:	49 89 f4             	mov    %rsi,%r12
  404dcf:	48 83 ec 20          	sub    $0x20,%rsp
		{ .iov_base = buf, .iov_len = len - !!f->buf_size },
  404dd3:	48 8b 47 60          	mov    0x60(%rdi),%rax
	struct iovec iov[2] = {
  404dd7:	48 89 34 24          	mov    %rsi,(%rsp)
		{ .iov_base = f->buf, .iov_len = f->buf_size }
	};
	ssize_t cnt;

	cnt = syscall(SYS_readv, f->fd, iov, 2);
  404ddb:	48 89 e6             	mov    %rsp,%rsi
		{ .iov_base = buf, .iov_len = len - !!f->buf_size },
  404dde:	48 85 c0             	test   %rax,%rax
	struct iovec iov[2] = {
  404de1:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2),
  404de6:	b8 13 00 00 00       	mov    $0x13,%eax
		{ .iov_base = buf, .iov_len = len - !!f->buf_size },
  404deb:	0f 95 c2             	setne  %dl
  404dee:	48 29 d1             	sub    %rdx,%rcx
	struct iovec iov[2] = {
  404df1:	48 8b 57 58          	mov    0x58(%rdi),%rdx
	cnt = syscall(SYS_readv, f->fd, iov, 2);
  404df5:	48 63 7f 78          	movslq 0x78(%rdi),%rdi
		{ .iov_base = buf, .iov_len = len - !!f->buf_size },
  404df9:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
	struct iovec iov[2] = {
  404dfe:	48 89 54 24 10       	mov    %rdx,0x10(%rsp)
  404e03:	ba 02 00 00 00       	mov    $0x2,%edx
  404e08:	0f 05                	syscall 
  404e0a:	48 89 c7             	mov    %rax,%rdi
	cnt = syscall(SYS_readv, f->fd, iov, 2);
  404e0d:	e8 de e6 ff ff       	callq  4034f0 <__syscall_ret>
	if (cnt <= 0) {
  404e12:	48 85 c0             	test   %rax,%rax
  404e15:	7f 0c                	jg     404e23 <__stdio_read+0x66>
		f->flags |= F_EOF ^ ((F_ERR^F_EOF) & cnt);
  404e17:	89 c2                	mov    %eax,%edx
  404e19:	83 e2 30             	and    $0x30,%edx
  404e1c:	83 f2 10             	xor    $0x10,%edx
  404e1f:	09 13                	or     %edx,(%rbx)
  404e21:	eb 34                	jmp    404e57 <__stdio_read+0x9a>
		return cnt;
	}
	if (cnt <= iov[0].iov_len) return cnt;
  404e23:	48 8b 4c 24 08       	mov    0x8(%rsp),%rcx
  404e28:	48 39 c1             	cmp    %rax,%rcx
  404e2b:	73 2a                	jae    404e57 <__stdio_read+0x9a>
	cnt -= iov[0].iov_len;
	f->rpos = f->buf;
  404e2d:	48 8b 53 58          	mov    0x58(%rbx),%rdx
	cnt -= iov[0].iov_len;
  404e31:	48 29 c8             	sub    %rcx,%rax
	f->rend = f->buf + cnt;
  404e34:	48 01 d0             	add    %rdx,%rax
	if (f->buf_size) buf[len-1] = *f->rpos++;
  404e37:	48 83 7b 60 00       	cmpq   $0x0,0x60(%rbx)
	f->rpos = f->buf;
  404e3c:	48 89 53 08          	mov    %rdx,0x8(%rbx)
	f->rend = f->buf + cnt;
  404e40:	48 89 43 10          	mov    %rax,0x10(%rbx)
	if (f->buf_size) buf[len-1] = *f->rpos++;
  404e44:	74 14                	je     404e5a <__stdio_read+0x9d>
  404e46:	48 8d 42 01          	lea    0x1(%rdx),%rax
  404e4a:	48 89 43 08          	mov    %rax,0x8(%rbx)
  404e4e:	8a 02                	mov    (%rdx),%al
  404e50:	41 88 44 2c ff       	mov    %al,-0x1(%r12,%rbp,1)
  404e55:	eb 03                	jmp    404e5a <__stdio_read+0x9d>
  404e57:	48 89 c5             	mov    %rax,%rbp
	return len;
}
  404e5a:	48 83 c4 20          	add    $0x20,%rsp
  404e5e:	48 89 e8             	mov    %rbp,%rax
  404e61:	5b                   	pop    %rbx
  404e62:	5d                   	pop    %rbp
  404e63:	41 5c                	pop    %r12
  404e65:	c3                   	retq   

0000000000404e66 <__stdio_seek>:
	off_t ret;
#ifdef SYS__llseek
	if (syscall(SYS__llseek, f->fd, off>>32, off, &ret, whence)<0)
		ret = -1;
#else
	ret = syscall(SYS_lseek, f->fd, off, whence);
  404e66:	48 63 7f 78          	movslq 0x78(%rdi),%rdi
  404e6a:	48 63 d2             	movslq %edx,%rdx
  404e6d:	b8 08 00 00 00       	mov    $0x8,%eax
  404e72:	0f 05                	syscall 
  404e74:	48 89 c7             	mov    %rax,%rdi
  404e77:	e9 74 e6 ff ff       	jmpq   4034f0 <__syscall_ret>

0000000000404e7c <__stdio_write>:
#include "stdio_impl.h"
#include <sys/uio.h>

size_t __stdio_write(FILE *f, const unsigned char *buf, size_t len)
{
  404e7c:	41 57                	push   %r15
  404e7e:	41 56                	push   %r14
  404e80:	49 89 d7             	mov    %rdx,%r15
  404e83:	41 55                	push   %r13
  404e85:	41 54                	push   %r12
		{ .iov_base = f->wbase, .iov_len = f->wpos-f->wbase },
		{ .iov_base = (void *)buf, .iov_len = len }
	};
	struct iovec *iov = iovs;
	size_t rem = iov[0].iov_len + iov[1].iov_len;
	int iovcnt = 2;
  404e87:	41 bd 02 00 00 00    	mov    $0x2,%r13d
{
  404e8d:	55                   	push   %rbp
  404e8e:	53                   	push   %rbx
  404e8f:	41 be 14 00 00 00    	mov    $0x14,%r14d
  404e95:	48 89 fb             	mov    %rdi,%rbx
  404e98:	48 83 ec 28          	sub    $0x28,%rsp
		{ .iov_base = f->wbase, .iov_len = f->wpos-f->wbase },
  404e9c:	48 8b 47 38          	mov    0x38(%rdi),%rax
  404ea0:	4c 8b 67 28          	mov    0x28(%rdi),%r12
	struct iovec iovs[2] = {
  404ea4:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  404ea9:	48 89 54 24 18       	mov    %rdx,0x18(%rsp)
	struct iovec *iov = iovs;
  404eae:	48 89 e5             	mov    %rsp,%rbp
		{ .iov_base = f->wbase, .iov_len = f->wpos-f->wbase },
  404eb1:	49 29 c4             	sub    %rax,%r12
	struct iovec iovs[2] = {
  404eb4:	48 89 04 24          	mov    %rax,(%rsp)
  404eb8:	4c 89 64 24 08       	mov    %r12,0x8(%rsp)
	size_t rem = iov[0].iov_len + iov[1].iov_len;
  404ebd:	49 01 d4             	add    %rdx,%r12
	ssize_t cnt;
	for (;;) {
		cnt = syscall(SYS_writev, f->fd, iov, iovcnt);
  404ec0:	48 63 7b 78          	movslq 0x78(%rbx),%rdi
  404ec4:	49 63 d5             	movslq %r13d,%rdx
  404ec7:	4c 89 f0             	mov    %r14,%rax
  404eca:	48 89 ee             	mov    %rbp,%rsi
  404ecd:	0f 05                	syscall 
  404ecf:	48 89 c7             	mov    %rax,%rdi
  404ed2:	e8 19 e6 ff ff       	callq  4034f0 <__syscall_ret>
		if (cnt == rem) {
  404ed7:	49 39 c4             	cmp    %rax,%r12
  404eda:	75 19                	jne    404ef5 <__stdio_write+0x79>
			f->wend = f->buf + f->buf_size;
  404edc:	48 8b 43 58          	mov    0x58(%rbx),%rax
  404ee0:	48 89 c2             	mov    %rax,%rdx
  404ee3:	48 03 53 60          	add    0x60(%rbx),%rdx
			f->wpos = f->wbase = f->buf;
  404ee7:	48 89 43 38          	mov    %rax,0x38(%rbx)
  404eeb:	48 89 43 28          	mov    %rax,0x28(%rbx)
			f->wend = f->buf + f->buf_size;
  404eef:	48 89 53 20          	mov    %rdx,0x20(%rbx)
			return len;
  404ef3:	eb 52                	jmp    404f47 <__stdio_write+0xcb>
		}
		if (cnt < 0) {
  404ef5:	48 85 c0             	test   %rax,%rax
  404ef8:	79 27                	jns    404f21 <__stdio_write+0xa5>
			f->wpos = f->wbase = f->wend = 0;
			f->flags |= F_ERR;
  404efa:	83 0b 20             	orl    $0x20,(%rbx)
			return iovcnt == 2 ? 0 : len-iov[0].iov_len;
  404efd:	41 83 fd 02          	cmp    $0x2,%r13d
			f->wpos = f->wbase = f->wend = 0;
  404f01:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
  404f08:	00 
  404f09:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
  404f10:	00 
  404f11:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
  404f18:	00 
			return iovcnt == 2 ? 0 : len-iov[0].iov_len;
  404f19:	74 29                	je     404f44 <__stdio_write+0xc8>
  404f1b:	4c 2b 7d 08          	sub    0x8(%rbp),%r15
  404f1f:	eb 26                	jmp    404f47 <__stdio_write+0xcb>
		}
		rem -= cnt;
		if (cnt > iov[0].iov_len) {
  404f21:	48 8b 55 08          	mov    0x8(%rbp),%rdx
		rem -= cnt;
  404f25:	49 29 c4             	sub    %rax,%r12
		if (cnt > iov[0].iov_len) {
  404f28:	48 39 d0             	cmp    %rdx,%rax
  404f2b:	76 0a                	jbe    404f37 <__stdio_write+0xbb>
			cnt -= iov[0].iov_len;
  404f2d:	48 29 d0             	sub    %rdx,%rax
			iov++; iovcnt--;
  404f30:	48 83 c5 10          	add    $0x10,%rbp
  404f34:	41 ff cd             	dec    %r13d
		}
		iov[0].iov_base = (char *)iov[0].iov_base + cnt;
  404f37:	48 01 45 00          	add    %rax,0x0(%rbp)
		iov[0].iov_len -= cnt;
  404f3b:	48 29 45 08          	sub    %rax,0x8(%rbp)
		cnt = syscall(SYS_writev, f->fd, iov, iovcnt);
  404f3f:	e9 7c ff ff ff       	jmpq   404ec0 <__stdio_write+0x44>
			return iovcnt == 2 ? 0 : len-iov[0].iov_len;
  404f44:	45 31 ff             	xor    %r15d,%r15d
	}
}
  404f47:	48 83 c4 28          	add    $0x28,%rsp
  404f4b:	4c 89 f8             	mov    %r15,%rax
  404f4e:	5b                   	pop    %rbx
  404f4f:	5d                   	pop    %rbp
  404f50:	41 5c                	pop    %r12
  404f52:	41 5d                	pop    %r13
  404f54:	41 5e                	pop    %r14
  404f56:	41 5f                	pop    %r15
  404f58:	c3                   	retq   

0000000000404f59 <__stdout_write>:
#include "stdio_impl.h"
#include <sys/ioctl.h>

size_t __stdout_write(FILE *f, const unsigned char *buf, size_t len)
{
  404f59:	48 83 ec 18          	sub    $0x18,%rsp
	struct winsize wsz;
	f->write = __stdio_write;
	if (!(f->flags & F_SVB) && __syscall(SYS_ioctl, f->fd, TIOCGWINSZ, &wsz))
  404f5d:	f6 07 40             	testb  $0x40,(%rdi)
	f->write = __stdio_write;
  404f60:	48 c7 c0 7c 4e 40 00 	mov    $0x404e7c,%rax
{
  404f67:	49 89 f8             	mov    %rdi,%r8
  404f6a:	49 89 f1             	mov    %rsi,%r9
  404f6d:	49 89 d2             	mov    %rdx,%r10
	f->write = __stdio_write;
  404f70:	48 89 47 48          	mov    %rax,0x48(%rdi)
	if (!(f->flags & F_SVB) && __syscall(SYS_ioctl, f->fd, TIOCGWINSZ, &wsz))
  404f74:	75 22                	jne    404f98 <__stdout_write+0x3f>
  404f76:	48 63 7f 78          	movslq 0x78(%rdi),%rdi
  404f7a:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
  404f7f:	be 13 54 00 00       	mov    $0x5413,%esi
  404f84:	b8 10 00 00 00       	mov    $0x10,%eax
  404f89:	0f 05                	syscall 
  404f8b:	48 85 c0             	test   %rax,%rax
  404f8e:	74 08                	je     404f98 <__stdout_write+0x3f>
		f->lbf = -1;
  404f90:	41 c6 80 8b 00 00 00 	movb   $0xff,0x8b(%r8)
  404f97:	ff 
	return __stdio_write(f, buf, len);
  404f98:	4c 89 d2             	mov    %r10,%rdx
  404f9b:	4c 89 ce             	mov    %r9,%rsi
  404f9e:	4c 89 c7             	mov    %r8,%rdi
  404fa1:	e8 d6 fe ff ff       	callq  404e7c <__stdio_write>
}
  404fa6:	48 83 c4 18          	add    $0x18,%rsp
  404faa:	c3                   	retq   

0000000000404fab <__towrite>:
#include "stdio_impl.h"

int __towrite(FILE *f)
{
	f->mode |= f->mode-1;
  404fab:	8a 97 8a 00 00 00    	mov    0x8a(%rdi),%dl
  404fb1:	8d 42 ff             	lea    -0x1(%rdx),%eax
  404fb4:	09 d0                	or     %edx,%eax
  404fb6:	88 87 8a 00 00 00    	mov    %al,0x8a(%rdi)
	if (f->flags & (F_NOWR)) {
  404fbc:	8b 07                	mov    (%rdi),%eax
  404fbe:	a8 08                	test   $0x8,%al
  404fc0:	74 09                	je     404fcb <__towrite+0x20>
		f->flags |= F_ERR;
  404fc2:	83 c8 20             	or     $0x20,%eax
  404fc5:	89 07                	mov    %eax,(%rdi)
		return EOF;
  404fc7:	83 c8 ff             	or     $0xffffffff,%eax
  404fca:	c3                   	retq   
	}
	/* Clear read buffer (easier than summoning nasal demons) */
	f->rpos = f->rend = 0;

	/* Activate write through the buffer. */
	f->wpos = f->wbase = f->buf;
  404fcb:	48 8b 47 58          	mov    0x58(%rdi),%rax
	f->rpos = f->rend = 0;
  404fcf:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
  404fd6:	00 
  404fd7:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
  404fde:	00 
	f->wpos = f->wbase = f->buf;
  404fdf:	48 89 47 38          	mov    %rax,0x38(%rdi)
  404fe3:	48 89 47 28          	mov    %rax,0x28(%rdi)
	f->wend = f->buf + f->buf_size;
  404fe7:	48 03 47 60          	add    0x60(%rdi),%rax
  404feb:	48 89 47 20          	mov    %rax,0x20(%rdi)

	return 0;
  404fef:	31 c0                	xor    %eax,%eax
}
  404ff1:	c3                   	retq   

0000000000404ff2 <__towrite_needs_stdio_exit>:

void __stdio_exit_needed(void);

void __towrite_needs_stdio_exit()
{
	__stdio_exit_needed();
  404ff2:	e9 29 09 00 00       	jmpq   405920 <__stdio_exit>

0000000000404ff7 <fputs>:
#include "stdio_impl.h"
#include <string.h>

int fputs(const char *restrict s, FILE *restrict f)
{
  404ff7:	41 54                	push   %r12
  404ff9:	55                   	push   %rbp
  404ffa:	49 89 f4             	mov    %rsi,%r12
  404ffd:	53                   	push   %rbx
  404ffe:	48 89 fd             	mov    %rdi,%rbp
	size_t l = strlen(s);
  405001:	e8 aa df ff ff       	callq  402fb0 <strlen>
	return (fwrite(s, 1, l, f)==l) - 1;
  405006:	4c 89 e1             	mov    %r12,%rcx
	size_t l = strlen(s);
  405009:	48 89 c3             	mov    %rax,%rbx
	return (fwrite(s, 1, l, f)==l) - 1;
  40500c:	48 89 ef             	mov    %rbp,%rdi
  40500f:	48 89 c2             	mov    %rax,%rdx
  405012:	be 01 00 00 00       	mov    $0x1,%esi
  405017:	e8 bb 00 00 00       	callq  4050d7 <fwrite>
  40501c:	48 39 c3             	cmp    %rax,%rbx
  40501f:	0f 95 c0             	setne  %al
  405022:	0f b6 c0             	movzbl %al,%eax
}
  405025:	5b                   	pop    %rbx
	return (fwrite(s, 1, l, f)==l) - 1;
  405026:	f7 d8                	neg    %eax
}
  405028:	5d                   	pop    %rbp
  405029:	41 5c                	pop    %r12
  40502b:	c3                   	retq   

000000000040502c <__fwritex>:
#include "stdio_impl.h"
#include <string.h>

size_t __fwritex(const unsigned char *restrict s, size_t l, FILE *restrict f)
{
  40502c:	41 55                	push   %r13
  40502e:	41 54                	push   %r12
  405030:	49 89 fd             	mov    %rdi,%r13
  405033:	55                   	push   %rbp
  405034:	53                   	push   %rbx
  405035:	49 89 f4             	mov    %rsi,%r12
  405038:	48 89 d3             	mov    %rdx,%rbx
  40503b:	48 83 ec 08          	sub    $0x8,%rsp
	size_t i=0;

	if (!f->wend && __towrite(f)) return 0;
  40503f:	48 83 7a 20 00       	cmpq   $0x0,0x20(%rdx)
  405044:	74 23                	je     405069 <__fwritex+0x3d>

	if (l > f->wend - f->wpos) return f->write(f, s, l);
  405046:	48 8b 43 20          	mov    0x20(%rbx),%rax
  40504a:	48 2b 43 28          	sub    0x28(%rbx),%rax
  40504e:	4c 39 e0             	cmp    %r12,%rax
  405051:	73 26                	jae    405079 <__fwritex+0x4d>
  405053:	48 8b 43 48          	mov    0x48(%rbx),%rax
  405057:	4c 89 e2             	mov    %r12,%rdx
  40505a:	4c 89 ee             	mov    %r13,%rsi
	}

	memcpy(f->wpos, s, l);
	f->wpos += l;
	return l+i;
}
  40505d:	59                   	pop    %rcx
	if (l > f->wend - f->wpos) return f->write(f, s, l);
  40505e:	48 89 df             	mov    %rbx,%rdi
}
  405061:	5b                   	pop    %rbx
  405062:	5d                   	pop    %rbp
  405063:	41 5c                	pop    %r12
  405065:	41 5d                	pop    %r13
	if (l > f->wend - f->wpos) return f->write(f, s, l);
  405067:	ff e0                	jmpq   *%rax
	if (!f->wend && __towrite(f)) return 0;
  405069:	48 89 d7             	mov    %rdx,%rdi
  40506c:	e8 3a ff ff ff       	callq  404fab <__towrite>
  405071:	85 c0                	test   %eax,%eax
  405073:	74 d1                	je     405046 <__fwritex+0x1a>
  405075:	31 c0                	xor    %eax,%eax
  405077:	eb 56                	jmp    4050cf <__fwritex+0xa3>
	if (f->lbf >= 0) {
  405079:	80 bb 8b 00 00 00 00 	cmpb   $0x0,0x8b(%rbx)
  405080:	4c 89 e5             	mov    %r12,%rbp
  405083:	78 16                	js     40509b <__fwritex+0x6f>
		for (i=l; i && s[i-1] != '\n'; i--);
  405085:	48 85 ed             	test   %rbp,%rbp
  405088:	74 13                	je     40509d <__fwritex+0x71>
  40508a:	41 80 7c 2d ff 0a    	cmpb   $0xa,-0x1(%r13,%rbp,1)
  405090:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
  405094:	74 20                	je     4050b6 <__fwritex+0x8a>
  405096:	48 89 c5             	mov    %rax,%rbp
  405099:	eb ea                	jmp    405085 <__fwritex+0x59>
	size_t i=0;
  40509b:	31 ed                	xor    %ebp,%ebp
	memcpy(f->wpos, s, l);
  40509d:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
  4050a1:	4c 89 e2             	mov    %r12,%rdx
  4050a4:	4c 89 ee             	mov    %r13,%rsi
  4050a7:	e8 f0 01 00 00       	callq  40529c <memcpy>
	f->wpos += l;
  4050ac:	4c 01 63 28          	add    %r12,0x28(%rbx)
	return l+i;
  4050b0:	49 8d 04 2c          	lea    (%r12,%rbp,1),%rax
  4050b4:	eb 19                	jmp    4050cf <__fwritex+0xa3>
			size_t n = f->write(f, s, i);
  4050b6:	48 89 ea             	mov    %rbp,%rdx
  4050b9:	4c 89 ee             	mov    %r13,%rsi
  4050bc:	48 89 df             	mov    %rbx,%rdi
  4050bf:	ff 53 48             	callq  *0x48(%rbx)
			if (n < i) return n;
  4050c2:	48 39 c5             	cmp    %rax,%rbp
  4050c5:	77 08                	ja     4050cf <__fwritex+0xa3>
			s += i;
  4050c7:	49 01 ed             	add    %rbp,%r13
			l -= i;
  4050ca:	49 29 ec             	sub    %rbp,%r12
  4050cd:	eb ce                	jmp    40509d <__fwritex+0x71>
}
  4050cf:	5a                   	pop    %rdx
  4050d0:	5b                   	pop    %rbx
  4050d1:	5d                   	pop    %rbp
  4050d2:	41 5c                	pop    %r12
  4050d4:	41 5d                	pop    %r13
  4050d6:	c3                   	retq   

00000000004050d7 <fwrite>:

size_t fwrite(const void *restrict src, size_t size, size_t nmemb, FILE *restrict f)
{
  4050d7:	41 57                	push   %r15
  4050d9:	41 56                	push   %r14
	size_t k, l = size*nmemb;
	if (!size) nmemb = 0;
  4050db:	b8 00 00 00 00       	mov    $0x0,%eax
{
  4050e0:	41 55                	push   %r13
  4050e2:	41 54                	push   %r12
	size_t k, l = size*nmemb;
  4050e4:	49 89 f5             	mov    %rsi,%r13
{
  4050e7:	55                   	push   %rbp
  4050e8:	53                   	push   %rbx
  4050e9:	48 89 d3             	mov    %rdx,%rbx
	size_t k, l = size*nmemb;
  4050ec:	4c 0f af ea          	imul   %rdx,%r13
{
  4050f0:	49 89 ff             	mov    %rdi,%r15
  4050f3:	48 89 f5             	mov    %rsi,%rbp
  4050f6:	48 83 ec 18          	sub    $0x18,%rsp
	if (!size) nmemb = 0;
  4050fa:	48 85 f6             	test   %rsi,%rsi
{
  4050fd:	49 89 cc             	mov    %rcx,%r12
	if (!size) nmemb = 0;
  405100:	48 0f 44 d8          	cmove  %rax,%rbx
	FLOCK(f);
  405104:	8b 81 8c 00 00 00    	mov    0x8c(%rcx),%eax
  40510a:	45 31 f6             	xor    %r14d,%r14d
  40510d:	85 c0                	test   %eax,%eax
  40510f:	78 0b                	js     40511c <fwrite+0x45>
  405111:	48 89 cf             	mov    %rcx,%rdi
  405114:	e8 7e fb ff ff       	callq  404c97 <__lockfile>
  405119:	41 89 c6             	mov    %eax,%r14d
	k = __fwritex(src, l, f);
  40511c:	4c 89 e2             	mov    %r12,%rdx
  40511f:	4c 89 ee             	mov    %r13,%rsi
  405122:	4c 89 ff             	mov    %r15,%rdi
  405125:	e8 02 ff ff ff       	callq  40502c <__fwritex>
	FUNLOCK(f);
  40512a:	45 85 f6             	test   %r14d,%r14d
  40512d:	74 12                	je     405141 <fwrite+0x6a>
  40512f:	4c 89 e7             	mov    %r12,%rdi
  405132:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
  405137:	e8 af fb ff ff       	callq  404ceb <__unlockfile>
  40513c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
	return k==l ? nmemb : k/size;
  405141:	49 39 c5             	cmp    %rax,%r13
  405144:	74 08                	je     40514e <fwrite+0x77>
  405146:	31 d2                	xor    %edx,%edx
  405148:	48 f7 f5             	div    %rbp
  40514b:	48 89 c3             	mov    %rax,%rbx
}
  40514e:	48 83 c4 18          	add    $0x18,%rsp
  405152:	48 89 d8             	mov    %rbx,%rax
  405155:	5b                   	pop    %rbx
  405156:	5d                   	pop    %rbp
  405157:	41 5c                	pop    %r12
  405159:	41 5d                	pop    %r13
  40515b:	41 5e                	pop    %r14
  40515d:	41 5f                	pop    %r15
  40515f:	c3                   	retq   

0000000000405160 <__ofl_add>:
#include "stdio_impl.h"

FILE *__ofl_add(FILE *f)
{
  405160:	53                   	push   %rbx
  405161:	48 89 fb             	mov    %rdi,%rbx
	FILE **head = __ofl_lock();
  405164:	e8 a4 c2 ff ff       	callq  40140d <__ofl_lock>
	f->next = *head;
  405169:	48 8b 10             	mov    (%rax),%rdx
  40516c:	48 89 53 70          	mov    %rdx,0x70(%rbx)
	if (*head) (*head)->prev = f;
  405170:	48 8b 10             	mov    (%rax),%rdx
  405173:	48 85 d2             	test   %rdx,%rdx
  405176:	74 04                	je     40517c <__ofl_add+0x1c>
  405178:	48 89 5a 68          	mov    %rbx,0x68(%rdx)
	*head = f;
  40517c:	48 89 18             	mov    %rbx,(%rax)
	__ofl_unlock();
  40517f:	e8 a2 c2 ff ff       	callq  401426 <__ofl_unlock>
	return f;
}
  405184:	48 89 d8             	mov    %rbx,%rax
  405187:	5b                   	pop    %rbx
  405188:	c3                   	retq   
  405189:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000405190 <memchr>:

void *memchr(const void *src, int c, size_t n)
{
	const unsigned char *s = src;
	c = (unsigned char)c;
	for (; ((uintptr_t)s & ALIGN) && n && *s != c; s++, n--);
  405190:	40 f6 c7 07          	test   $0x7,%dil
  405194:	40 0f b6 f6          	movzbl %sil,%esi
  405198:	75 1f                	jne    4051b9 <memchr+0x29>
  40519a:	eb 2c                	jmp    4051c8 <memchr+0x38>
  40519c:	0f 1f 40 00          	nopl   0x0(%rax)
  4051a0:	0f b6 07             	movzbl (%rdi),%eax
  4051a3:	39 c6                	cmp    %eax,%esi
  4051a5:	0f 84 e5 00 00 00    	je     405290 <memchr+0x100>
  4051ab:	48 83 c7 01          	add    $0x1,%rdi
  4051af:	48 83 ea 01          	sub    $0x1,%rdx
  4051b3:	40 f6 c7 07          	test   $0x7,%dil
  4051b7:	74 0f                	je     4051c8 <memchr+0x38>
  4051b9:	48 85 d2             	test   %rdx,%rdx
  4051bc:	75 e2                	jne    4051a0 <memchr+0x10>
		const size_t *w;
		size_t k = ONES * c;
		for (w = (const void *)s; n>=SS && !HASZERO(*w^k); w++, n-=SS);
		for (s = (const void *)w; n && *s != c; s++, n--);
	}
	return n ? (void *)s : 0;
  4051be:	31 c0                	xor    %eax,%eax
  4051c0:	c3                   	retq   
  4051c1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  4051c8:	31 c0                	xor    %eax,%eax
	if (n && *s != c) {
  4051ca:	48 85 d2             	test   %rdx,%rdx
  4051cd:	0f 84 c0 00 00 00    	je     405293 <memchr+0x103>
  4051d3:	0f b6 07             	movzbl (%rdi),%eax
  4051d6:	39 c6                	cmp    %eax,%esi
  4051d8:	0f 84 b2 00 00 00    	je     405290 <memchr+0x100>
		size_t k = ONES * c;
  4051de:	4c 63 d6             	movslq %esi,%r10
  4051e1:	49 b8 01 01 01 01 01 	movabs $0x101010101010101,%r8
  4051e8:	01 01 01 
  4051eb:	4d 0f af d0          	imul   %r8,%r10
		for (w = (const void *)s; n>=SS && !HASZERO(*w^k); w++, n-=SS);
  4051ef:	48 83 fa 07          	cmp    $0x7,%rdx
  4051f3:	76 69                	jbe    40525e <memchr+0xce>
  4051f5:	4c 89 d0             	mov    %r10,%rax
  4051f8:	48 33 07             	xor    (%rdi),%rax
  4051fb:	48 89 c1             	mov    %rax,%rcx
  4051fe:	4c 29 c0             	sub    %r8,%rax
  405201:	49 b8 80 80 80 80 80 	movabs $0x8080808080808080,%r8
  405208:	80 80 80 
  40520b:	48 f7 d1             	not    %rcx
  40520e:	48 21 c8             	and    %rcx,%rax
  405211:	4c 85 c0             	test   %r8,%rax
  405214:	75 48                	jne    40525e <memchr+0xce>
  405216:	48 89 f8             	mov    %rdi,%rax
  405219:	49 b9 ff fe fe fe fe 	movabs $0xfefefefefefefeff,%r9
  405220:	fe fe fe 
  405223:	eb 18                	jmp    40523d <memchr+0xad>
  405225:	0f 1f 00             	nopl   (%rax)
  405228:	4c 89 d1             	mov    %r10,%rcx
  40522b:	48 33 08             	xor    (%rax),%rcx
  40522e:	4a 8d 3c 09          	lea    (%rcx,%r9,1),%rdi
  405232:	48 f7 d1             	not    %rcx
  405235:	48 21 f9             	and    %rdi,%rcx
  405238:	4c 85 c1             	test   %r8,%rcx
  40523b:	75 17                	jne    405254 <memchr+0xc4>
  40523d:	48 83 ea 08          	sub    $0x8,%rdx
  405241:	48 83 c0 08          	add    $0x8,%rax
  405245:	48 83 fa 07          	cmp    $0x7,%rdx
  405249:	77 dd                	ja     405228 <memchr+0x98>
		for (s = (const void *)w; n && *s != c; s++, n--);
  40524b:	48 85 d2             	test   %rdx,%rdx
  40524e:	0f 84 6a ff ff ff    	je     4051be <memchr+0x2e>
  405254:	0f b6 08             	movzbl (%rax),%ecx
  405257:	48 89 c7             	mov    %rax,%rdi
  40525a:	39 ce                	cmp    %ecx,%esi
  40525c:	74 3c                	je     40529a <memchr+0x10a>
  40525e:	48 8d 4f 01          	lea    0x1(%rdi),%rcx
  405262:	48 01 fa             	add    %rdi,%rdx
  405265:	eb 14                	jmp    40527b <memchr+0xeb>
  405267:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  40526e:	00 00 
  405270:	0f b6 38             	movzbl (%rax),%edi
  405273:	48 83 c1 01          	add    $0x1,%rcx
  405277:	39 fe                	cmp    %edi,%esi
  405279:	74 1d                	je     405298 <memchr+0x108>
  40527b:	48 39 ca             	cmp    %rcx,%rdx
  40527e:	48 89 c8             	mov    %rcx,%rax
  405281:	75 ed                	jne    405270 <memchr+0xe0>
  405283:	e9 36 ff ff ff       	jmpq   4051be <memchr+0x2e>
  405288:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40528f:	00 
  405290:	48 89 f8             	mov    %rdi,%rax
}
  405293:	f3 c3                	repz retq 
  405295:	0f 1f 00             	nopl   (%rax)
  405298:	f3 c3                	repz retq 
  40529a:	f3 c3                	repz retq 

000000000040529c <memcpy>:
.global __memcpy_fwd
.hidden __memcpy_fwd
.type memcpy,@function
memcpy:
__memcpy_fwd:
	mov %rdi,%rax
  40529c:	48 89 f8             	mov    %rdi,%rax
	cmp $8,%rdx
  40529f:	48 83 fa 08          	cmp    $0x8,%rdx
	jc 1f
  4052a3:	72 14                	jb     4052b9 <memcpy+0x1d>
	test $7,%edi
  4052a5:	f7 c7 07 00 00 00    	test   $0x7,%edi
	jz 1f
  4052ab:	74 0c                	je     4052b9 <memcpy+0x1d>
2:	movsb
  4052ad:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
	dec %rdx
  4052ae:	48 ff ca             	dec    %rdx
	test $7,%edi
  4052b1:	f7 c7 07 00 00 00    	test   $0x7,%edi
	jnz 2b
  4052b7:	75 f4                	jne    4052ad <memcpy+0x11>
1:	mov %rdx,%rcx
  4052b9:	48 89 d1             	mov    %rdx,%rcx
	shr $3,%rcx
  4052bc:	48 c1 e9 03          	shr    $0x3,%rcx
	rep
  4052c0:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	movsq
	and $7,%edx
  4052c3:	83 e2 07             	and    $0x7,%edx
	jz 1f
  4052c6:	74 05                	je     4052cd <memcpy+0x31>
2:	movsb
  4052c8:	a4                   	movsb  %ds:(%rsi),%es:(%rdi)
	dec %edx
  4052c9:	ff ca                	dec    %edx
	jnz 2b
  4052cb:	75 fb                	jne    4052c8 <memcpy+0x2c>
1:	ret
  4052cd:	c3                   	retq   

00000000004052ce <__set_thread_area>:
/* Copyright 2011-2012 Nicholas J. Kain, licensed under standard MIT license */
.text
.global __set_thread_area
.type __set_thread_area,@function
__set_thread_area:
	mov %rdi,%rsi           /* shift for syscall */
  4052ce:	48 89 fe             	mov    %rdi,%rsi
	movl $0x1002,%edi       /* SET_FS register */
  4052d1:	bf 02 10 00 00       	mov    $0x1002,%edi
	movl $158,%eax          /* set fs segment to */
  4052d6:	b8 9e 00 00 00       	mov    $0x9e,%eax
	syscall                 /* arch_prctl(SET_FS, arg)*/
  4052db:	0f 05                	syscall 
	ret
  4052dd:	c3                   	retq   

00000000004052de <cgt_init>:
void *__vdsosym(const char *, const char *);

static void *volatile vdso_func;

static int cgt_init(clockid_t clk, struct timespec *ts)
{
  4052de:	55                   	push   %rbp
  4052df:	53                   	push   %rbx
  4052e0:	48 89 f5             	mov    %rsi,%rbp
  4052e3:	89 fb                	mov    %edi,%ebx
	void *p = __vdsosym(VDSO_CGT_VER, VDSO_CGT_SYM);
  4052e5:	48 8d 35 b4 17 00 00 	lea    0x17b4(%rip),%rsi        # 406aa0 <bin_tab+0x40>
  4052ec:	48 8d 3d c2 17 00 00 	lea    0x17c2(%rip),%rdi        # 406ab5 <bin_tab+0x55>
{
  4052f3:	48 83 ec 08          	sub    $0x8,%rsp
	void *p = __vdsosym(VDSO_CGT_VER, VDSO_CGT_SYM);
  4052f7:	e8 a4 00 00 00       	callq  4053a0 <__vdsosym>
  4052fc:	48 89 c2             	mov    %rax,%rdx
	__asm__( "lock ; cmpxchg %3, %1"
  4052ff:	48 8d 05 d8 ff ff ff 	lea    -0x28(%rip),%rax        # 4052de <cgt_init>
  405306:	f0 48 0f b1 15 99 1f 	lock cmpxchg %rdx,0x201f99(%rip)        # 6072a8 <vdso_func>
  40530d:	20 00 
	int (*f)(clockid_t, struct timespec *) =
		(int (*)(clockid_t, struct timespec *))p;
	a_cas_p(&vdso_func, (void *)cgt_init, p);
	return f ? f(clk, ts) : -ENOSYS;
  40530f:	48 85 d2             	test   %rdx,%rdx
  405312:	74 0a                	je     40531e <cgt_init+0x40>
}
  405314:	59                   	pop    %rcx
	return f ? f(clk, ts) : -ENOSYS;
  405315:	48 89 ee             	mov    %rbp,%rsi
  405318:	89 df                	mov    %ebx,%edi
}
  40531a:	5b                   	pop    %rbx
  40531b:	5d                   	pop    %rbp
	return f ? f(clk, ts) : -ENOSYS;
  40531c:	ff e2                	jmpq   *%rdx
}
  40531e:	5a                   	pop    %rdx
  40531f:	b8 da ff ff ff       	mov    $0xffffffda,%eax
  405324:	5b                   	pop    %rbx
  405325:	5d                   	pop    %rbp
  405326:	c3                   	retq   

0000000000405327 <__clock_gettime>:
static void *volatile vdso_func = (void *)cgt_init;

#endif

int __clock_gettime(clockid_t clk, struct timespec *ts)
{
  405327:	55                   	push   %rbp
  405328:	53                   	push   %rbx
  405329:	89 fd                	mov    %edi,%ebp
  40532b:	48 89 f3             	mov    %rsi,%rbx
  40532e:	48 83 ec 08          	sub    $0x8,%rsp
	int r;

#ifdef VDSO_CGT_SYM
	int (*f)(clockid_t, struct timespec *) =
		(int (*)(clockid_t, struct timespec *))vdso_func;
  405332:	48 8b 05 6f 1f 20 00 	mov    0x201f6f(%rip),%rax        # 6072a8 <vdso_func>
	if (f) {
  405339:	48 85 c0             	test   %rax,%rax
  40533c:	74 12                	je     405350 <__clock_gettime+0x29>
		r = f(clk, ts);
  40533e:	ff d0                	callq  *%rax
		if (!r) return r;
  405340:	85 c0                	test   %eax,%eax
  405342:	74 4e                	je     405392 <__clock_gettime+0x6b>
		if (r == -EINVAL) return __syscall_ret(r);
  405344:	83 f8 ea             	cmp    $0xffffffea,%eax
  405347:	48 c7 c7 ea ff ff ff 	mov    $0xffffffffffffffea,%rdi
  40534e:	74 3d                	je     40538d <__clock_gettime+0x66>
		 * also handles the case where cgt_init fails to find
		 * a vdso function to use. */
	}
#endif

	r = __syscall(SYS_clock_gettime, clk, ts);
  405350:	48 63 fd             	movslq %ebp,%rdi
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1), "S"(a2)
  405353:	b8 e4 00 00 00       	mov    $0xe4,%eax
  405358:	48 89 de             	mov    %rbx,%rsi
  40535b:	0f 05                	syscall 
	if (r == -ENOSYS) {
  40535d:	83 f8 da             	cmp    $0xffffffda,%eax
	r = __syscall(SYS_clock_gettime, clk, ts);
  405360:	48 63 f8             	movslq %eax,%rdi
	if (r == -ENOSYS) {
  405363:	75 28                	jne    40538d <__clock_gettime+0x66>
		if (clk == CLOCK_REALTIME) {
  405365:	85 ed                	test   %ebp,%ebp
			__syscall(SYS_gettimeofday, ts, 0);
			ts->tv_nsec = (int)ts->tv_nsec * 1000;
			return 0;
		}
		r = -EINVAL;
  405367:	48 c7 c7 ea ff ff ff 	mov    $0xffffffffffffffea,%rdi
		if (clk == CLOCK_REALTIME) {
  40536e:	75 1d                	jne    40538d <__clock_gettime+0x66>
  405370:	31 f6                	xor    %esi,%esi
  405372:	b8 60 00 00 00       	mov    $0x60,%eax
  405377:	48 89 df             	mov    %rbx,%rdi
  40537a:	0f 05                	syscall 
			ts->tv_nsec = (int)ts->tv_nsec * 1000;
  40537c:	69 43 08 e8 03 00 00 	imul   $0x3e8,0x8(%rbx),%eax
  405383:	48 98                	cltq   
  405385:	48 89 43 08          	mov    %rax,0x8(%rbx)
			return 0;
  405389:	31 c0                	xor    %eax,%eax
  40538b:	eb 05                	jmp    405392 <__clock_gettime+0x6b>
	}
	return __syscall_ret(r);
  40538d:	e8 5e e1 ff ff       	callq  4034f0 <__syscall_ret>
}
  405392:	5a                   	pop    %rdx
  405393:	5b                   	pop    %rbx
  405394:	5d                   	pop    %rbp
  405395:	c3                   	retq   
  405396:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40539d:	00 00 00 

00000000004053a0 <__vdsosym>:
#define OK_BINDS (1<<STB_GLOBAL | 1<<STB_WEAK | 1<<STB_GNU_UNIQUE)

void *__vdsosym(const char *vername, const char *name)
{
	size_t i;
	for (i=0; libc.auxv[i] != AT_SYSINFO_EHDR; i+=2)
  4053a0:	4c 8b 05 a9 50 a0 10 	mov    0x10a050a9(%rip),%r8        # 10e0a450 <__libc+0x10>
  4053a7:	49 8b 00             	mov    (%r8),%rax
  4053aa:	48 83 f8 21          	cmp    $0x21,%rax
  4053ae:	0f 84 5a 02 00 00    	je     40560e <__vdsosym+0x26e>
		if (!libc.auxv[i]) return 0;
  4053b4:	31 c9                	xor    %ecx,%ecx
  4053b6:	48 85 c0             	test   %rax,%rax
  4053b9:	75 11                	jne    4053cc <__vdsosym+0x2c>
  4053bb:	e9 80 01 00 00       	jmpq   405540 <__vdsosym+0x1a0>
  4053c0:	48 85 c0             	test   %rax,%rax
	for (i=0; libc.auxv[i] != AT_SYSINFO_EHDR; i+=2)
  4053c3:	48 89 d1             	mov    %rdx,%rcx
		if (!libc.auxv[i]) return 0;
  4053c6:	0f 84 74 01 00 00    	je     405540 <__vdsosym+0x1a0>
	for (i=0; libc.auxv[i] != AT_SYSINFO_EHDR; i+=2)
  4053cc:	48 8d 51 02          	lea    0x2(%rcx),%rdx
  4053d0:	49 8b 04 d0          	mov    (%r8,%rdx,8),%rax
  4053d4:	48 83 f8 21          	cmp    $0x21,%rax
  4053d8:	75 e6                	jne    4053c0 <__vdsosym+0x20>
  4053da:	48 8d 04 cd 18 00 00 	lea    0x18(,%rcx,8),%rax
  4053e1:	00 
	if (!libc.auxv[i+1]) return 0;
  4053e2:	4d 8b 1c 00          	mov    (%r8,%rax,1),%r11
  4053e6:	4d 85 db             	test   %r11,%r11
  4053e9:	0f 84 51 01 00 00    	je     405540 <__vdsosym+0x1a0>
	Ehdr *eh = (void *)libc.auxv[i+1];
	Phdr *ph = (void *)((char *)eh + eh->e_phoff);
	size_t *dynv=0, base=-1;
	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  4053ef:	45 0f b7 4b 38       	movzwl 0x38(%r11),%r9d
	Phdr *ph = (void *)((char *)eh + eh->e_phoff);
  4053f4:	4c 89 da             	mov    %r11,%rdx
  4053f7:	49 03 53 20          	add    0x20(%r11),%rdx
	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  4053fb:	4d 85 c9             	test   %r9,%r9
  4053fe:	0f 84 3c 01 00 00    	je     405540 <__vdsosym+0x1a0>
{
  405404:	41 57                	push   %r15
  405406:	41 56                	push   %r14
	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  405408:	31 c0                	xor    %eax,%eax
{
  40540a:	41 55                	push   %r13
  40540c:	41 54                	push   %r12
	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  40540e:	31 c9                	xor    %ecx,%ecx
{
  405410:	55                   	push   %rbp
  405411:	53                   	push   %rbx
	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  405412:	48 c7 c5 ff ff ff ff 	mov    $0xffffffffffffffff,%rbp
{
  405419:	48 83 ec 28          	sub    $0x28,%rsp
  40541d:	45 0f b7 53 36       	movzwl 0x36(%r11),%r10d
  405422:	eb 1a                	jmp    40543e <__vdsosym+0x9e>
  405424:	0f 1f 40 00          	nopl   0x0(%rax)
		if (ph->p_type == PT_LOAD)
			base = (size_t)eh + ph->p_offset - ph->p_vaddr;
		else if (ph->p_type == PT_DYNAMIC)
  405428:	41 83 f8 02          	cmp    $0x2,%r8d
  40542c:	0f 84 d6 00 00 00    	je     405508 <__vdsosym+0x168>
	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  405432:	48 83 c1 01          	add    $0x1,%rcx
  405436:	4c 01 d2             	add    %r10,%rdx
  405439:	4c 39 c9             	cmp    %r9,%rcx
  40543c:	74 20                	je     40545e <__vdsosym+0xbe>
		if (ph->p_type == PT_LOAD)
  40543e:	44 8b 02             	mov    (%rdx),%r8d
  405441:	41 83 f8 01          	cmp    $0x1,%r8d
  405445:	75 e1                	jne    405428 <__vdsosym+0x88>
			base = (size_t)eh + ph->p_offset - ph->p_vaddr;
  405447:	4c 89 dd             	mov    %r11,%rbp
	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  40544a:	48 83 c1 01          	add    $0x1,%rcx
			base = (size_t)eh + ph->p_offset - ph->p_vaddr;
  40544e:	48 03 6a 08          	add    0x8(%rdx),%rbp
  405452:	48 2b 6a 10          	sub    0x10(%rdx),%rbp
	for (i=0; i<eh->e_phnum; i++, ph=(void *)((char *)ph+eh->e_phentsize)) {
  405456:	4c 01 d2             	add    %r10,%rdx
  405459:	4c 39 c9             	cmp    %r9,%rcx
  40545c:	75 e0                	jne    40543e <__vdsosym+0x9e>
			dynv = (void *)((char *)eh + ph->p_offset);
	}
	if (!dynv || base==(size_t)-1) return 0;
  40545e:	48 85 c0             	test   %rax,%rax
  405461:	0f 84 8c 00 00 00    	je     4054f3 <__vdsosym+0x153>
  405467:	48 83 fd ff          	cmp    $0xffffffffffffffff,%rbp
  40546b:	0f 84 82 00 00 00    	je     4054f3 <__vdsosym+0x153>
	Sym *syms = 0;
	Elf_Symndx *hashtab = 0;
	uint16_t *versym = 0;
	Verdef *verdef = 0;
	
	for (i=0; dynv[i]; i+=2) {
  405471:	48 8b 18             	mov    (%rax),%rbx
  405474:	48 85 db             	test   %rbx,%rbx
  405477:	74 7a                	je     4054f3 <__vdsosym+0x153>
  405479:	48 83 c0 08          	add    $0x8,%rax
  40547d:	45 31 ed             	xor    %r13d,%r13d
  405480:	45 31 c0             	xor    %r8d,%r8d
  405483:	31 c9                	xor    %ecx,%ecx
  405485:	45 31 c9             	xor    %r9d,%r9d
  405488:	45 31 e4             	xor    %r12d,%r12d
  40548b:	eb 22                	jmp    4054af <__vdsosym+0x10f>
  40548d:	0f 1f 00             	nopl   (%rax)
		void *p = (void *)(base + dynv[i+1]);
		switch(dynv[i]) {
  405490:	48 83 fb 04          	cmp    $0x4,%rbx
  405494:	0f 84 96 00 00 00    	je     405530 <__vdsosym+0x190>
		case DT_STRTAB: strings = p; break;
  40549a:	48 83 fb 05          	cmp    $0x5,%rbx
  40549e:	4c 0f 44 e2          	cmove  %rdx,%r12
  4054a2:	48 83 c0 10          	add    $0x10,%rax
	for (i=0; dynv[i]; i+=2) {
  4054a6:	48 8b 58 f8          	mov    -0x8(%rax),%rbx
  4054aa:	48 85 db             	test   %rbx,%rbx
  4054ad:	74 2f                	je     4054de <__vdsosym+0x13e>
		void *p = (void *)(base + dynv[i+1]);
  4054af:	48 89 ea             	mov    %rbp,%rdx
  4054b2:	48 03 10             	add    (%rax),%rdx
		switch(dynv[i]) {
  4054b5:	48 83 fb 06          	cmp    $0x6,%rbx
  4054b9:	74 5d                	je     405518 <__vdsosym+0x178>
  4054bb:	76 d3                	jbe    405490 <__vdsosym+0xf0>
  4054bd:	48 81 fb f0 ff ff 6f 	cmp    $0x6ffffff0,%rbx
  4054c4:	74 5a                	je     405520 <__vdsosym+0x180>
		case DT_SYMTAB: syms = p; break;
		case DT_HASH: hashtab = p; break;
		case DT_VERSYM: versym = p; break;
		case DT_VERDEF: verdef = p; break;
  4054c6:	48 81 fb fc ff ff 6f 	cmp    $0x6ffffffc,%rbx
  4054cd:	4c 0f 44 ea          	cmove  %rdx,%r13
  4054d1:	48 83 c0 10          	add    $0x10,%rax
	for (i=0; dynv[i]; i+=2) {
  4054d5:	48 8b 58 f8          	mov    -0x8(%rax),%rbx
  4054d9:	48 85 db             	test   %rbx,%rbx
  4054dc:	75 d1                	jne    4054af <__vdsosym+0x10f>
		}
	}	

	if (!strings || !syms || !hashtab) return 0;
  4054de:	4d 85 e4             	test   %r12,%r12
  4054e1:	0f 94 c2             	sete   %dl
  4054e4:	4d 85 c9             	test   %r9,%r9
  4054e7:	0f 94 c0             	sete   %al
  4054ea:	08 c2                	or     %al,%dl
  4054ec:	75 05                	jne    4054f3 <__vdsosym+0x153>
  4054ee:	48 85 c9             	test   %rcx,%rcx
  4054f1:	75 50                	jne    405543 <__vdsosym+0x1a3>
		if (!libc.auxv[i]) return 0;
  4054f3:	31 c0                	xor    %eax,%eax
			continue;
		return (void *)(base + syms[i].st_value);
	}

	return 0;
}
  4054f5:	48 83 c4 28          	add    $0x28,%rsp
  4054f9:	5b                   	pop    %rbx
  4054fa:	5d                   	pop    %rbp
  4054fb:	41 5c                	pop    %r12
  4054fd:	41 5d                	pop    %r13
  4054ff:	41 5e                	pop    %r14
  405501:	41 5f                	pop    %r15
  405503:	c3                   	retq   
  405504:	0f 1f 40 00          	nopl   0x0(%rax)
			dynv = (void *)((char *)eh + ph->p_offset);
  405508:	4c 89 d8             	mov    %r11,%rax
  40550b:	48 03 42 08          	add    0x8(%rdx),%rax
  40550f:	e9 1e ff ff ff       	jmpq   405432 <__vdsosym+0x92>
  405514:	0f 1f 40 00          	nopl   0x0(%rax)
		case DT_SYMTAB: syms = p; break;
  405518:	49 89 d1             	mov    %rdx,%r9
  40551b:	eb 85                	jmp    4054a2 <__vdsosym+0x102>
  40551d:	0f 1f 00             	nopl   (%rax)
		case DT_VERSYM: versym = p; break;
  405520:	49 89 d0             	mov    %rdx,%r8
  405523:	e9 7a ff ff ff       	jmpq   4054a2 <__vdsosym+0x102>
  405528:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40552f:	00 
		case DT_HASH: hashtab = p; break;
  405530:	48 89 d1             	mov    %rdx,%rcx
  405533:	e9 6a ff ff ff       	jmpq   4054a2 <__vdsosym+0x102>
  405538:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40553f:	00 
		if (!libc.auxv[i]) return 0;
  405540:	31 c0                	xor    %eax,%eax
}
  405542:	c3                   	retq   
	for (i=0; i<hashtab[1]; i++) {
  405543:	44 8b 51 04          	mov    0x4(%rcx),%r10d
	if (!verdef) versym = 0;
  405547:	4d 85 ed             	test   %r13,%r13
  40554a:	4c 0f 44 c3          	cmove  %rbx,%r8
	for (i=0; i<hashtab[1]; i++) {
  40554e:	45 85 d2             	test   %r10d,%r10d
  405551:	74 a0                	je     4054f3 <__vdsosym+0x153>
  405553:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  405558:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  40555d:	4d 89 cf             	mov    %r9,%r15
		if (!(1<<(syms[i].st_info&0xf) & OK_TYPES)) continue;
  405560:	41 be 27 00 00 00    	mov    $0x27,%r14d
  405566:	eb 1c                	jmp    405584 <__vdsosym+0x1e4>
  405568:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  40556f:	00 
	for (i=0; i<hashtab[1]; i++) {
  405570:	48 83 c3 01          	add    $0x1,%rbx
  405574:	44 89 d0             	mov    %r10d,%eax
  405577:	49 83 c7 18          	add    $0x18,%r15
  40557b:	48 39 d8             	cmp    %rbx,%rax
  40557e:	0f 86 6f ff ff ff    	jbe    4054f3 <__vdsosym+0x153>
		if (!(1<<(syms[i].st_info&0xf) & OK_TYPES)) continue;
  405584:	41 0f b6 47 04       	movzbl 0x4(%r15),%eax
  405589:	89 c6                	mov    %eax,%esi
  40558b:	83 e6 0f             	and    $0xf,%esi
  40558e:	41 0f a3 f6          	bt     %esi,%r14d
  405592:	73 dc                	jae    405570 <__vdsosym+0x1d0>
		if (!(1<<(syms[i].st_info>>4) & OK_BINDS)) continue;
  405594:	c0 e8 04             	shr    $0x4,%al
  405597:	be 06 04 00 00       	mov    $0x406,%esi
  40559c:	0f a3 c6             	bt     %eax,%esi
  40559f:	73 cf                	jae    405570 <__vdsosym+0x1d0>
		if (!syms[i].st_shndx) continue;
  4055a1:	66 41 83 7f 06 00    	cmpw   $0x0,0x6(%r15)
  4055a7:	74 c7                	je     405570 <__vdsosym+0x1d0>
		if (strcmp(name, strings+syms[i].st_name)) continue;
  4055a9:	41 8b 37             	mov    (%r15),%esi
  4055ac:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
  4055b1:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  4055b6:	48 89 0c 24          	mov    %rcx,(%rsp)
  4055ba:	4c 01 e6             	add    %r12,%rsi
  4055bd:	e8 9e 03 00 00       	callq  405960 <strcmp>
  4055c2:	85 c0                	test   %eax,%eax
  4055c4:	48 8b 0c 24          	mov    (%rsp),%rcx
  4055c8:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  4055cd:	75 36                	jne    405605 <__vdsosym+0x265>
		if (versym && !checkver(verdef, versym[i], vername, strings))
  4055cf:	4d 85 c0             	test   %r8,%r8
  4055d2:	74 6d                	je     405641 <__vdsosym+0x2a1>
  4055d4:	41 0f b7 3c 58       	movzwl (%r8,%rbx,2),%edi
  4055d9:	4c 89 ee             	mov    %r13,%rsi
  4055dc:	66 81 e7 ff 7f       	and    $0x7fff,%di
  4055e1:	eb 08                	jmp    4055eb <__vdsosym+0x24b>
  4055e3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		def = (Verdef *)((char *)def + def->vd_next);
  4055e8:	48 01 c6             	add    %rax,%rsi
		if (!(def->vd_flags & VER_FLG_BASE)
  4055eb:	f6 46 02 01          	testb  $0x1,0x2(%rsi)
  4055ef:	75 0d                	jne    4055fe <__vdsosym+0x25e>
		  && (def->vd_ndx & 0x7fff) == vsym)
  4055f1:	0f b7 46 04          	movzwl 0x4(%rsi),%eax
  4055f5:	66 25 ff 7f          	and    $0x7fff,%ax
  4055f9:	66 39 c7             	cmp    %ax,%di
  4055fc:	74 1a                	je     405618 <__vdsosym+0x278>
		if (def->vd_next == 0)
  4055fe:	8b 46 10             	mov    0x10(%rsi),%eax
  405601:	85 c0                	test   %eax,%eax
  405603:	75 e3                	jne    4055e8 <__vdsosym+0x248>
  405605:	44 8b 51 04          	mov    0x4(%rcx),%r10d
  405609:	e9 62 ff ff ff       	jmpq   405570 <__vdsosym+0x1d0>
	for (i=0; libc.auxv[i] != AT_SYSINFO_EHDR; i+=2)
  40560e:	b8 08 00 00 00       	mov    $0x8,%eax
  405613:	e9 ca fd ff ff       	jmpq   4053e2 <__vdsosym+0x42>
	Verdaux *aux = (Verdaux *)((char *)def + def->vd_aux);
  405618:	8b 46 0c             	mov    0xc(%rsi),%eax
	return !strcmp(vername, strings + aux->vda_name);
  40561b:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
  405620:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  405625:	48 89 0c 24          	mov    %rcx,(%rsp)
  405629:	8b 34 06             	mov    (%rsi,%rax,1),%esi
  40562c:	4c 01 e6             	add    %r12,%rsi
  40562f:	e8 2c 03 00 00       	callq  405960 <strcmp>
		if (versym && !checkver(verdef, versym[i], vername, strings))
  405634:	85 c0                	test   %eax,%eax
  405636:	48 8b 0c 24          	mov    (%rsp),%rcx
  40563a:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
  40563f:	75 c4                	jne    405605 <__vdsosym+0x265>
		return (void *)(base + syms[i].st_value);
  405641:	48 89 e8             	mov    %rbp,%rax
  405644:	49 03 47 08          	add    0x8(%r15),%rax
  405648:	e9 a8 fe ff ff       	jmpq   4054f5 <__vdsosym+0x155>
  40564d:	0f 1f 00             	nopl   (%rax)

0000000000405650 <__expand_heap>:
 * allocated, which will be larger than requested due to page alignment
 * and mmap minimum size rules. The caller is responsible for locking
 * to prevent concurrent calls. */

void *__expand_heap(size_t *pn)
{
  405650:	55                   	push   %rbp
  405651:	53                   	push   %rbx
	static uintptr_t brk;
	static unsigned mmap_step;
	size_t n = *pn;

	if (n > SIZE_MAX/2 - PAGE_SIZE) {
  405652:	48 ba ff ef ff ff ff 	movabs $0x7fffffffffffefff,%rdx
  405659:	ff ff 7f 
{
  40565c:	48 83 ec 18          	sub    $0x18,%rsp
	size_t n = *pn;
  405660:	48 8b 07             	mov    (%rdi),%rax
	if (n > SIZE_MAX/2 - PAGE_SIZE) {
  405663:	48 39 d0             	cmp    %rdx,%rax
  405666:	0f 87 34 01 00 00    	ja     4057a0 <__expand_heap+0x150>
  40566c:	48 89 fd             	mov    %rdi,%rbp
		errno = ENOMEM;
		return 0;
	}
	n += -n & PAGE_SIZE-1;
  40566f:	48 89 c2             	mov    %rax,%rdx

	if (!brk) {
  405672:	48 8b 3d ff 2c 20 00 	mov    0x202cff(%rip),%rdi        # 608378 <brk.1890>
	n += -n & PAGE_SIZE-1;
  405679:	48 f7 da             	neg    %rdx
  40567c:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
  405682:	48 01 c2             	add    %rax,%rdx
	if (!brk) {
  405685:	48 85 ff             	test   %rdi,%rdi
  405688:	75 1d                	jne    4056a7 <__expand_heap+0x57>
	__asm__ __volatile__ ("syscall" : "=a"(ret) : "a"(n), "D"(a1) : "rcx", "r11", "memory");
  40568a:	b8 0c 00 00 00       	mov    $0xc,%eax
  40568f:	0f 05                	syscall 
		brk = __syscall(SYS_brk, 0);
		brk += -brk & PAGE_SIZE-1;
  405691:	48 89 c7             	mov    %rax,%rdi
  405694:	48 f7 df             	neg    %rdi
  405697:	81 e7 ff 0f 00 00    	and    $0xfff,%edi
  40569d:	48 01 c7             	add    %rax,%rdi
  4056a0:	48 89 3d d1 2c 20 00 	mov    %rdi,0x202cd1(%rip)        # 608378 <brk.1890>
	}

#ifdef MEASURE_BRK_TIME
	uint64_t start = rdtsc();
#endif /* MEASURE_BRK_TIME */
	int ret = __syscall(SYS_brk, brk+n);
  4056a7:	48 01 d7             	add    %rdx,%rdi
  4056aa:	b8 0c 00 00 00       	mov    $0xc,%eax
  4056af:	0f 05                	syscall 
#ifdef MEASURE_BRK_TIME
	uint64_t stop = rdtsc();
	printf("brk lat: %llu\n", stop - start);
#endif /*MEASURE_BRK_TIME */
	if (n < SIZE_MAX-brk && !traverses_stack_p(brk, brk+n)
  4056b1:	48 8b 0d c0 2c 20 00 	mov    0x202cc0(%rip),%rcx        # 608378 <brk.1890>
  4056b8:	48 89 ce             	mov    %rcx,%rsi
  4056bb:	48 f7 d6             	not    %rsi
  4056be:	48 39 f2             	cmp    %rsi,%rdx
  4056c1:	72 5d                	jb     405720 <__expand_heap+0xd0>
		*pn = n;
		brk += n;
		return (void *)(brk-n);
	}

	size_t min = (size_t)PAGE_SIZE << mmap_step/2;
  4056c3:	8b 0d a7 2c 20 00    	mov    0x202ca7(%rip),%ecx        # 608370 <mmap_step.1891>
  4056c9:	be 00 10 00 00       	mov    $0x1000,%esi
  4056ce:	48 89 d3             	mov    %rdx,%rbx
	if (n < min) n = min;
	void *area = __mmap(0, n, PROT_READ|PROT_WRITE,
  4056d1:	41 b8 ff ff ff ff    	mov    $0xffffffff,%r8d
	size_t min = (size_t)PAGE_SIZE << mmap_step/2;
  4056d7:	d1 e9                	shr    %ecx
  4056d9:	48 d3 e6             	shl    %cl,%rsi
	void *area = __mmap(0, n, PROT_READ|PROT_WRITE,
  4056dc:	b9 22 00 00 00       	mov    $0x22,%ecx
  4056e1:	48 39 d6             	cmp    %rdx,%rsi
  4056e4:	ba 03 00 00 00       	mov    $0x3,%edx
  4056e9:	48 0f 43 de          	cmovae %rsi,%rbx
  4056ed:	45 31 c9             	xor    %r9d,%r9d
  4056f0:	31 ff                	xor    %edi,%edi
  4056f2:	48 89 de             	mov    %rbx,%rsi
  4056f5:	e8 21 f2 ff ff       	callq  40491b <__mmap>
		MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);
	if (area == MAP_FAILED) return 0;
  4056fa:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  4056fe:	0f 84 b4 00 00 00    	je     4057b8 <__expand_heap+0x168>
	*pn = n;
	mmap_step++;
  405704:	83 05 65 2c 20 00 01 	addl   $0x1,0x202c65(%rip)        # 608370 <mmap_step.1891>
	*pn = n;
  40570b:	48 89 5d 00          	mov    %rbx,0x0(%rbp)
	return area;
}
  40570f:	48 83 c4 18          	add    $0x18,%rsp
  405713:	5b                   	pop    %rbx
  405714:	5d                   	pop    %rbp
  405715:	c3                   	retq   
  405716:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  40571d:	00 00 00 
	b = (uintptr_t)libc.auxv;
  405720:	48 8b 3d 29 4d a0 10 	mov    0x10a04d29(%rip),%rdi        # 10e0a450 <__libc+0x10>
	if (n < SIZE_MAX-brk && !traverses_stack_p(brk, brk+n)
  405727:	4c 8d 04 0a          	lea    (%rdx,%rcx,1),%r8
	a = b > len ? b-len : 0;
  40572b:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  405731:	48 8d b7 00 00 80 ff 	lea    -0x800000(%rdi),%rsi
  405738:	48 81 ff 01 00 80 00 	cmp    $0x800001,%rdi
  40573f:	49 0f 42 f1          	cmovb  %r9,%rsi
	if (new>a && old<b) return 1;
  405743:	49 39 f0             	cmp    %rsi,%r8
  405746:	76 09                	jbe    405751 <__expand_heap+0x101>
  405748:	48 39 f9             	cmp    %rdi,%rcx
  40574b:	0f 82 72 ff ff ff    	jb     4056c3 <__expand_heap+0x73>
	b = (uintptr_t)&b;
  405751:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
	a = b > len ? b-len : 0;
  405756:	48 8d b4 24 08 00 80 	lea    -0x7ffff8(%rsp),%rsi
  40575d:	ff 
  40575e:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  405764:	48 81 ff 01 00 80 00 	cmp    $0x800001,%rdi
  40576b:	49 0f 42 f1          	cmovb  %r9,%rsi
	if (new>a && old<b) return 1;
  40576f:	49 39 f0             	cmp    %rsi,%r8
  405772:	76 09                	jbe    40577d <__expand_heap+0x12d>
  405774:	48 39 cf             	cmp    %rcx,%rdi
  405777:	0f 87 46 ff ff ff    	ja     4056c3 <__expand_heap+0x73>
	    && ret == brk+n) {
  40577d:	48 98                	cltq   
  40577f:	49 39 c0             	cmp    %rax,%r8
  405782:	0f 85 3b ff ff ff    	jne    4056c3 <__expand_heap+0x73>
		*pn = n;
  405788:	48 89 55 00          	mov    %rdx,0x0(%rbp)
		brk += n;
  40578c:	4c 89 05 e5 2b 20 00 	mov    %r8,0x202be5(%rip)        # 608378 <brk.1890>
		return (void *)(brk-n);
  405793:	48 89 c8             	mov    %rcx,%rax
  405796:	e9 74 ff ff ff       	jmpq   40570f <__expand_heap+0xbf>
  40579b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
		errno = ENOMEM;
  4057a0:	e8 cb dc ff ff       	callq  403470 <__errno_location>
  4057a5:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
		return 0;
  4057ab:	31 c0                	xor    %eax,%eax
  4057ad:	e9 5d ff ff ff       	jmpq   40570f <__expand_heap+0xbf>
  4057b2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
	if (area == MAP_FAILED) return 0;
  4057b8:	31 c0                	xor    %eax,%eax
  4057ba:	e9 50 ff ff ff       	jmpq   40570f <__expand_heap+0xbf>

00000000004057bf <wcrtomb>:
#include <errno.h>
#include "internal.h"

size_t wcrtomb(char *restrict s, wchar_t wc, mbstate_t *restrict st)
{
	if (!s) return 1;
  4057bf:	48 85 ff             	test   %rdi,%rdi
  4057c2:	b8 01 00 00 00       	mov    $0x1,%eax
  4057c7:	0f 84 fc 00 00 00    	je     4058c9 <wcrtomb+0x10a>
	if ((unsigned)wc < 0x80) {
  4057cd:	83 fe 7f             	cmp    $0x7f,%esi
  4057d0:	0f 86 f4 00 00 00    	jbe    4058ca <wcrtomb+0x10b>
{
  4057d6:	48 83 ec 08          	sub    $0x8,%rsp
  4057da:	89 f0                	mov    %esi,%eax
  4057dc:	48 89 fa             	mov    %rdi,%rdx
  4057df:	64 48 8b 0c 25 00 00 	mov    %fs:0x0,%rcx
  4057e6:	00 00 
		*s = wc;
		return 1;
	} else if (MB_CUR_MAX == 1) {
  4057e8:	48 8b 89 c8 00 00 00 	mov    0xc8(%rcx),%rcx
  4057ef:	48 8b 09             	mov    (%rcx),%rcx
  4057f2:	48 85 c9             	test   %rcx,%rcx
  4057f5:	75 1b                	jne    405812 <wcrtomb+0x53>
		if (!IS_CODEUNIT(wc)) {
  4057f7:	2d 80 df 00 00       	sub    $0xdf80,%eax
  4057fc:	83 f8 7f             	cmp    $0x7f,%eax
  4057ff:	0f 87 b4 00 00 00    	ja     4058b9 <wcrtomb+0xfa>
		*s = wc;
  405805:	40 88 37             	mov    %sil,(%rdi)
		return 1;
  405808:	b8 01 00 00 00       	mov    $0x1,%eax
  40580d:	e9 b6 00 00 00       	jmpq   4058c8 <wcrtomb+0x109>
			errno = EILSEQ;
			return -1;
		}
		*s = wc;
		return 1;
	} else if ((unsigned)wc < 0x800) {
  405812:	81 fe ff 07 00 00    	cmp    $0x7ff,%esi
  405818:	77 1d                	ja     405837 <wcrtomb+0x78>
		*s++ = 0xc0 | (wc>>6);
  40581a:	89 f1                	mov    %esi,%ecx
		*s = 0x80 | (wc&0x3f);
  40581c:	83 e0 3f             	and    $0x3f,%eax
		*s++ = 0xc0 | (wc>>6);
  40581f:	c1 f9 06             	sar    $0x6,%ecx
		*s = 0x80 | (wc&0x3f);
  405822:	83 c8 80             	or     $0xffffff80,%eax
		*s++ = 0xc0 | (wc>>6);
  405825:	83 c9 c0             	or     $0xffffffc0,%ecx
		*s = 0x80 | (wc&0x3f);
  405828:	88 47 01             	mov    %al,0x1(%rdi)
		return 2;
  40582b:	b8 02 00 00 00       	mov    $0x2,%eax
		*s++ = 0xc0 | (wc>>6);
  405830:	88 0f                	mov    %cl,(%rdi)
		return 2;
  405832:	e9 91 00 00 00       	jmpq   4058c8 <wcrtomb+0x109>
	} else if ((unsigned)wc < 0xd800 || (unsigned)wc-0xe000 < 0x2000) {
  405837:	8d 8e 00 20 ff ff    	lea    -0xe000(%rsi),%ecx
  40583d:	81 f9 ff 1f 00 00    	cmp    $0x1fff,%ecx
  405843:	76 08                	jbe    40584d <wcrtomb+0x8e>
  405845:	81 fe ff d7 00 00    	cmp    $0xd7ff,%esi
  40584b:	77 28                	ja     405875 <wcrtomb+0xb6>
		*s++ = 0xe0 | (wc>>12);
  40584d:	89 c1                	mov    %eax,%ecx
  40584f:	c1 f9 0c             	sar    $0xc,%ecx
  405852:	83 c9 e0             	or     $0xffffffe0,%ecx
  405855:	88 0a                	mov    %cl,(%rdx)
		*s++ = 0x80 | ((wc>>6)&0x3f);
  405857:	89 c1                	mov    %eax,%ecx
		*s = 0x80 | (wc&0x3f);
  405859:	83 e0 3f             	and    $0x3f,%eax
		*s++ = 0x80 | ((wc>>6)&0x3f);
  40585c:	c1 f9 06             	sar    $0x6,%ecx
		*s = 0x80 | (wc&0x3f);
  40585f:	83 c8 80             	or     $0xffffff80,%eax
		*s++ = 0x80 | ((wc>>6)&0x3f);
  405862:	83 e1 3f             	and    $0x3f,%ecx
		*s = 0x80 | (wc&0x3f);
  405865:	88 42 02             	mov    %al,0x2(%rdx)
		return 3;
  405868:	b8 03 00 00 00       	mov    $0x3,%eax
		*s++ = 0x80 | ((wc>>6)&0x3f);
  40586d:	83 c9 80             	or     $0xffffff80,%ecx
  405870:	88 4a 01             	mov    %cl,0x1(%rdx)
		return 3;
  405873:	eb 53                	jmp    4058c8 <wcrtomb+0x109>
	} else if ((unsigned)wc-0x10000 < 0x100000) {
  405875:	8d 8e 00 00 ff ff    	lea    -0x10000(%rsi),%ecx
  40587b:	81 f9 ff ff 0f 00    	cmp    $0xfffff,%ecx
  405881:	77 36                	ja     4058b9 <wcrtomb+0xfa>
		*s++ = 0xf0 | (wc>>18);
  405883:	89 f1                	mov    %esi,%ecx
		*s++ = 0x80 | ((wc>>12)&0x3f);
		*s++ = 0x80 | ((wc>>6)&0x3f);
		*s = 0x80 | (wc&0x3f);
  405885:	83 e0 3f             	and    $0x3f,%eax
		*s++ = 0xf0 | (wc>>18);
  405888:	c1 f9 12             	sar    $0x12,%ecx
		*s = 0x80 | (wc&0x3f);
  40588b:	83 c8 80             	or     $0xffffff80,%eax
		*s++ = 0xf0 | (wc>>18);
  40588e:	83 c9 f0             	or     $0xfffffff0,%ecx
		*s = 0x80 | (wc&0x3f);
  405891:	88 47 03             	mov    %al,0x3(%rdi)
		return 4;
  405894:	b8 04 00 00 00       	mov    $0x4,%eax
		*s++ = 0xf0 | (wc>>18);
  405899:	88 0f                	mov    %cl,(%rdi)
		*s++ = 0x80 | ((wc>>12)&0x3f);
  40589b:	89 f1                	mov    %esi,%ecx
  40589d:	c1 f9 0c             	sar    $0xc,%ecx
  4058a0:	83 e1 3f             	and    $0x3f,%ecx
  4058a3:	83 c9 80             	or     $0xffffff80,%ecx
  4058a6:	88 4f 01             	mov    %cl,0x1(%rdi)
		*s++ = 0x80 | ((wc>>6)&0x3f);
  4058a9:	89 f1                	mov    %esi,%ecx
  4058ab:	c1 f9 06             	sar    $0x6,%ecx
  4058ae:	83 e1 3f             	and    $0x3f,%ecx
  4058b1:	83 c9 80             	or     $0xffffff80,%ecx
  4058b4:	88 4f 02             	mov    %cl,0x2(%rdi)
		return 4;
  4058b7:	eb 0f                	jmp    4058c8 <wcrtomb+0x109>
	}
	errno = EILSEQ;
  4058b9:	e8 b2 db ff ff       	callq  403470 <__errno_location>
  4058be:	c7 00 54 00 00 00    	movl   $0x54,(%rax)
	return -1;
  4058c4:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
}
  4058c8:	5a                   	pop    %rdx
  4058c9:	c3                   	retq   
		*s = wc;
  4058ca:	40 88 37             	mov    %sil,(%rdi)
		return 1;
  4058cd:	b8 01 00 00 00       	mov    $0x1,%eax
}
  4058d2:	c3                   	retq   

00000000004058d3 <close_file>:
weak_alias(dummy_file, __stdout_used);
weak_alias(dummy_file, __stderr_used);

static void close_file(FILE *f)
{
	if (!f) return;
  4058d3:	48 85 ff             	test   %rdi,%rdi
  4058d6:	74 47                	je     40591f <close_file+0x4c>
{
  4058d8:	53                   	push   %rbx
	FFINALLOCK(f);
  4058d9:	8b 87 8c 00 00 00    	mov    0x8c(%rdi),%eax
  4058df:	48 89 fb             	mov    %rdi,%rbx
  4058e2:	85 c0                	test   %eax,%eax
  4058e4:	78 05                	js     4058eb <close_file+0x18>
  4058e6:	e8 ac f3 ff ff       	callq  404c97 <__lockfile>
	if (f->wpos > f->wbase) f->write(f, 0, 0);
  4058eb:	48 8b 43 38          	mov    0x38(%rbx),%rax
  4058ef:	48 39 43 28          	cmp    %rax,0x28(%rbx)
  4058f3:	76 0a                	jbe    4058ff <close_file+0x2c>
  4058f5:	31 d2                	xor    %edx,%edx
  4058f7:	31 f6                	xor    %esi,%esi
  4058f9:	48 89 df             	mov    %rbx,%rdi
  4058fc:	ff 53 48             	callq  *0x48(%rbx)
	if (f->rpos < f->rend) f->seek(f, f->rpos-f->rend, SEEK_CUR);
  4058ff:	48 8b 73 08          	mov    0x8(%rbx),%rsi
  405903:	48 8b 43 10          	mov    0x10(%rbx),%rax
  405907:	48 39 c6             	cmp    %rax,%rsi
  40590a:	73 12                	jae    40591e <close_file+0x4b>
  40590c:	48 29 c6             	sub    %rax,%rsi
  40590f:	48 89 df             	mov    %rbx,%rdi
  405912:	48 8b 43 50          	mov    0x50(%rbx),%rax
}
  405916:	5b                   	pop    %rbx
	if (f->rpos < f->rend) f->seek(f, f->rpos-f->rend, SEEK_CUR);
  405917:	ba 01 00 00 00       	mov    $0x1,%edx
  40591c:	ff e0                	jmpq   *%rax
}
  40591e:	5b                   	pop    %rbx
  40591f:	c3                   	retq   

0000000000405920 <__stdio_exit>:

void __stdio_exit(void)
{
  405920:	53                   	push   %rbx
	FILE *f;
	for (f=*__ofl_lock(); f; f=f->next) close_file(f);
  405921:	e8 e7 ba ff ff       	callq  40140d <__ofl_lock>
  405926:	48 8b 18             	mov    (%rax),%rbx
  405929:	48 85 db             	test   %rbx,%rbx
  40592c:	74 0e                	je     40593c <__stdio_exit+0x1c>
  40592e:	48 89 df             	mov    %rbx,%rdi
  405931:	e8 9d ff ff ff       	callq  4058d3 <close_file>
  405936:	48 8b 5b 70          	mov    0x70(%rbx),%rbx
  40593a:	eb ed                	jmp    405929 <__stdio_exit+0x9>
	close_file(__stdin_used);
  40593c:	48 c7 c0 80 83 60 00 	mov    $0x608380,%rax
  405943:	48 8b 38             	mov    (%rax),%rdi
  405946:	e8 88 ff ff ff       	callq  4058d3 <close_file>
	close_file(__stdout_used);
  40594b:	48 c7 c0 a8 71 60 00 	mov    $0x6071a8,%rax
}
  405952:	5b                   	pop    %rbx
	close_file(__stdout_used);
  405953:	48 8b 38             	mov    (%rax),%rdi
  405956:	e9 78 ff ff ff       	jmpq   4058d3 <close_file>
  40595b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000405960 <strcmp>:
#include <string.h>

int strcmp(const char *l, const char *r)
{
	for (; *l==*r && *l; l++, r++);
  405960:	0f b6 07             	movzbl (%rdi),%eax
  405963:	0f b6 16             	movzbl (%rsi),%edx
  405966:	38 c2                	cmp    %al,%dl
  405968:	75 1c                	jne    405986 <strcmp+0x26>
  40596a:	84 d2                	test   %dl,%dl
  40596c:	75 06                	jne    405974 <strcmp+0x14>
  40596e:	eb 20                	jmp    405990 <strcmp+0x30>
  405970:	84 c0                	test   %al,%al
  405972:	74 1c                	je     405990 <strcmp+0x30>
  405974:	48 83 c7 01          	add    $0x1,%rdi
  405978:	48 83 c6 01          	add    $0x1,%rsi
  40597c:	0f b6 07             	movzbl (%rdi),%eax
  40597f:	0f b6 16             	movzbl (%rsi),%edx
  405982:	38 d0                	cmp    %dl,%al
  405984:	74 ea                	je     405970 <strcmp+0x10>
  405986:	29 d0                	sub    %edx,%eax
  405988:	c3                   	retq   
  405989:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
  405990:	31 c0                	xor    %eax,%eax
	return *(unsigned char *)l - *(unsigned char *)r;
}
  405992:	c3                   	retq   

Disassembly of section .fini:

0000000000405993 <_fini>:

.section .fini
.global _fini
_fini:
	push %rax
  405993:	50                   	push   %rax

.section .fini
	pop %rax
  405994:	58                   	pop    %rax
	ret
  405995:	c3                   	retq   
